<?xml version="1.0" encoding="UTF-8"?>
<sqlset>
    <name>CA</name>
    <version>2.0</version>
    <description>CA 모듈을 위한 쿼리</description>
    
    <!-- cnp project S..... -->
    <!-- ================================================= -->
    <!-- ================================================= -->
    
    <sql-query name="SELECT_TB_CM_BHID_LDR" description="행동지표 별 계층 맵핑 삭제" >
        <![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : SELECT_TB_CM_BHID_LDR
        
        SELECT COUNT(*) CNT FROM TB_CM_BHID_LDR
        WHERE COMPANYID = ? AND BHID_NUM = ? AND CMPT_NUM = ? 
        
        ]]>
    </sql-query>
    
    
    <sql-query name="DELETE_TB_CM_BHID_LDR" description="행동지표 별 계층 맵핑 삭제" >
        <![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : DELETE_TB_CM_BHID_LDR
        
        DELETE FROM TB_CM_BHID_LDR WHERE COMPANYID = ? AND BHID_NUM = ? AND CMPT_NUM = ?    
        
        ]]>
    </sql-query>
    
    
    <sql-query name="INSERT_TB_CM_BHID_LDR" description="행동지표 별 계층 맵핑 저장" >
        <![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : INSERT_TB_CM_BHID_LDR
        
        INSERT INTO TB_CM_BHID_LDR (
           BHID_NUM, COMPANYID, CMPT_NUM, 
           LDR_NUM, USEFLAG, CREATETIME, 
           CREATER) 
        VALUES ( ?, ?, ?, ?, ?, SYSDATE, ?)   
        
        ]]>
    </sql-query>
    
    
    <sql-query name="SELECT_JOBLDR_CODE_LIST" description="계층리스트" >
        <![CDATA[

        --sql_file : ca-sqlset.xml
        --commnet :계층 정보 리스트
        --sql_name : SELECT_JOBLDR_CODE_LIST
        
        SELECT JOBLDR_NUM AS DATA, JOBLDR_NAME AS LABEL
          FROM TB_CM_JOB_LDR_I
         WHERE COMPANYID = ?
           AND JOBLDR_FLAG = 'L' 
         ORDER BY JOBLDR_NAME    
        
        ]]>
    </sql-query>
    
    
    <sql-query name="SELECT_BHID_LDR_MAPPING_LIST" description="계층리스트" >
        <![CDATA[

        --sql_file : ca-sqlset.xml
        --commnet :행동지표별 계층 정보 리스트
        --sql_name : SELECT_BHID_LDR_MAPPING_LIST
        
        SELECT LDR_NUM AS DATA, JOBLDR_NAME AS LABEL
        FROM TB_CM_BHID_LDR A, TB_CM_JOB_LDR_I B
        WHERE A.COMPANYID = B.COMPANYID AND A.LDR_NUM = B.JOBLDR_NUM
        AND A.COMPANYID = ? 
        AND B.COMPANYID = ?
        AND A.BHID_NUM = ?
        AND B.JOBLDR_FLAG = 'L' 
        ORDER BY JOBLDR_NAME   
        
        ]]>
    </sql-query>
    
    <sql-query name="CSTM_CNTR"
		description="고객센터" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :고객센터
		--sql_name : CSTM_CNTR
		
      SELECT NAME,DVS_NAME,EMAIL,PHONE,
      (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I where JOBLDR_NUM = BU.LEADERSHIP AND JOBLDR_FLAG = 'L' AND COMPANYID = ? AND USEFLAG = 'Y') LEADERSHIP_NAME
      FROM TB_BA_USER BU, (SELECT * FROM TB_BA_DIVISION WHERE COMPANYID = ? AND USEFLAG = 'Y') BD, (SELECT USERID FROM TB_BA_COMPANY_M WHERE COMPANYID = ?) BC
      WHERE BC.USERID = BU.USERID
      AND BD.DIVISIONID = BU.DIVISIONID
      AND BU.COMPANYID = ?
      AND BU.USEFLAG = 'Y'  

		
    ]]></sql-query>
    
    <sql-query name="CSTM_CNTR2"
		description="고객센터" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :고객센터
		--sql_name : CSTM_CNTR
		
      SELECT NAME,DVS_NAME,EMAIL,PHONE,
      (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I where JOBLDR_NUM = BU.LEADERSHIP AND JOBLDR_FLAG = 'L' AND COMPANYID = 1 AND USEFLAG = 'Y') LEADERSHIP_NAME
      FROM TB_BA_USER BU, (SELECT * FROM TB_BA_DIVISION WHERE COMPANYID = 1 AND USEFLAG = 'Y') BD, (SELECT USERID FROM TB_BA_COMPANY_M WHERE COMPANYID = 1) BC
      WHERE BC.USERID = BU.USERID
      AND BD.DIVISIONID(+) = BU.DIVISIONID
      AND BU.COMPANYID = 1
      AND BU.USEFLAG = 'Y'

		
    ]]></sql-query>
    
     <sql-query name="GET_BRD_LIST"
		description="게시판(리스트)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판
		--sql_name : GET_BRD_LIST
        SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
            SELECT BB.BOARD_CODE, BB.BOARD_NUM, BOARD_TITLE, BOARD_CONTENT, VIEW_CNT, BB.CREATER, NAME, 
            TO_CHAR(BB.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME,ROW_NUMBER() OVER(PARTITION BY BB.BOARD_CODE ORDER BY BB.CREATETIME ASC) ROWNUMBER,
            NVL(REPCOUNT, 0) REPCOUNT
            FROM TB_BRD_BOARD BB, TB_BA_USER BU,
                (
                SELECT RP.COMPANYID, RP.BOARD_CODE, RP.BOARD_NUM, COUNT(*) REPCOUNT
                FROM TB_BRD_REPLY RP, TB_BA_USER US
                WHERE RP.COMPANYID = US.COMPANYID AND RP.CREATER = US.USERID AND US.USEFLAG = 'Y' AND RP.USEFLAG = 'Y'
                GROUP BY RP.COMPANYID, RP.BOARD_CODE, RP.BOARD_NUM
                ) RE
            WHERE BB.CREATER = BU.USERID AND BB.COMPANYID = BU.COMPANYID
                AND BB.COMPANYID = RE.COMPANYID(+) AND BB.BOARD_CODE = RE.BOARD_CODE(+) AND BB.BOARD_NUM = RE.BOARD_NUM(+)
                AND BB.COMPANYID = ?
                AND BB.BOARD_CODE = ?
                AND BB.USEFLAG = 'Y'
        )SL
        WHERE 1=1
        ]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
		]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic></sql-query>  
    
     <sql-query name="GET_BRD_DETAIL_LIST"
		description="게시판(상세 리스트)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(상세 리스트)
		--sql_name : GET_BRD_DETAIL_LIST

        SELECT BOARD_CODE, BOARD_NUM, BOARD_TITLE, BOARD_CONTENT, VIEW_CNT, BB.CREATER,BU.USERID,BU.NAME,
        TO_CHAR(BB.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME
        FROM TB_BRD_BOARD BB, TB_BA_USER BU
        WHERE BB.CREATER = BU.USERID
        AND BB.COMPANYID = BU.COMPANYID
        AND BB.BOARD_CODE = ?
        AND BB.BOARD_NUM = ?
        AND BB.COMPANYID = ?
        AND BB.USEFLAG = 'Y'
		
    ]]></sql-query>   
    
     <sql-query name="GET_BRD_COMENT_LIST"
		description="게시판(코멘트)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(코멘트)
		--sql_name : GET_BRD_COMENT_LIST
		
        SELECT  BOARD_CODE, BOARD_NUM, REPLY_NUM, REPLY_CONTENT, BR.CREATER, BU.USERID,BU.NAME,
        TO_CHAR(BR.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME 
        FROM TB_BRD_REPLY BR, (SELECT USERID,COMPANYID,NAME FROM TB_BA_USER WHERE USEFLAG = 'Y') BU
        WHERE BOARD_CODE = ?
        AND BR.CREATER = BU.USERID
        AND BR.COMPANYID = BU.COMPANYID
        AND BOARD_NUM = ?
        AND BR.COMPANYID = ?
        AND BR.USEFLAG = 'Y'
        ORDER BY REPLY_NUM DESC
		
    ]]></sql-query> 
    
    <sql-query name="GET_COMENT_MAX_CNT"
		description="게시판(코멘트) 카운팅" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(코멘트) 카운팅
		--sql_name : GET_COMENT_MAX_CNT
		
 	SELECT NVL(MAX(REPLY_NUM), 0)+1 FROM TB_BRD_REPLY WHERE BOARD_CODE = ? AND BOARD_NUM = ? AND COMPANYID = ?
		
    ]]></sql-query> 
    
    <sql-query name="SEQ_BRD_NUM"
		description="게시판(코멘트) 카운팅" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(코멘트) 카운팅
		--sql_name : SEQ_BRD_NUM
		
 	   SELECT S_BRD_NUM.NEXTVAL FROM DUAL
		
    ]]></sql-query>
    
    <sql-query name="GET_BRD_CONT_MERGE"
		description="게시판 저장 수정" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판 저장 수정
		--sql_name : GET_BRD_CONT_MERGE
		
		
		MERGE INTO TB_BRD_BOARD A
        USING(
            SELECT 
                ? BOARD_TITLE,
                ? BOARD_CONTENT,
                ? BOARD_CODE,
                ? BOARD_NUM,
                ? USERID,
                ? COMPANYID,
                SYSDATE CREATETIME,
                'Y' USEFLAG,
                0 VIEW_CNT
            FROM DUAL
        ) B
        ON (A.BOARD_CODE = B.BOARD_CODE AND A.BOARD_NUM = B.BOARD_NUM AND A.COMPANYID = B.COMPANYID )
        WHEN NOT MATCHED THEN
            INSERT(A.BOARD_TITLE, A.BOARD_CONTENT, A.BOARD_CODE, A.BOARD_NUM, A.USEFLAG, A.CREATETIME, A.CREATER, A.COMPANYID, A.VIEW_CNT) 
            VALUES(B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_CODE, B.BOARD_NUM, B.USEFLAG, B.CREATETIME, B.USERID, B.COMPANYID, B.VIEW_CNT)
        WHEN MATCHED THEN
            UPDATE
            SET A.BOARD_TITLE = B.BOARD_TITLE,
                A.BOARD_CONTENT = B.BOARD_CONTENT,
                A.MODIFYTIME = B.CREATETIME,
                A.MODIFIER = B.USERID
	
    ]]></sql-query> 
    
    
    <sql-query name="GET_BRD_COMENT_SAVE"
		description="게시판(코멘트)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(코멘트) 저장
		--sql_name : GET_BRD_COMENT_SAVE
		
	INSERT INTO TB_BRD_REPLY ( BOARD_CODE, BOARD_NUM, REPLY_NUM, REPLY_CONTENT, CREATER ,COMPANYID, USEFLAG ) 
	VALUES 					 (?, ?, ?, ?, ?, ?, 'Y')
		
    ]]></sql-query> 
    
     <sql-query name="GET_BRD_COMENT_DEL"
		description="게시판(코멘트) 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(코멘트) 삭제
		--sql_name : GET_BRD_COMENT_DEL
		
       UPDATE TB_BRD_REPLY
       SET USEFLAG = 'N',
       MODIFIER = ?,
       MODIFYTIME = SYSDATE
       WHERE BOARD_CODE = ?
       AND BOARD_NUM = ?
       AND REPLY_NUM = ?
       AND COMPANYID = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_BRD_DEL"
		description="게시판(게시글) 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(게시글) 삭제
		--sql_name : GET_BRD_DEL
		
       UPDATE TB_BRD_BOARD
       SET USEFLAG = 'N',
       MODIFIER = ?,
       MODIFYTIME = SYSDATE
       WHERE COMPANYID = ?
       AND BOARD_CODE = ?
       AND BOARD_NUM = ?
		
    ]]></sql-query>
    
    
    <sql-query name="GET_BRD_COMENT_ALL_DEL"
		description="게시글(코멘트) 전체 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판(코멘트) 삭제
		--sql_name : GET_BRD_COMENT_ALL_DEL
		
       UPDATE TB_BRD_REPLY
       SET USEFLAG = 'N',
       MODIFIER = ?,
       MODIFYTIME = SYSDATE
       WHERE COMPANYID = ?
       AND BOARD_CODE = ?
       AND BOARD_NUM = ?
		
    ]]></sql-query>
    
     <sql-query name="GET_BRD_UP_COUNT"
		description="게시판 조회수" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet :게시판 조회수 +
		--sql_name : GET_BRD_UP_COUNT
		
       UPDATE TB_BRD_BOARD
       SET VIEW_CNT = (SELECT NVL(MAX(VIEW_CNT), 0)+1 FROM TB_BRD_BOARD WHERE COMPANYID = ? AND BOARD_CODE = ? AND BOARD_NUM =?)
       WHERE COMPANYID = ?
       AND BOARD_CODE = ?
       AND BOARD_NUM = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_SERV_YEAL_LIST"
		description="설문관리 년도 셀렉트박스 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_YEAL_LIST
		--commnet :설문관리 년도 셀렉트박스 리스트
		
		SELECT DISTINCT TO_CHAR(PP_ST, 'YYYY') VALUE, TO_CHAR(PP_ST, 'YYYY') TEXT from TB_SV_PP
	    WHERE COMPANYID = ?
	    AND DEL_YN = 'N'
        ORDER BY VALUE DESC		
		
    ]]></sql-query>
    
        <sql-query name="GET_SIMPLE_SERV_INFO"
		description="설문관리 메일 정보 INFO" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SIMPLE_SERV_INFO
		--commnet :설문관리 메일 정보 INFO
        
        SELECT * FROM TB_SV_PP
        WHERE COMPANYID = ?
        AND PP_NO = ?
		
    ]]></sql-query>
    
    
    <sql-query name="GET_SERV_LIST"
		description="설문관리 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_LIST
		--commnet :설문관리 리스트
		
		SELECT 
	    ROW_NUMBER() OVER(ORDER BY PP_NO)-1 ROWNUMBER, DECODE(PP_NO, NULL,  'checked="1"', '') CHECKFLAG, PP_PURP, PP_ST, PP_ED,
	    PP_NO,PP_NM,FUN_DATE_FORMAT(PP_ST, 1)||' ~ '|| FUN_DATE_FORMAT(PP_ED, 1) RUN_DATE,USEFLAG, TO_CHAR(PP_ST, 'YYYY') YYYY, DECODE(USEFLAG, 'Y', '사용', '미사용') USEFLAG_STRING
	    from TB_SV_PP 
	    WHERE COMPANYID = ?
	 	AND TO_CHAR(PP_ST, 'YYYY') = ?
	 	AND DEL_YN = 'N'
	 	ORDER BY USEFLAG DESC, CREATETIME DESC , PP_ST DESC
		
		
    ]]></sql-query>
    
    <sql-query name="GET_SERV_QSTN"
		description="설문관리 설문문항" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_QSTN
		--commnet :설문관리 설문문항
		
		SELECT PP_NO ,COMPANYID ,QSTN_SEQ ,QSTN_TYPE_CD ,QSTN ,OD_SEQ ,USEFLAG , ROW_NUMBER() OVER(ORDER BY PP_NO)-1 ROWNUMBER, DECODE(PP_NO, NULL,  'checked="1"', '') CHECKFLAG
		,FUN_COMMON_CODE(COMPANYID, 'C113',QSTN_TYPE_CD) QSTN_TYPE_CD_STRING, ROW_NUMBER() OVER(ORDER BY PP_NO) RSTNUMBER
        FROM TB_SV_QSTN
        WHERE COMPANYID = ?
        AND USEFLAG = 'Y'
        AND PP_NO = ?
        ORDER BY ROWNUMBER ASC
		
		
    ]]></sql-query>
    
        <sql-query name="GET_SERV_RST_COUNT"
		description="설문관리 설문문항(객관식 유무)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_RST
		--commnet :설문관리 설문결과
		
       SELECT COMPANYID, PP_NO, QSTN_SEQ, DECODE(PP_NO, NULL,  '', '1') TYPE_FLAG
        FROM TB_SV_RST
        WHERE COMPANYID = ? AND PP_NO = ? AND QSTN_SEQ = ?
        AND ROWNUM < 2
        AND USEFLAG = 'Y'
		
		
    ]]></sql-query>
    
    <sql-query name="GET_SERV_RST"
		description="설문관리 설문문항(객관식)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_RST
		--commnet :설문관리 설문결과
		
         SELECT COMPANYID, PP_NO, QSTN_SEQ, SV_RST
            , CASE WHEN SV_RST = 1 THEN '전혀아니다'
                   WHEN SV_RST = 2 THEN '아니다'
                   WHEN SV_RST = 3 THEN '보통이다'
                   WHEN SV_RST = 4 THEN '그렇다'
                   WHEN SV_RST = 5 THEN '매우그렇다'
              END SV_RST_NM
            , COUNT(*) CNT, DECODE(PP_NO, NULL,  '', '1') TYPE_FLAG, ROW_NUMBER() OVER(ORDER BY SV_RST ASC) - 1 ROWNUMBER
        FROM TB_SV_RST
        WHERE COMPANYID = ? AND PP_NO = ? AND QSTN_SEQ = ?
            AND USEFLAG = 'Y'
        GROUP BY COMPANYID, PP_NO, QSTN_SEQ, SV_RST
		
		
    ]]></sql-query>
    
        <sql-query name="GET_SERV_RST2"
		description="설문관리 설문문항(주관식)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_RST2
		--commnet :설문관리 설문결과
		
        SELECT SV_RST, USEFLAG, QSTN_SEQ, PP_NO, DECODE(PP_NO, NULL,  '', '2') TYPE_FLAG
        FROM TB_SV_RST
        WHERE COMPANYID = ? AND PP_NO = ? AND QSTN_SEQ = ?
            AND USEFLAG = 'Y'
		
		
    ]]></sql-query>
    
    <sql-query name="GET_SERV_TARG"
		description="설문관리 대상자관리" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_TARG
		--commnet :설문관리 대상자관리
		
        SELECT ST.USERID, BD.DVS_NAME, BU.NAME NAME, BU.EMPNO, ST.PP_NO, ST.COMPANYID, ST.GD, ST.AGE, ST.USEFLAG, BU.EMPNO, DECODE(PP_NO, NULL,  'checked="1"', '') CHECKFLAG, ROW_NUMBER() OVER(ORDER BY PP_NO)-1 ROWNUMBER
        FROM TB_SV_TARG ST, (SELECT * FROM TB_BA_USER) BU, (SELECT * FROM TB_BA_DIVISION) BD
        WHERE ST.COMPANYID = BU.COMPANYID
        AND ST.COMPANYID = BD.COMPANYID
        AND ST.USERID = BU.USERID
        AND BU.DIVISIONID = BD.DIVISIONID
        AND ST.COMPANYID = ?
        AND ST.PP_NO = ?
        AND ST.USEFLAG = 'Y'
		
		
    ]]></sql-query>
    
    <sql-query name="GET_SERV_QSTN_POOL"
		description="설문관리 설문문항 POOL" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_QSTN
		--commnet :설문관리 설문문항 POOL
		
		SELECT COMPANYID , QSTN_POOL_NO, QSTN_TYPE_CD ,QSTN ,USEFLAG ,FUN_COMMON_CODE(COMPANYID, 'C113',QSTN_TYPE_CD) QSTN_TYPE_CD_STRING
		, ROW_NUMBER() OVER(ORDER BY QSTN_POOL_NO)-1 ROWNUMBER, DECODE(QSTN_POOL_NO, NULL,  'checked="1"', '') CHECKFLAG
        FROM TB_SV_QSTN_POOL
        WHERE COMPANYID = ?
        AND USEFLAG = 'Y'
		
		
    ]]></sql-query>
    
       <sql-query name="GET_SERV_QSTN_CONUNT"
		description="설문관리 설문문항 카운트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_QSTN_CONUNT
		--commnet :설문관리 설문문항
		
		SELECT count(*) count
        FROM TB_SV_QSTN
        WHERE COMPANYID = ?
        AND USEFLAG = 'Y'
        AND PP_NO = ?
        ORDER BY QSTN_SEQ ASC
		
		
    ]]></sql-query>

    <sql-query name="GET_SERV_USER"
		description="설문관리 USER 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_USER
		--commnet :설문관리 USER 리스트
		
        SELECT BU.USERID
         , BU.ID
         , BU.NAME
         , BU.EMPNO
         , BU.JOB
         , (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = BU.COMPANYID AND JOBLDR_NUM = BU.JOB AND JOBLDR_FLAG = 'J' AND USEFLAG ='Y') JOB_NAME
         , BU.LEADERSHIP
         , (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = BU.COMPANYID AND JOBLDR_NUM = BU.LEADERSHIP AND JOBLDR_FLAG = 'L' AND USEFLAG ='Y') LEADERSHIP_NAME
         , BD.DVS_NAME
         , BU.GRADE_NM
         , ROW_NUMBER() OVER(ORDER BY BU.USERID)-1 ROWNUMBER, DECODE(USERID, NULL,  'checked="1"', '') CHECKFLAG
      FROM TB_BA_USER BU, TB_BA_DIVISION BD
       WHERE BU.COMPANYID = BD.COMPANYID(+)
       AND BU.DIVISIONID = BD.DIVISIONID(+)
       AND BU.COMPANYID = ?
       AND BU.USEFLAG = 'Y'
		
		
    ]]></sql-query>
    
    
	<sql-query name="GET_SEND_INFO_LIST" description="발송정보 가져오기" ><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_SEND_INFO_LIST
        
		SELECT *
		  FROM (
                SELECT NAME AS FROM_NAME
                     , EMAIL AS FROM_EMAIL
                     , REPLACE(CELLPHONE,'-','') AS FROM_PHONE
                  FROM TB_BA_USER
                 WHERE COMPANYID = ?
                   AND USERID = ?
	           ) A,
	           (
		        SELECT NAME as TO_NAME
		             , EMAIL as TO_EMAIL
		             , REPLACE(CELLPHONE,'-','') AS TO_PHONE
		          FROM TB_BA_USER
		         WHERE COMPANYID = ? 
		           AND USERID = ?
	           ) B
    ]]></sql-query>
    
	<sql-query name="GET_SERV_LIST_EXCEL" description="설문관리 결과 엑셀다운로드"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "GET_SERV_LIST_EXCEL"
		SELECT DVS_NAME, NAME, EMPNO, GD, 
			   AGE]]><dynamic><![CDATA[ ${ QUERY_SELECT } ]]></dynamic><![CDATA[
		FROM(
		    SELECT ST.COMPANYID, ST.PP_NO, ST.USERID, DVS_NAME, NAME, EMPNO, GD, AGE
        FROM TB_SV_TARG ST, TB_BA_USER BU, TB_BA_DIVISION BD
        WHERE ST.COMPANYID = BU.COMPANYID AND ST.USERID = BU.USERID
           	 	AND BU.COMPANYID = BD.COMPANYID(+) AND BU.DIVISIONID = BD.DIVISIONID(+)
	            AND ST.COMPANYID = ?
	           	AND ST.USEFLAG = 'Y' 
            	AND BU.USEFLAG = 'Y' 
           		AND ST.PP_NO = ?
        	) A
        	]]><dynamic><![CDATA[ ${ QUERY_FROM} ]]></dynamic><![CDATA[WHERE 1=1
		    ]]><dynamic><![CDATA[ ${ QUERY_WHERE} ]]></dynamic><![CDATA[ORDER BY B0.SV_RST]]>
	</sql-query>

	<sql-query name="GET_CMPT_LIST" description="역량 리스트"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_LIST
        
       SELECT
        COMPANYID, 
        CMPNUMBER, 
        CMPGROUP, 
        CMPGROUP_S, 
        CMPNAME, 
        CMPDEFINITION, 
        KNOWLEDGE, 
        SKILL, 
        ATTITUDE, 
        BSNS_REQR_LEVEL, 
        USEFLAG,
        FUN_COMMON_CODE(COMPANYID, 'C102', CMPGROUP) CMPGROUP_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C103', CMPGROUP_S) CMPGROUP_S_STRING,
        DECODE(USEFLAG, 'Y', '사용', '미사용') USEFLAG_STRING,
        TO_CHAR(CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
        TO_CHAR(MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING
        FROM TB_CM_COMPETENCY
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
        ORDER BY USEFLAG_STRING DESC,  CREATETIME_STRING DESC, CMPGROUP_STRING ASC, CMPGROUP_S_STRING ASC, CMPNAME ASC
    ]]></sql-query>
    
    

    <sql-query name="GET_OPERATOR_CMPT_LIST" description="고객사 역량 리스트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_CMPT_LIST
        
        SELECT 
        COMPANYID, 
        CMPNUMBER, 
        CMPGROUP, 
        CMPGROUP_S, 
        CMPNAME, 
        CMPDEFINITION, 
        KNOWLEDGE, 
        SKILL, 
        ATTITUDE, 
        BSNS_REQR_LEVEL, 
        USEFLAG,
        FUN_COMMON_CODE(COMPANYID, 'C102', CMPGROUP) CMPGROUP_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C103', CMPGROUP_S) CMPGROUP_S_STRING,
        DECODE(USEFLAG, 'Y', '사용', '미사용')USEFLAG_STRING,
        TO_CHAR(CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
        TO_CHAR(MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING
        FROM TB_CM_COMPETENCY
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
        ORDER BY USEFLAG_STRING DESC,  CREATETIME_STRING DESC, CMPGROUP_STRING ASC
    ]]></sql-query>
    
    <sql-query name="GET_BHV_LIST" description="행동지표 리스트"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_BHV_LIST
        --commnet :행동지표 리스트 
        
        SELECT A.COMPANYID, B.CMPGROUP, A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR, FUN_COMMON_CODE(A.COMPANYID, 'C102',B.CMPGROUP) CMPGROUP_STRING, 
                    CMPNAME, A.USEFLAG, DECODE(A.USEFLAG, 'Y', '예','아니오') USEFLAG_STRING,
                    TO_CHAR(A.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
                    TO_CHAR(A.MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING,
                    A.CNST_BHV_INDC_NUM, NVL(A.SOCIAL_ADVISABLE_FLAG, 'N') SOCIAL_ADVISABLE_FLAG,
                    C.BHV_INDICATOR CNST_BHV_INDICATOR
        FROM TB_CM_BHV_INDICATOR A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
        WHERE A.CMPNUMBER = B.CMPNUMBER
        AND     A.COMPANYID = B.COMPANYID
        AND     A.COMPANYID = C.COMPANYID(+)
        AND     A.CNST_BHV_INDC_NUM = C.BHV_INDC_NUM(+)
        AND     A.COMPANYID = ? 
        AND     A.CMPNUMBER = ?
        ORDER BY CASE  WHEN A.CREATETIME = (SELECT MAX(CREATETIME) FROM TB_CM_BHV_INDICATOR)  THEN '1'
                 ELSE '2'
                 END ASC, CMPNUMBER, BHV_INDC_NUM

    ]]></sql-query>
    
     <sql-query name="USER_TARGET_INFO" description="역량 평가 대상자 관리 엑셀업로드용 유저정보 Info"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : USER_TARGET_INFO
        --commnet :
        
        SELECT DIVISIONID 
        FROM TB_BA_USER
		WHERE COMPANYID= ?
		AND USERID = ?

    ]]></sql-query>
    
    <sql-query name="USER_TARGET_ONE_USER" description="역량 평가 대상자 관리 엑셀업로드용 유저정보 Info"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : USER_TARGET_ONE_USER
        --commnet :
        
        SELECT USERID ONE_USERID
        FROM TB_BA_USER
        WHERE COMPANYID= ?
        AND EMPNO  = ?

    ]]></sql-query>
    
    <sql-query name="USER_TARGET_TWO_USER" description="역량 평가 대상자 관리 엑셀업로드용 유저정보 Info"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : USER_TARGET_TWO_USER
        --commnet :
        
       SELECT USERID TWO_USERID
        FROM TB_BA_USER
        WHERE COMPANYID= ?
        AND EMPNO  = ?

    ]]></sql-query>
    
    <sql-query name="GET_OPERATOR_BHV_LIST" description="고객사 행동지표 리스트"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_BHV_LIST
        --commnet :고객사 행동지표 리스트 
        
        SELECT A.COMPANYID, B.CMPGROUP, A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR, FUN_COMMON_CODE(A.COMPANYID, 'C102',B.CMPGROUP) CMPGROUP_STRING, 
                    CMPNAME, A.USEFLAG, DECODE(A.USEFLAG, 'Y', '예','아니오') USEFLAG_STRING,
                    TO_CHAR(A.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
                    TO_CHAR(A.MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING,
                    A.CNST_BHV_INDC_NUM, NVL(A.SOCIAL_ADVISABLE_FLAG, 'N') SOCIAL_ADVISABLE_FLAG,
                    C.BHV_INDICATOR CNST_BHV_INDICATOR
        FROM TB_CM_BHV_INDICATOR A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
        WHERE A.CMPNUMBER = B.CMPNUMBER
        AND     A.COMPANYID = B.COMPANYID
        AND     A.COMPANYID = C.COMPANYID(+)
        AND     A.CNST_BHV_INDC_NUM = C.BHV_INDC_NUM(+)
        AND     A.COMPANYID = ? 
        AND     A.CMPNUMBER = ?
        ORDER BY CASE  WHEN A.CREATETIME = (SELECT MAX(CREATETIME) FROM TB_CM_BHV_INDICATOR)  THEN '1'
                 ELSE '2'
                 END ASC, CMPNUMBER, BHV_INDC_NUM

    ]]></sql-query>
    
    <sql-query name="MERGE_CM_COMPETENCY" description="역량MERGE"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : MERGE_CM_COMPETENCY
        
        MERGE INTO TB_CM_COMPETENCY A
        USING(
            SELECT 
                ? COMPANYID,
                ? CMPNUMBER,
                ? CMPGROUP,
                ? CMPGROUP_S,
                ? CMPNAME,
                ? CMPDEFINITION,
                UPPER(?) USEFLAG,
                SYSDATE CREATETIME,
                ? CREATER
            FROM DUAL
        ) B
        ON (  A.COMPANYID = B.COMPANYID AND A.CMPNUMBER = B.CMPNUMBER)
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.CMPNUMBER, A.CMPGROUP, A.CMPGROUP_S, A.CMPNAME, A.CMPDEFINITION, A.USEFLAG, A.CREATETIME, A.CREATER) 
            VALUES(B.COMPANYID, SEQ_CMPNUMBER.NEXTVAL, B.CMPGROUP, B.CMPGROUP_S, B.CMPNAME, B.CMPDEFINITION, B.USEFLAG, B.CREATETIME, B.CREATER)
        WHEN MATCHED THEN
            UPDATE
            SET A.CMPNAME = B.CMPNAME,
                A.CMPDEFINITION = B.CMPDEFINITION,
                A.USEFLAG = B.USEFLAG,
                A.MODIFYTIME = B.CREATETIME,
                A.MODIFIER = B.CREATER,
                A.CMPGROUP = B.CMPGROUP,
                A.CMPGROUP_S = B.CMPGROUP_S
    ]]></sql-query>
    
    
        <sql-query name="MERGE_CM_SERV" description="설문관리 문항풀 엑셀 업로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : MERGE_CM_SERV
        
        MERGE INTO TB_SV_QSTN_POOL A 
        USING(
            SELECT 
                ? COMPANYID, 
                ? QSTN_POOL_NO,
                ? QSTN_TYPE_CD,
                ? QSTN,
                UPPER(?) USEFLAG,
                SYSDATE CREATETIME,
                ? CREATER,
                (SELECT NVL(MAX(QSTN_POOL_NO), 0)+1 FROM TB_SV_QSTN_POOL WHERE COMPANYID = ?) MAX_QSTN_POOL_NO
            FROM DUAL
        ) B
        ON (  A.COMPANYID = B.COMPANYID AND A.QSTN_POOL_NO = B.QSTN_POOL_NO)
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.QSTN_POOL_NO, A.QSTN_TYPE_CD, A.QSTN, A.USEFLAG, A.CREATETIME, A.CREATER) 
            VALUES(B.COMPANYID, B.MAX_QSTN_POOL_NO, B.QSTN_TYPE_CD, B.QSTN, B.USEFLAG, B.CREATETIME, B.CREATER)
        WHEN MATCHED THEN
            UPDATE
            SET A.QSTN_TYPE_CD = B.QSTN_TYPE_CD,
                A.QSTN = B.QSTN,
                A.USEFLAG = B.USEFLAG,
                A.MODIFYTIME = B.CREATETIME,
                A.MODIFIER = B.CREATER
    ]]></sql-query>
    
    	<sql-query name="ADMIN_COMMON_DEL" description="어드민 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "ADMIN_COMMON_DEL"
	
		 UPDATE TB_CM_COMPETENCY 
         SET DEL_YN = 'Y' , USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND CMPNUMBER = ?
         
         
	]]></sql-query>
	
	 <sql-query name="ADMIN_COMMON_DEL2" description="어드민 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "ADMIN_COMMON_DEL2"
	
		 UPDATE TB_CM_BHV_INDICATOR 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND CMPNUMBER = ?
         AND BHV_INDC_NUM = ?
         
         
	]]></sql-query>
	
	<sql-query name="ADMIN_COMMON_DEL3" description="어드민 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "ADMIN_COMMON_DEL3"
	
		 UPDATE TB_KPI 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND KPI_NO = ?
         
         
	]]></sql-query>
	
	<sql-query name="ADMIN_COMMON_DEL4" description="어드민 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "ADMIN_COMMON_DEL4"
	
		 UPDATE TB_BA_COMPANY_M 
         SET DEL_YN = 'Y', USE_YN = 'N'
         WHERE COMPANYID = ?
         
         
	]]></sql-query>
	
	<sql-query name="OPERATOR_COMMON_DEL5" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL5"
	
		 UPDATE TB_CM_JOB_LDR_I 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND JOBLDR_NUM = ?
         
         
	]]></sql-query>
	
	
	<sql-query name="OPERATOR_COMMON_DEL6" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL6"
	
		 UPDATE TB_CM_JOB_LDR_I 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND JOBLDR_NUM = ?
         
         
	]]></sql-query>
	
	<sql-query name="OPERATOR_COMMON_DEL7" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL7"
	
		 UPDATE TB_BA_DIVISION 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND DIVISIONID = ?
         
         
	]]></sql-query>
	
	<sql-query name="OPERATOR_COMMON_DEL8" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL8"
	
		 UPDATE TB_BA_USER 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND USERID = ?
         
         
	]]></sql-query>
	
		<sql-query name="OPERATOR_COMMON_DEL9" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL9"
	
		 UPDATE TB_BA_COMMONCODE 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND STANDARDCODE = ?
         AND COMMONCODE = ?
         
         
		]]></sql-query>
		
				<sql-query name="OPERATOR_COMMON_DEL10" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL10"
	
		 UPDATE TB_BA_SBJCT 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND SUBJECT_NUM = ?
         
         
		]]></sql-query>
	
		<sql-query name="OPERATOR_COMMON_DEL11" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL11"
	
		 UPDATE TB_CM_COMPETENCY 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND CMPNUMBER = ?
         
         
	]]></sql-query>
	
			<sql-query name="OPERATOR_COMMON_DEL12" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL12"
	
		 UPDATE TB_CM_BHV_INDICATOR 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND CMPNUMBER = ?
         AND BHV_INDC_NUM = ?
         
         
	]]></sql-query>
	
	<sql-query name="OPERATOR_COMMON_DEL13" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL13"
	
		 UPDATE TB_KPI 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND KPI_NO = ?
         
         
	]]></sql-query>
	
	<sql-query name="OPERATOR_COMMON_DEL14" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL14"
	
		 UPDATE TB_CAM_RUN_L 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND RUN_NUM = ?
         
         
	]]></sql-query>
	
		<sql-query name="OPERATOR_COMMON_DEL15" description="고객사관리자 공통(삭제)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : "OPERATOR_COMMON_DEL15"
	
		 UPDATE TB_SV_PP 
         SET DEL_YN = 'Y', USEFLAG = 'N'
         WHERE COMPANYID = ?
         AND PP_NO = ?
         
         
	]]></sql-query>
    
    
    <sql-query name="MERGE_OPERATOR_CM_COMPETENCY" description="역량MERGE(고객사)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : MERGE_OPERATOR_CM_COMPETENCY
        
        MERGE INTO TB_CM_COMPETENCY A
        USING(
            SELECT 
                ? COMPANYID,
                ? CMPNUMBER,
                ? CMPGROUP,
                ? CMPNAME,
                ? CMPDEFINITION,
                ? USEFLAG,
                SYSDATE CREATETIME,
                ? CREATER
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.CMPNUMBER = B.CMPNUMBER)
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.CMPNUMBER, A.CMPGROUP, A.CMPNAME, A.CMPDEFINITION, A.USEFLAG, A.CREATETIME, A.CREATER) 
            VALUES(B.COMPANYID, SEQ_CMPNUMBER.NEXTVAL, B.CMPGROUP, B.CMPNAME, B.CMPDEFINITION, B.USEFLAG, B.CREATETIME, B.CREATER)
        WHEN MATCHED THEN
            UPDATE
            SET A.CMPGROUP = B.CMPGROUP,
                A.CMPNAME = B.CMPNAME,
                A.CMPDEFINITION = B.CMPDEFINITION,
                A.USEFLAG = B.USEFLAG,
                A.MODIFYTIME = B.CREATETIME,
                A.MODIFIER = B.CREATER
    ]]></sql-query>
    
    
      <sql-query name="COMMON_ADMIN_EXCEL_LIST" description="코드모음 다운로드"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_ADMIN_EXCEL_LIST
        
 			SELECT A.STN_CODENAME, A.CMM_CODENAME, A.COMMONCODE, B.STN_CODENAME S_STN_CODENAME, B.CMM_CODENAME S_CMM_CODENAME, B.COMMONCODE S_COMMONCODE
			FROM
			    (SELECT BS.STN_CODENAME, BC.CMM_CODENAME, BC.COMMONCODE 
			    FROM  TB_BA_STANDARDCODE BS, TB_BA_COMMONCODE BC
			                 WHERE BS.STANDARDCODE = BC.STANDARDCODE
			                 AND BS.COMPANYID = BC.COMPANYID
			                 AND BS.COMPANYID = ?
			                 AND BS.STANDARDCODE = 'C102'
			                 AND BS.USEFLAG = BC.USEFLAG
			                 AND BS.USEFLAG = 'Y'
			                 AND BC.DEL_YN = 'N'  ) A,
			    (SELECT BS2.STN_CODENAME, BC2.CMM_CODENAME, BC2.COMMONCODE , BC2.PARENT_COMMONCODE
			    FROM  TB_BA_STANDARDCODE BS2, TB_BA_COMMONCODE BC2
			                 WHERE BS2.STANDARDCODE = BC2.STANDARDCODE
			                 AND BS2.COMPANYID = BC2.COMPANYID
			                 AND BS2.COMPANYID = ?
			                 AND BS2.STANDARDCODE = 'C103'
			                 AND BS2.USEFLAG = BC2.USEFLAG
			                 AND BS2.USEFLAG = 'Y'
			                 AND BC2.DEL_YN = 'N'  ) B
			     WHERE A.COMMONCODE = B.PARENT_COMMONCODE(+)
			     ORDER BY TO_NUMBER(A.COMMONCODE), TO_NUMBER(B.COMMONCODE)
    	]]></sql-query>
    
         <sql-query name="COMMON_ADMIN_EXCEL_LIST2" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_ADMIN_EXCEL_LIST2
        
        SELECT  FUN_COMMON_CODE(COMPANYID, 'C102',CMPGROUP) CMPGROUP_STRING, 
            FUN_COMMON_CODE(COMPANYID, 'C103',CMPGROUP_S) CMPGROUP_S_STRING, 
            CMPNAME, CMPNUMBER
	    FROM TB_CM_COMPETENCY 
	    WHERE COMPANYID = ?
	    AND DEL_YN = 'N'
        ORDER BY CMPNUMBER

    	]]></sql-query>
    	
    	      <sql-query name="COMMON_ADMIN_EXCEL_LIST3" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_ADMIN_EXCEL_LIST3
        
SELECT A.STN_CODENAME, A.CMM_CODENAME, A.COMMONCODE, B.STN_CODENAME S_STN_CODENAME, B.CMM_CODENAME S_CMM_CODENAME, B.COMMONCODE S_COMMONCODE
FROM
    (SELECT BS.STN_CODENAME, BC.CMM_CODENAME, BC.COMMONCODE 
    FROM  TB_BA_STANDARDCODE BS, TB_BA_COMMONCODE BC
                 WHERE BS.STANDARDCODE = BC.STANDARDCODE
                 AND BS.COMPANYID = BC.COMPANYID
                 AND BS.COMPANYID = ?
                 AND BS.STANDARDCODE = 'C104'
                 AND BS.USEFLAG = BC.USEFLAG
                 AND BS.USEFLAG = 'Y'
                 AND BC.DEL_YN = 'N'  ) A,
    (SELECT BS2.STN_CODENAME, BC2.CMM_CODENAME, BC2.COMMONCODE , BC2.PARENT_COMMONCODE
    FROM  TB_BA_STANDARDCODE BS2, TB_BA_COMMONCODE BC2
                 WHERE BS2.STANDARDCODE = BC2.STANDARDCODE
                 AND BS2.COMPANYID = BC2.COMPANYID
                 AND BS2.COMPANYID = ?
                 AND BS2.STANDARDCODE = 'C105'
                 AND BS2.USEFLAG = BC2.USEFLAG
                 AND BS2.USEFLAG = 'Y'
                 AND BC2.DEL_YN = 'N'  ) B
     WHERE A.COMMONCODE = B.PARENT_COMMONCODE(+)
     ORDER BY TO_NUMBER(A.COMMONCODE), TO_NUMBER(B.COMMONCODE)

    	]]></sql-query>
    
     <sql-query name="COMMON_ADMIN_EXCEL_LIST4" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_ADMIN_EXCEL_LIST4
        
        SELECT BS.STN_CODENAME, BC.CMM_CODENAME, BC.COMMONCODE FROM  TB_BA_STANDARDCODE BS, TB_BA_COMMONCODE BC
                 WHERE BS.STANDARDCODE = BC.STANDARDCODE
                 AND BS.COMPANYID = BC.COMPANYID
                 AND BS.COMPANYID = ?
                 AND BS.STANDARDCODE IN('C109','C110')   
                 AND BC.DEL_YN = 'N'       
                 ORDER BY BS.STANDARDCODE, TO_NUMBER(COMMONCODE) ASC

    	]]></sql-query>
    
    <sql-query name="COMMON_OPERATOR_EXCEL_LIST" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_OPERATOR_EXCEL_LIST
        
 			SELECT DECODE(BS.STN_CODENAME, NULL,  '', '역량군') STN_CODENAME, BC.CMM_CODENAME, BC.COMMONCODE FROM  TB_BA_STANDARDCODE BS, TB_BA_COMMONCODE BC
                 WHERE BS.STANDARDCODE = BC.STANDARDCODE
                 AND BS.COMPANYID = BC.COMPANYID
                 AND BS.COMPANYID = ?
                 AND BS.STANDARDCODE IN('C102')
                 AND BS.USEFLAG = BC.USEFLAG
                 AND BS.USEFLAG = 'Y'
                 AND BC.DEL_YN = 'N'       
                 ORDER BY BS.STANDARDCODE, TO_NUMBER(COMMONCODE) ASC

    	]]></sql-query>
    
         <sql-query name="COMMON_OPERATOR_EXCEL_LIST2" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_OPERATOR_EXCEL_LIST2
        
        SELECT  FUN_COMMON_CODE(COMPANYID, 'C102',CMPGROUP) CMPGROUP_STRING, 
            CMPNAME, CMPNUMBER
	    FROM TB_CM_COMPETENCY 
	    WHERE COMPANYID = ?
	    AND DEL_YN = 'N'
        ORDER BY CMPNUMBER

    	]]></sql-query>
    	
    <sql-query name="COMMON_OPERATOR_EXCEL_LIST3" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_OPERATOR_EXCEL_LIST3
        
SELECT A.STANDARDCODE, A.STN_CODENAME, B.COMMONCODE, B.CMM_CODENAME
FROM TB_BA_STANDARDCODE A, TB_BA_COMMONCODE B
WHERE A.COMPANYID = B.COMPANYID AND A.STANDARDCODE = B.STANDARDCODE
    AND A.COMPANYID = ?
    AND A.USEFLAG = 'Y' AND B.USEFLAG = 'Y' AND B.DEL_YN = 'N'
    AND A.STANDARDCODE NOT IN('C102')
ORDER BY A.STANDARDCODE, B.COMMONCODE
        
    	]]></sql-query>
    
     <sql-query name="COMMON_OPERATOR_EXCEL_LIST4" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_OPERATOR_EXCEL_LIST4
        
       SELECT
       CASE WHEN JOBLDR_FLAG = 'J' THEN '직무'
            WHEN JOBLDR_FLAG = 'L' THEN'계층'
        END JOBLDR_FLAG,
        JOBLDR_NAME, JOBLDR_NUM
       FROM TB_CM_JOB_LDR_I
       WHERE COMPANYID = ?
       AND USEFLAG = 'Y'
       AND DEL_YN = 'N'
       ORDER BY JOBLDR_FLAG DESC, JOBLDR_NUM ASC

    	]]></sql-query>
    	
       <sql-query name="COMMON_OPERATOR_EXCEL_LIST5" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_OPERATOR_EXCEL_LIST5
        
		SELECT  DIVISIONID, DVS_FULLNAME
          FROM TB_BA_DIVISION
         WHERE  COMPANYID = ?
            AND USEFLAG = 'Y'
            AND DEL_YN = 'N'
         ORDER BY DIVISIONID

    	]]></sql-query>
    	
    	<sql-query name="COMMON_OPERATOR_EXCEL_LIST6" description="코드모음 다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : COMMON_OPERATOR_EXCEL_LIST6
        
                SELECT BU.EMPNO
                	 , BU.USERID
                     , BD.DVS_NAME
                     , BU.NAME
                     , BU.LEADERSHIP
                     , BU.JOB
                     , BU.GRADE_NUM
                     , BU.GRADE_NM
                     , (BU.NAME||BD.DVS_NAME||BU.GRADE_NM) SEARCH_STR 
                     , (select JOBLDR_NAME from TB_CM_JOB_LDR_I where JOBLDR_NUM = BU.LEADERSHIP AND JOBLDR_FLAG = 'L' AND COMPANYID = BU.COMPANYID) LEADERSHIP_NAME
                     , (select JOBLDR_NAME from TB_CM_JOB_LDR_I where JOBLDR_NUM = BU.JOB AND JOBLDR_FLAG = 'J' AND  COMPANYID = BU.COMPANYID) JOB_NAME
                  FROM (SELECT DIVISIONID, DVS_NAME, USEFLAG, COMPANYID FROM TB_BA_DIVISION ) BD,
                       TB_BA_USER BU
                 WHERE BU.DIVISIONID = BD.DIVISIONID(+)
                   AND BU.COMPANYID = BD.COMPANYID
                   AND BU.COMPANYID = ?
                   AND BU.USEFLAG = BD.USEFLAG
                   AND BU.USEFLAG = 'Y'
                   AND DEL_YN = 'N'
                 ORDER BY BD.DVS_NAME, NAME, LEADERSHIP_NAME, JOB_NAME

    	]]></sql-query>
    
    
    <sql-query name="GET_INDC_LIST_EXCEL" description="행동지표 목록 엑셀다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_INDC_LIST_EXCEL
        
        SELECT A.BHV_INDC_NUM, FUN_COMMON_CODE(A.COMPANYID, 'C102',B.CMPGROUP) CMPGROUP_STRING, 
            FUN_COMMON_CODE(A.COMPANYID, 'C103',B.CMPGROUP_S) CMPGROUP_S_STRING, 
            CMPNAME, A.CMPNUMBER,
            BHV_INDICATOR, A.USEFLAG, A.CNST_BHV_INDC_NUM, 
            NVL(A.SOCIAL_ADVISABLE_FLAG,'N') SOCIAL_ADVISABLE_FLAG
        FROM TB_CM_BHV_INDICATOR A, TB_CM_COMPETENCY B
        WHERE A.CMPNUMBER = B.CMPNUMBER
        AND   A.COMPANYID = B.COMPANYID
        AND   A.COMPANYID = ?
        AND   A.DEL_YN = 'N'
        AND   B.DEL_YN = 'N'
        ORDER BY CASE  WHEN A.CREATETIME = (SELECT MAX(CREATETIME) FROM TB_CM_BHV_INDICATOR)  THEN '1'
                 ELSE '2'
                 END ASC, CMPNUMBER, BHV_INDC_NUM

    ]]></sql-query>
    
    
    <sql-query name="GET_KPI_MAPP_LIST_EXCEL" description="KPI매핑 목록 엑셀다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_KPI_MAPP_LIST_EXCEL
        
SELECT         
    DECODE(JOBLDR_FLAG,'J','직무', DECODE(JOBLDR_FLAG, 'L','계층'))JOBLDR_FLAG_NAME,
    B.JOBLDR_NUM, C.JOBLDR_NAME, A.KPI_NO, A.KPI_NM, 
    FUN_COMMON_CODE(A.COMPANYID, 'C106', A.KPI_TYPE) KPI_TYPE_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C107', A.MEA_EVL_CYC) MEA_EVL_CYC_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C108', A.EVL_TYPE) EVL_TYPE_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C109', A.EVL_HOW) EVL_HOW_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C110', A.UNIT) UNIT_NM,
    B.USEFLAG, B.PRIO
FROM TB_KPI A, TB_KPI_JOBLDR_MAP B, TB_CM_JOB_LDR_I C
WHERE A.COMPANYID = B.COMPANYID AND A.KPI_NO = B.KPI_NO
    AND B.COMPANYID = C.COMPANYID AND B.JOBLDR_NUM = C.JOBLDR_NUM
    AND A.COMPANYID = ?
    AND A.USEFLAG = 'Y'
    AND B.USEFLAG = 'Y'
    AND C.USEFLAG = 'Y'
    AND A.REG_TYPE_CD = '1'
    AND A.KPI_TYPE IS NOT NULL
    AND A.MEA_EVL_CYC IS NOT NULL
    AND A.EVL_HOW IS NOT NULL
ORDER BY JOBLDR_FLAG_NAME, JOBLDR_NAME, KPI_NM
    ]]></sql-query>
    
    
    <sql-query name="GET_MAPP_LIST_EXCEL" description="역량매핑 목록 엑셀다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_MAPP_LIST_EXCEL
               SELECT 
            C.JOBLDR_FLAG_NAME,
            C.JOBLDR_NAME,
            C.JOBLDR_NUM,
            FUN_COMMON_CODE(A.COMPANYID, 'C102', CMPGROUP) CMPGROUP_STRING,
            A.CMPNAME,
            A.CMPNUMBER,
            B.USEFLAG,
            ROW_NUMBER() OVER(ORDER BY B.USEFLAG,B.CMPNUMBER ASC)-1 ROWNUMBER
        FROM TB_CM_COMPETENCY A,
            (
            SELECT CMPNUMBER, COMPANYID, USEFLAG, JOBLDR_NUM
            FROM TB_CM_JOBLER_CMPT_R
            WHERE USEFLAG = 'Y'
                AND COMPANYID = ?
            ) B,
            (SELECT COMPANYID,JOBLDR_NUM,JOBLDR_NAME,REPLACE(REPLACE(JOBLDR_FLAG,'J','직무'),'L','계층')JOBLDR_FLAG_NAME,JOBLDR_COMMENT,USEFLAG,CREATETIME,CREATER,MODIFYTIME,MODIFIER,MAIN_TASK, DECODE(USEFLAG, 'Y', '사용', '미사용') USEFLAG_STRING
             FROM TB_CM_JOB_LDR_I
             WHERE COMPANYID = ?
             AND USEFLAG = 'Y'
             AND DEL_YN = 'N') C
        WHERE A.COMPANYID = B.COMPANYID(+) 
            AND A.CMPNUMBER = B.CMPNUMBER(+)
            AND A.USEFLAG = 'Y'
            AND A.COMPANYID = ?
            AND A.DEL_YN = 'N'
            AND B.JOBLDR_NUM = C.JOBLDR_NUM
            AND A.CMPGROUP NOT IN (
                SELECT COMMONCODE
                FROM TB_BA_COMMONCODE
                WHERE COMPANYID = A.COMPANYID AND STANDARDCODE = 'C102' AND CD_VALUE1 = 'Y'
            )
        ORDER BY C.JOBLDR_FLAG_NAME DESC,C.JOBLDR_NUM ,ROWNUMBER, CMPGROUP_STRING, B.CMPNUMBER, A.CMPGROUP, A.CMPNUMBER 

    ]]></sql-query>


	<sql-query name="GET_INDC_LIST" description="행동지표 목록"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_INDC_LIST
        
        SELECT  A.COMPANYID, B.CMPGROUP, B.CMPGROUP_S, A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR, FUN_COMMON_CODE(A.COMPANYID, 'C102',B.CMPGROUP) CMPGROUP_STRING, FUN_COMMON_CODE(A.COMPANYID, 'C103', B.CMPGROUP_S) CMPGROUP_S_STRING,
                    CMPNAME, A.USEFLAG, DECODE(A.USEFLAG, 'Y', '사용','미사용') USEFLAG_STRING,
                    TO_CHAR(A.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
                    TO_CHAR(A.MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING,
                    A.CNST_BHV_INDC_NUM, NVL(A.SOCIAL_ADVISABLE_FLAG, 'N') SOCIAL_ADVISABLE_FLAG                   
        FROM TB_CM_BHV_INDICATOR A, TB_CM_COMPETENCY B
        WHERE A.CMPNUMBER = B.CMPNUMBER
        AND     A.COMPANYID = B.COMPANYID
        AND     A.COMPANYID = ?
        AND     B.USEFLAG = 'Y'
        AND     A.DEL_YN = 'N'
        ORDER BY USEFLAG_STRING DESC,  CREATETIME_STRING DESC ,CMPGROUP_STRING, CMPGROUP_S_STRING, CMPNAME DESC , CASE  WHEN A.CREATETIME = (SELECT MAX(CREATETIME) FROM TB_CM_BHV_INDICATOR)  THEN '1'
                 ELSE '2'
                 END ASC, CMPNUMBER, BHV_INDC_NUM

    ]]></sql-query>
    
    <sql-query name="GET_OPERATOR_INDC_LIST" description="행동지표 목록(고객사)"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_INDC_LIST
        
        SELECT A.COMPANYID, B.CMPGROUP, B.CMPGROUP_S, A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR, FUN_COMMON_CODE(A.COMPANYID, 'C102',B.CMPGROUP) CMPGROUP_STRING, FUN_COMMON_CODE(A.COMPANYID, 'C103', B.CMPGROUP_S) CMPGROUP_S_STRING,
                    CMPNAME, A.USEFLAG, DECODE(A.USEFLAG, 'Y', '사용','미사용') USEFLAG_STRING,
                    TO_CHAR(A.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
                    TO_CHAR(A.MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING,
                    A.CNST_BHV_INDC_NUM, NVL(A.SOCIAL_ADVISABLE_FLAG, 'N') SOCIAL_ADVISABLE_FLAG,
                    ROW_NUMBER() OVER(ORDER BY B.CMPGROUP , A.CMPNUMBER, A.BHV_INDC_NUM  ASC ) - 1 ROWNUMBER
        FROM TB_CM_BHV_INDICATOR A, TB_CM_COMPETENCY B
        WHERE A.CMPNUMBER = B.CMPNUMBER
        AND     A.COMPANYID = B.COMPANYID
        AND     A.COMPANYID = ?
        AND     B.USEFLAG = 'Y'
        AND     A.DEL_YN = 'N'
        ORDER BY USEFLAG_STRING DESC,  CREATETIME_STRING DESC ,CMPGROUP_STRING, CMPNAME DESC , CASE  WHEN A.CREATETIME = (SELECT MAX(CREATETIME) FROM TB_CM_BHV_INDICATOR)  THEN '1'
                 ELSE '2'
                 END ASC, CMPNUMBER, BHV_INDC_NUM

    ]]></sql-query>
    
    
    <sql-query name="GET_CMPT_LIST_EXCEL" description="역량 Pool 목록 엑셀다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_LIST_EXCEL
        
        SELECT 
        COMPANYID, 
        CMPNUMBER, 
        CMPGROUP, 
        CMPGROUP_S, 
        CMPNAME, 
        CMPDEFINITION, 
        KNOWLEDGE, 
        SKILL, 
        ATTITUDE, 
        USEFLAG,
        FUN_COMMON_CODE(COMPANYID, 'C102', CMPGROUP) CMPGROUP_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C103', CMPGROUP_S) CMPGROUP_S_STRING,
        DECODE(USEFLAG, 'Y', '예', '아니오')USEFLAG_STRING,
        TO_CHAR(CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
        TO_CHAR(MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING
        FROM TB_CM_COMPETENCY
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
        ORDER BY to_number(CMPNUMBER)  DESC

    ]]></sql-query>
    
    <sql-query name="GET_KPI_LIST_EXCEL" description="KPI Pool 목록 엑셀다운로드"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_KPI_LIST_EXCEL
        
       SELECT 
        COMPANYID, 
        KPI_NO, 
        KPIGROUP, 
        KPIGROUP_S, 
        EVL_HOW,
        UNIT,
        KPI_NM, 
        KPI_TYPE,                            
        USEFLAG,
        FUN_COMMON_CODE(COMPANYID, 'C104', KPIGROUP) KPIGROUP_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C105', KPIGROUP_S) KPIGROUP_S_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C106', KPI_TYPE) KPI_TYPE_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C109', EVL_HOW) EVL_HOW_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C110', UNIT) UNIT_STRING,
        DECODE(USEFLAG, 'Y', '예', '아니오')USEFLAG_STRING,
        TO_CHAR(CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
        TO_CHAR(MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING
        FROM TB_KPI
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
        ORDER BY CREATETIME  DESC

    ]]></sql-query>
    
    <sql-query name="GET_OPERATOR_KPI_LIST_EXCEL" description="KPI 목록 엑셀다운로드(고객사)"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_KPI_LIST_EXCEL
        
       SELECT 
        COMPANYID, 
        KPI_NO, 
        KPIGROUP, 
        KPIGROUP_S, 
        EVL_TYPE,
        EVL_HOW,
        UNIT,
        MEA_EVL_CYC,
        KPI_NM, 
        KPI_TYPE,                            
        USEFLAG,
        FUN_COMMON_CODE(COMPANYID, 'C104', KPIGROUP) KPIGROUP_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C105', KPIGROUP_S) KPIGROUP_S_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C106', KPI_TYPE) KPI_TYPE_STRING,        
        FUN_COMMON_CODE(COMPANYID, 'C107', MEA_EVL_CYC) MEA_EVL_CYC_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C108', EVL_TYPE) EVL_TYPE_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C109', EVL_HOW) EVL_HOW_STRING,
        FUN_COMMON_CODE(COMPANYID, 'C110', UNIT) UNIT_STRING,
        DECODE(USEFLAG, 'Y', '예', '아니오')USEFLAG_STRING,
        TO_CHAR(CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
        TO_CHAR(MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING
        FROM TB_KPI
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
        ORDER BY CREATETIME  DESC

    ]]></sql-query>
    
    <sql-query name="GET_KPI_LIST" description="KPI 리스트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_KPI_LIST
        
     SELECT 
        A.COMPANYID, 
        A.KPI_NO, 
        A.KPIGROUP, 
        A.KPIGROUP_S, 
        A.EVL_TYPE,
        A.EVL_HOW,
        A.UNIT,
        A.CAP,
        A.TARGET,
        A.THRESHOLD,
        A.TARGET_SET_WRNT,
        A.DATASOURCE,
        A.MGMT_DEPT,
        A.MEA_EVL_CYC,
        A.KPI_NM, 
        A.KPI_TYPE,                            
        A.USEFLAG,
        FUN_COMMON_CODE(A.COMPANYID, 'C104', A.KPIGROUP) KPIGROUP_STRING,
        FUN_COMMON_CODE(A.COMPANYID, 'C105', A.KPIGROUP_S) KPIGROUP_S_STRING,
        FUN_COMMON_CODE(A.COMPANYID, 'C106', A.KPI_TYPE) KPI_TYPE_STRING,        
        FUN_COMMON_CODE(A.COMPANYID, 'C107', A.MEA_EVL_CYC) MEA_EVL_CYC_STRING,
        FUN_COMMON_CODE(A.COMPANYID, 'C108', A.EVL_TYPE) EVL_TYPE_STRING,
        FUN_COMMON_CODE(A.COMPANYID, 'C109', A.EVL_HOW) EVL_HOW_STRING,
        FUN_COMMON_CODE(A.COMPANYID, 'C110', A.UNIT) UNIT_STRING,
        DECODE(A.USEFLAG, 'Y', '사용', '미사용')USEFLAG_STRING,
        TO_CHAR(A.CREATETIME, 'YYYY.MM.DD HH24:MI') CREATETIME_STRING,
        TO_CHAR(A.MODIFYTIME, 'YYYY.MM.DD HH24:MI') MODIFYTIME_STRING,
        A.REG_TYPE_CD,
        FUN_COMMON_CODE(A.COMPANYID, 'C116', A.REG_TYPE_CD) REG_TYPE_CD_STRING,
        A.CREATER, B.NAME
        FROM TB_KPI A, TB_BA_USER B
        WHERE A.CREATER = B.USERID(+)
            AND A.COMPANYID = ?
            AND A.DEL_YN = 'N'
        ORDER BY USEFLAG_STRING DESC,  CREATETIME_STRING DESC, KPIGROUP_STRING DESC, KPIGROUP_S_STRING DESC
    ]]></sql-query>
    
    
    <sql-query name="MERGE_CM_KPI" description="KPI MERGE"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : MERGE_CM_KPI
        
       MERGE INTO TB_KPI A
        USING(
            SELECT 
                ? COMPANYID,
                ? KPI_NO,
                ? KPIGROUP,
                ? KPIGROUP_S,
                ? KPI_NM,
                ? EVL_HOW,
                ? UNIT,
                UPPER(?) USEFLAG,
                SYSDATE CREATETIME,
                '1' REG_TYPE_CD,
                ? CREATER
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.KPI_NO = B.KPI_NO)
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.KPI_NO, A.KPIGROUP, A.KPIGROUP_S, A.KPI_NM, A.EVL_HOW, A.UNIT, A.USEFLAG, A.CREATETIME, A.CREATER, A.REG_TYPE_CD) 
            VALUES(B.COMPANYID, SEQ_KPI_NO.NEXTVAL, B.KPIGROUP, B.KPIGROUP_S, B.KPI_NM, B.EVL_HOW, B.UNIT,  B.USEFLAG, B.CREATETIME, B.CREATER, B.REG_TYPE_CD)
        WHEN MATCHED THEN
            UPDATE
            SET A.KPIGROUP = B.KPIGROUP,
                A.KPIGROUP_S = B.KPIGROUP_S,
                A.KPI_NM = B.KPI_NM,
                A.EVL_HOW = B.EVL_HOW,
                A.UNIT = B.UNIT,
                A.USEFLAG = B.USEFLAG,
                A.MODIFYTIME = B.CREATETIME,
                A.MODIFIER = B.CREATER
    ]]></sql-query>
    
    <sql-query name="OPERATOR_CHANGE_REGTYPE" description="OPERATOR_CHANGE_REGTYPE"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : OPERATOR_CHANGE_REGTYPE
UPDATE TB_KPI
SET REG_TYPE_CD = ?
WHERE COMPANYID = ?
    AND KPI_NO = ?
    ]]></sql-query>
    
        
    <sql-query name="OPERATOR_MERGE_CM_KPI" description="OPERATOR_MERGE_CM_KPI"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : OPERATOR_MERGE_CM_KPI
        
       MERGE INTO TB_KPI A
        USING(
            SELECT 
                ? COMPANYID,
                ? KPI_NO,
                ? KPI_NM,
                ? KPI_TYPE,
                ? MEA_EVL_CYC,
                ? EVL_TYPE,
                ? EVL_HOW,
                ? UNIT,
                ? CAP,
                ? TARGET,
                ? THRESHOLD,
                ? TARGET_SET_WRNT,
                ? DATASOURCE,
                ? MGMT_DEPT,
                UPPER(?) USEFLAG,
                '1' REG_TYPE_CD,
                SYSDATE CREATETIME,
                ? CREATER
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.KPI_NO = B.KPI_NO)
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.KPI_NO, A.KPI_NM,  A.KPI_TYPE, A.MEA_EVL_CYC, A.EVL_TYPE, A.EVL_HOW, A.UNIT, A.CAP, A.TARGET, A.THRESHOLD, A.TARGET_SET_WRNT,  A.DATASOURCE, A.MGMT_DEPT, A.USEFLAG, A.CREATETIME, A.CREATER, A.REG_TYPE_CD) 
            VALUES(B.COMPANYID, SEQ_KPI_NO.NEXTVAL, B.KPI_NM, B.KPI_TYPE, B.MEA_EVL_CYC, B.EVL_TYPE, B.EVL_HOW, B.UNIT, B.CAP, B.TARGET, B.THRESHOLD, B.TARGET_SET_WRNT, B.DATASOURCE, B.MGMT_DEPT, B.USEFLAG, B.CREATETIME, B.CREATER, B.REG_TYPE_CD)
        WHEN MATCHED THEN
            UPDATE
            SET A.KPI_NM = B.KPI_NM,
                A.KPI_TYPE = B.KPI_TYPE,
                A.MEA_EVL_CYC = B.MEA_EVL_CYC,
                A.EVL_TYPE = B.EVL_TYPE,
                A.EVL_HOW = B.EVL_HOW,
                A.UNIT = B.UNIT,
                A.CAP = B.CAP,
                A.TARGET = B.TARGET,
                A.THRESHOLD = B.THRESHOLD, 
                A.TARGET_SET_WRNT = B.TARGET_SET_WRNT,
                A.DATASOURCE = B.DATASOURCE,
                A.MGMT_DEPT = B.MGMT_DEPT,
                A.USEFLAG = B.USEFLAG,
                A.MODIFYTIME = B.CREATETIME,
                A.MODIFIER = B.CREATER
    ]]></sql-query>


	<sql-query name="KPI_ADD_CHECK" description="KPI CHECK"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : KPI_ADD_CHECK
        
       SELECT NVL(KPI_ADD_YN, 'N') KPI_ADD_YN 
       FROM TB_BA_COMPANY_M 
       WHERE COMPANYID = ?
       
    ]]></sql-query>
    
    <sql-query name="CMPT_ADD_CHECK" description="CMPT_ADD_CHECK"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : CMPT_ADD_CHECK
        
       SELECT CMPT_INFO_ADD_YN 
       FROM TB_BA_COMPANY_M 
       WHERE COMPANYID = ?
       
    ]]></sql-query>

	<sql-query name="GET_COMMON_CODE_LIST" description="공통코드 조회"><![CDATA[
        
        --sql_file : ca-sqlset.xml
        --sql_name : GET_COMMON_CODE_LIST
        ]]>
		<dynamic><![CDATA[ ${ ADD_OPT } ]]></dynamic>
        <![CDATA[
        SELECT * 
        FROM(
	       SELECT COMMONCODE VALUE, CMM_CODENAME TEXT, PARENT_COMMONCODE P_VALUE, USEFLAG
	       FROM TB_BA_COMMONCODE
	       WHERE STANDARDCODE = ?
		       AND USEFLAG = 'Y'
		       AND COMPANYID = ?
           ORDER BY CMM_CODENAME
	       )
       ]]>
	</sql-query>
    
    <sql-query name="GET_CMPGROUP_LIST" description="역량군목록 조회"><![CDATA[
        
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPGROUP_LIST
        
       SELECT COMMONCODE VALUE, CMM_CODENAME||' [ 코드 :  '||COMMONCODE||' ]' TEXT, PARENT_COMMONCODE P_VALUE, USEFLAG, CMM_CODENAME, STANDARDCODE
       FROM TB_BA_COMMONCODE
       WHERE STANDARDCODE = ?
       AND COMPANYID = ?
       ]]>
        <dynamic><![CDATA[ ${ WHERE_STR } ]]></dynamic>
    </sql-query>

	<sql-query name="MERGE_CMPGROUP_COMMONCODE" description="역량군 코드 MERGE"><![CDATA[
        
        --sql_file : ca-sqlset.xml
        --sql_name : MERGE_CMPGROUP_COMMONCODE
        
MERGE INTO TB_BA_COMMONCODE A
USING(
    SELECT
        ? COMMONCODE,
        ? CMM_CODENAME,
        ? STANDARDCODE,
        ? USEFLAG,
        ? PARENT_STANDARDCODE,
        ? PARENT_COMMONCODE,
        ? COMPANYID,
        SYSDATE CREATETIME,
        ? CREATER,
        (SELECT NVL(MAX(TO_NUMBER(COMMONCODE)), 0)+1 FROM TB_BA_COMMONCODE WHERE COMPANYID = ? AND STANDARDCODE = ?) MAX_COMMONCODE
    FROM DUAL
) B
ON (A.COMPANYID = B.COMPANYID AND A.STANDARDCODE = B.STANDARDCODE AND A.COMMONCODE = B.COMMONCODE)
WHEN NOT MATCHED THEN
    INSERT(A.COMMONCODE, A.CMM_CODENAME, A.STANDARDCODE, A.COMPANYID, A.USEFLAG, A.CREATETIME, A.CREATER, A.PARENT_STANDARDCODE, A.PARENT_COMMONCODE)
    VALUES(B.MAX_COMMONCODE, B.CMM_CODENAME, B.STANDARDCODE, B.COMPANYID, B.USEFLAG, B.CREATETIME, B.CREATER, B.PARENT_STANDARDCODE, B.PARENT_COMMONCODE)
WHEN MATCHED THEN
    UPDATE SET
        A.CMM_CODENAME = B.CMM_CODENAME,
        A.USEFLAG = B.USEFLAG,
        A.PARENT_STANDARDCODE = B.PARENT_STANDARDCODE,
        A.PARENT_COMMONCODE = B.PARENT_COMMONCODE,
        A.MODIFYTIME = B.CREATETIME,
        A.MODIFIER = B.CREATER
    
    ]]>
	</sql-query>
	
	<sql-query name="GET_OPERATOR_KPI_MAPP_LIST" description="고객사 KPI 매핑 리스트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_KPI_MAPP_LIST
        
SELECT 
    DECODE(B.USEFLAG, 'Y', 'checked','') CHECKFLAG,        
    A.KPI_NO, A.KPI_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C106', A.KPI_TYPE) KPI_TYPE_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C107', A.MEA_EVL_CYC) MEA_EVL_CYC_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C108', A.EVL_TYPE) EVL_TYPE_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C109', A.EVL_HOW) EVL_HOW_NM,
    FUN_COMMON_CODE(A.COMPANYID, 'C110', A.UNIT) UNIT_NM,
    MEA_EVL_CYC, B.PRIO
FROM TB_KPI A, 
    (
    SELECT *
    FROM TB_KPI_JOBLDR_MAP 
    WHERE COMPANYID = ? AND JOBLDR_NUM = ?
        AND USEFLAG = 'Y'
    )B
WHERE A.COMPANYID = B.COMPANYID(+) AND A.KPI_NO = B.KPI_NO(+)
    AND A.USEFLAG = 'Y'
    AND A.COMPANYID = ?
    AND A.REG_TYPE_CD = '1'
    AND A.KPI_TYPE IS NOT NULL
    AND A.MEA_EVL_CYC IS NOT NULL
    AND A.EVL_HOW IS NOT NULL
ORDER BY CHECKFLAG, PRIO, KPI_NM
    ]]></sql-query>
	
	<sql-query name="GET_OPERATOR_CMPT_MAPP_LIST" description="고객사 역량 매핑 리스트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_CMPT_MAPP_LIST
        
        SELECT 
            FUN_COMMON_CODE(A.COMPANYID, 'C102', CMPGROUP) CMPGROUP_STRING,
            FUN_COMMON_CODE(A.COMPANYID, 'C103', CMPGROUP_S) CMPGROUP_S_STRING,
            A.CMPNAME,
            A.CMPNUMBER,
            ROW_NUMBER() OVER(ORDER BY B.USEFLAG,B.CMPNUMBER ASC)-1 ROWNUMBER,
            DECODE(B.USEFLAG, 'Y', 'checked="1"','') CHECKFLAG        
        FROM TB_CM_COMPETENCY A,
            (
            SELECT CMPNUMBER, COMPANYID, USEFLAG
            FROM TB_CM_JOBLER_CMPT_R
            WHERE USEFLAG = 'Y'
                AND COMPANYID = ?
                AND JOBLDR_NUM = ?
            ) B
        WHERE A.COMPANYID = B.COMPANYID(+) 
            AND A.CMPNUMBER = B.CMPNUMBER(+)
            AND A.USEFLAG = 'Y'
            AND A.COMPANYID = ?
            AND A.DEL_YN = 'N'
            AND A.CMPGROUP NOT IN (
                SELECT COMMONCODE
                FROM TB_BA_COMMONCODE
                WHERE COMPANYID = A.COMPANYID AND STANDARDCODE = 'C102' AND CD_VALUE1 = 'Y'
            )
        ORDER BY ROWNUMBER, CMPGROUP_STRING, B.CMPNUMBER, A.CMPGROUP, A.CMPGROUP_S, A.CMPNUMBER  
        
    ]]></sql-query>
    
    <sql-query name="GET_OPERATOR_CMPT_MAPP_MERGE" description="고객사 역량 매핑 머지"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_CMPT_MAPP_MERGE
        
        MERGE INTO TB_CM_JOBLER_CMPT_R A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? JOBLDR_NUM,
                   	? CMPNUMBER,                    
                    ? USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.CMPNUMBER = B.CMPNUMBER
                  AND A.JOBLDR_NUM = B.JOBLDR_NUM
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            USEFLAG = B.USEFLAG
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, JOBLDR_NUM, CMPNUMBER, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.JOBLDR_NUM, 
        B.CMPNUMBER,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
    
    <sql-query name="OPERATOR_KPI_MAPP_MERGE" description="고객사 KPI 매핑 머지"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : OPERATOR_KPI_MAPP_MERGE

        MERGE INTO TB_KPI_JOBLDR_MAP A
        USING(
            SELECT
            ? COMPANYID,
            ? JOBLDR_NUM,
            ? KPI_NO,
            upper(?) USEFLAG,
            ? CREATER,
            ? PRIO
            FROM DUAL
        )B 
        ON (
              A.COMPANYID = B.COMPANYID
          AND A.KPI_NO = B.KPI_NO
          AND A.JOBLDR_NUM = B.JOBLDR_NUM
        )
        WHEN MATCHED THEN
	        UPDATE        
	        SET 
	            A.PRIO = B.PRIO,
	            A.USEFLAG = B.USEFLAG,
	            A.MODIFYTIME = SYSDATE,
	            A.MODIFIER = B.CREATER
        WHEN NOT MATCHED THEN 
	        INSERT(A.COMPANYID, A.JOBLDR_NUM, A.KPI_NO, A.USEFLAG, A.CREATETIME, A.CREATER, A.PRIO) 
	        VALUES(B.COMPANYID, B.JOBLDR_NUM, B.KPI_NO, B.USEFLAG, SYSDATE, B.CREATER, B.PRIO)
    ]]></sql-query>
    
    <sql-query name="OPERATOR_KPI_MAPP_UPDATE_WEI" description="고객사 KPI 매핑 가중치계산"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : OPERATOR_KPI_MAPP_UPDATE_WEI

BEGIN

MERGE INTO TB_KPI_JOBLDR_MAP A
USING(
    SELECT X.COMPANYID, X.JOBLDR_NUM, X.KPI_NO, MAXMIN-PRIO WEI_COEF
    FROM(
        SELECT KJM.COMPANYID, JOBLDR_NUM, KPI_NO, PRIO
        FROM TB_KPI_JOBLDR_MAP KJM
        WHERE KJM.COMPANYID = ?
            AND JOBLDR_NUM = ?
            AND KJM.USEFLAG = 'Y'
        ) X,
        (
        SELECT KJM.COMPANYID, JOBLDR_NUM, MAX(PRIO) + MIN(PRIO) MAXMIN
        FROM TB_KPI_JOBLDR_MAP KJM
        WHERE KJM.COMPANYID = ?
            AND JOBLDR_NUM = ?
            AND KJM.USEFLAG = 'Y'
        GROUP BY KJM.COMPANYID, KJM.JOBLDR_NUM
        ) Y
    WHERE X.COMPANYID = Y.COMPANYID AND X.JOBLDR_NUM = Y.JOBLDR_NUM
) B
ON (A.COMPANYID = B.COMPANYID AND A.KPI_NO = B.KPI_NO AND A.JOBLDR_NUM = B.JOBLDR_NUM)
WHEN MATCHED THEN
    UPDATE SET
        A.WEI_COEF = B.WEI_COEF;

MERGE INTO TB_KPI_JOBLDR_MAP A
USING(
    SELECT A.COMPANYID, A.JOBLDR_NUM, KPI_NO, 
        CASE WHEN WEI_COEF_SUM = 0 THEN 0
        ELSE ROUND(WEI_COEF/WEI_COEF_SUM, 2) 
        END WEI,
        SUM(ROUND(WEI_COEF/WEI_COEF_SUM, 2)) OVER(PARTITION BY A.JOBLDR_NUM) WEI_SUM
    FROM(
        SELECT KJM.COMPANYID, JOBLDR_NUM, KPI_NO, WEI_COEF
        FROM TB_KPI_JOBLDR_MAP KJM
        WHERE KJM.COMPANYID = ?
            AND JOBLDR_NUM = ?
            AND KJM.USEFLAG = 'Y'
        ) A,
        (
        SELECT KJM.COMPANYID, JOBLDR_NUM, SUM(WEI_COEF) WEI_COEF_SUM
        FROM TB_KPI_JOBLDR_MAP KJM
        WHERE KJM.COMPANYID = ?
            AND JOBLDR_NUM = ?
            AND KJM.USEFLAG = 'Y'
        GROUP BY KJM.COMPANYID, JOBLDR_NUM
        ) B
    WHERE A.COMPANYID = B.COMPANYID AND A.JOBLDR_NUM = B.JOBLDR_NUM 
) B
ON (A.COMPANYID = B.COMPANYID AND A.KPI_NO = B.KPI_NO AND A.JOBLDR_NUM = B.JOBLDR_NUM)
WHEN MATCHED THEN
    UPDATE SET
        A.WEI = B.WEI,
        A.WEI_SUM = B.WEI_SUM;
        
END;
    ]]></sql-query>
    
	<sql-query name="INSERT_SBJCT_CM_MAPPING"
			description="과정 역량매핑 정보 등록"><![CDATA[
			-- INSERT_SBJCT_CM_MAPPING
			
			MERGE INTO TB_CM_SUBJECT_MAP A
	                USING(
	                    SELECT
	                    ? COMPANYID,
	                    ? SUBJECT_NUM,
	                   	? CMPNUMBER,                    
	                    ? USEFLAG
	                    FROM DUAL
	                )B ON (
	                      A.COMPANYID = B.COMPANYID
	                  AND A.CMPNUMBER = B.CMPNUMBER
	                  AND A.SUBJECT_NUM = B.SUBJECT_NUM
	                )
	        WHEN MATCHED THEN
	        UPDATE        
	        SET 
	            USEFLAG = B.USEFLAG
	        WHEN NOT MATCHED THEN 
	        INSERT(COMPANYID, SUBJECT_NUM, CMPNUMBER, USEFLAG) 
	        VALUES(
	        B.COMPANYID, 
	        B.SUBJECT_NUM, 
	        B.CMPNUMBER,
	        B.USEFLAG
	        )
    ]]></sql-query>
    
    	<sql-query name="MERGE_SBJCT_OPEN_DETAIL"
			description="과정 개설 정보 등록"><![CDATA[
			-- MERGE_SBJCT_OPEN_DETAIL
			
MERGE INTO TB_BA_SBJCT_OPEN A
                USING(
                    SELECT
                      ? SUBJECT_NUM,
                      ? YEAR,
                      ? CHASU,
                      ? COMPANYID,
                      ? EDU_STIME,
                      ? EDU_ETIME,
                      'Y' USEFLAG,
                       (SELECT NVL(MAX(TO_NUMBER(CHASU)), 0)+1 FROM TB_BA_SBJCT_OPEN WHERE COMPANYID = ? AND YEAR = ?) MAX_CHASU
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.SUBJECT_NUM = B.SUBJECT_NUM
                  AND A.YEAR = B.YEAR
                  AND A.CHASU = B.CHASU
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            EDU_STIME = B.EDU_STIME,
            EDU_ETIME = B.EDU_ETIME
        WHEN NOT MATCHED THEN 
        INSERT(SUBJECT_NUM, YEAR, CHASU, COMPANYID, EDU_STIME, EDU_ETIME, USEFLAG) 
        VALUES(
        B.SUBJECT_NUM,
        B.YEAR, 
        B.MAX_CHASU, 
        B.COMPANYID,
        B.EDU_STIME,
        B.EDU_ETIME,
        B.USEFLAG
        )
    ]]></sql-query>
    
    <sql-query name="GET_QSTN_POOL_MERGE" description="설문조사 POOL저장"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_POOL_MERGE
        
        MERGE INTO TB_SV_QSTN_POOL A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? QSTN_POOL_NO,                    
                   	? QSTN_TYPE_CD,   
                   	? QSTN,                 
                    ? MODIFIER,
                    'Y' USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.QSTN_POOL_NO = B.QSTN_POOL_NO
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            QSTN_TYPE_CD = B.QSTN_TYPE_CD,
            QSTN = B.QSTN,
            MODIFIER = B.MODIFIER
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, QSTN_POOL_NO, QSTN_TYPE_CD, QSTN, CREATER, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.QSTN_POOL_NO, 
        B.QSTN_TYPE_CD,
        B.QSTN,
        B.MODIFIER,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
        <sql-query name="GET_QSTN_RST_MERGE" description="사용자 설문 저장"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_RST_MERGE
        
        MERGE INTO TB_SV_RST A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? PP_NO,                    
                   	? USERID,   
                   	? QSTN_SEQ,                 
                    ? SV_RST,
                    'Y' USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.PP_NO = B.PP_NO
                  AND A.USERID = B.USERID
                  AND A.QSTN_SEQ = B.QSTN_SEQ
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            SV_RST = B.SV_RST,
            MODIFYTIME = SYSDATE,
            MODIFIER = B.USERID
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, PP_NO, USERID, QSTN_SEQ, SV_RST, CREATER, USEFLAG, CREATETIME) 
        VALUES(
        B.COMPANYID, 
        B.PP_NO, 
        B.USERID,
        B.QSTN_SEQ,
        B.SV_RST,
        B.USERID,
        B.USEFLAG,
        SYSDATE
        )
        
    ]]></sql-query>
    
    <sql-query name="GET_QSTN_MERGE" description="설문조사 저장"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_MERGE
        
        MERGE INTO TB_SV_QSTN A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? PP_NO,
                    ? QSTN_SEQ,                    
                   	? QSTN_TYPE_CD,   
                   	? QSTN,                 
                    ? MODIFIER,
                    'Y' USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.QSTN_SEQ = B.QSTN_SEQ
                  AND A.PP_NO = B.PP_NO
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            QSTN_TYPE_CD = B.QSTN_TYPE_CD,
            QSTN = B.QSTN,
            MODIFIER = B.MODIFIER
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, PP_NO, QSTN_SEQ, QSTN_TYPE_CD, QSTN, CREATER, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.PP_NO,
        B.QSTN_SEQ, 
        B.QSTN_TYPE_CD,
        B.QSTN,
        B.MODIFIER,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
    
    <sql-query name="GET_QSTN_RST_UPDATE" description="사용자 설문 완료여부 저장"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_RST_UPDATE
        
        UPDATE TB_SV_TARG 
	    SET CMPT_FLAG = 'Y' , MODIFYTIME = SYSDATE, AGE = ?, GD = ?
	    WHERE COMPANYID = ?
	    AND PP_NO = ?
	    AND USERID = ?
        
    ]]></sql-query>
    
    
    
    <sql-query name="GET_SERV_USER_MERGE" description="설문 대상자 저장"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_MERGE
        
        MERGE INTO TB_SV_TARG A
                USING(
                    SELECT
                    ? USERID,
                    ? PP_NO,
                    ? COMPANYID,                    
                   	? MODIFIER, 
                    'Y' USEFLAG
                    FROM DUAL
                )B ON (
                      A.USERID = B.USERID
                  AND A.PP_NO = B.PP_NO
                  AND A.COMPANYID = B.COMPANYID
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            MODIFIER = B.MODIFIER,
            USEFLAG = B.USEFLAG
        WHEN NOT MATCHED THEN 
        INSERT(USERID, PP_NO, COMPANYID, USEFLAG, CREATER) 
        VALUES(
        B.USERID, 
        B.PP_NO,
        B.COMPANYID, 
        B.USEFLAG,
        B.MODIFIER
        )
        
    ]]></sql-query>
    
    <sql-query name="GET_SERV_PP_MERGE" description="설문관리 ALL 저장"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_SERV_PP_MERGE
        
       MERGE INTO TB_SV_PP A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? PP_NO,                    
                    ? PP_NM,   
                    ? PP_PURP, 
                    ? PP_ST,
                    ? PP_ED,                
                    ? MODIFIER,
                    ? USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  	AND A.PP_NO = B.PP_NO
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            PP_NM = B.PP_NM,
            PP_PURP = B.PP_PURP,
            PP_ST = B.PP_ST,
            PP_ED = B.PP_ED,
            MODIFIER = B.MODIFIER,
            USEFLAG = B.USEFLAG,
            MODIFYTIME = SYSDATE
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, PP_NO, PP_NM, PP_PURP, PP_ST, PP_ED, CREATER, USEFLAG, CREATETIME) 
        VALUES(
        B.COMPANYID, 
        B.PP_NO, 
        B.PP_NM,
        B.PP_PURP,
        B.PP_ST,
        B.PP_ED,
        B.MODIFIER,
        B.USEFLAG,
        SYSDATE
        )
        
    ]]></sql-query>
    
    
    <sql-query name="GET_QSTN_POOL_UPDATE" description="설문조사 POOL 삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_POOL_UPDATE
        
        UPDATE TB_SV_QSTN_POOL 
        SET USEFLAG = 'N',
            MODIFIER = ?,
            MODIFYTIME = SYSDATE
        WHERE COMPANYID = ?
        AND QSTN_POOL_NO = ?
        
    ]]></sql-query>
    
        <sql-query name="GET_QSTN_UPDATE" description="설문문항 삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_UPDATE
        
        UPDATE TB_SV_QSTN 
        SET USEFLAG = 'N',
            MODIFIER = ?,
            MODIFYTIME = SYSDATE
        WHERE PP_NO = ? 
        AND COMPANYID = ?
        AND QSTN_SEQ = ?
        
    ]]></sql-query>
    
     <sql-query name="GET_SERV_PP_UPDATE" description="설문지 삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_UPDATE
        
        UPDATE TB_SV_PP  
        SET USEFLAG = 'N',
            MODIFIER = ?,
            MODIFYTIME = SYSDATE
        WHERE PP_NO = ? 
        AND COMPANYID = ?
        
    ]]></sql-query>
    
      <sql-query name="GET_QSTN_USER_UPDATE" description="설문 대상자 관리 삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_QSTN_USER_UPDATE
        
        UPDATE TB_SV_TARG 
        SET USEFLAG = 'N',
            MODIFIER = ?,
            MODIFYTIME = SYSDATE
        WHERE PP_NO = ? 
        AND COMPANYID = ?
        AND USERID = ?
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_TARGET_MERGE" description="평가대상자"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_TARGET_MERGE
        
        MERGE INTO TB_CAM_RUNTARGET_I A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? RUN_NUM,                    
                   	? USERID,   
                   	? DIVISION,                 
                    ? JOB,
                    ? LEADERSHIP,
                    ? MODIFIER,
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.RUN_NUM = B.RUN_NUM
                  AND A.USERID = B.USERID
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            USEFLAG = B.USEFLAG,
            MODIFIER = B.MODIFIER
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, RUN_NUM, USERID, DIVISION, JOB, LEADERSHIP, USEFLAG, CREATER) 
        VALUES(
        B.COMPANYID, 
        B.RUN_NUM, 
        B.USERID,
        B.DIVISION,
        B.JOB,
        B.LEADERSHIP,
        B.USEFLAG,
        B.MODIFIER
        )
        
    ]]></sql-query>
    
     <sql-query name="GET_CMPT_DIRECTION_SELF_MERGE" description="평가방향설정(자가)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_SELF_MERGE
        
        MERGE INTO TB_CAM_RUNDIRECTION_I A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? RUN_NUM,                    
                   	? USERID,   
                   	? USERID_EXED,                 
                    9 RUNDIRECTION_CD,	
                    ? MODIFIER,
                    ? WEIGHT,
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.RUN_NUM = B.RUN_NUM
                  AND A.USERID_EXED = B.USERID_EXED
                  AND A.RUNDIRECTION_CD = B.RUNDIRECTION_CD
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
        	WEIGHT = B.WEIGHT,
            USEFLAG = B.USEFLAG,
            MODIFIER = B.MODIFIER,
            USERID = B.USERID            
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, RUN_NUM, USERID, USERID_EXED, RUNDIRECTION_CD, MODIFIER, WEIGHT, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.RUN_NUM, 
        B.USERID,
        B.USERID_EXED,
        B.RUNDIRECTION_CD,
        B.MODIFIER,
        B.WEIGHT,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_USER_INIT" description="개인 평가방향설정 초기화"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_USER_INIT
        
           UPDATE TB_CAM_RUNDIRECTION_I
    SET USEFLAG = 'N', MODIFIER = ?, WEIGHT = '' , MODIFYTIME = SYSDATE
    WHERE COMPANYID = ?
    AND RUN_NUM = ?
    AND USERID_EXED = ?
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_COL_DEL" description="평가방향설정(동료)삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_COL_DEL
        
           UPDATE TB_CAM_RUNDIRECTION_I
    SET USEFLAG = 'N', MODIFIER = ?, WEIGHT = '' 
    WHERE COMPANYID = ?
    AND RUN_NUM = ?
    AND RUNDIRECTION_CD = 3
    AND USERID_EXED = ?
        
    ]]></sql-query>
    
     <sql-query name="GET_CMPT_DIRECTION_SUB_DEL" description="평가방향설정(부하)삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_COL_DEL
        
           UPDATE TB_CAM_RUNDIRECTION_I
    SET USEFLAG = 'N', MODIFIER = ?, WEIGHT = ''
    WHERE COMPANYID = ?
    AND RUN_NUM = ?
    AND RUNDIRECTION_CD = 4
    AND USERID_EXED = ?
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_COL_MERGE" description="평가방향설정(동료)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_COL_MERGE
        
        MERGE INTO TB_CAM_RUNDIRECTION_I A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? RUN_NUM,                    
                   	? USERID,   
                   	? USERID_EXED,                 
                    3 RUNDIRECTION_CD,
                    ? MODIFIER,
                    ? WEIGHT,
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.RUN_NUM = B.RUN_NUM
                  AND A.USERID_EXED = B.USERID_EXED
                  AND A.USERID = B.USERID
                )
        WHEN MATCHED THEN
        UPDATE        
        SET
        	WEIGHT = B.WEIGHT,
            USEFLAG = B.USEFLAG,
            MODIFIER = B.MODIFIER,   
            RUNDIRECTION_CD = B.RUNDIRECTION_CD     
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, RUN_NUM, USERID, USERID_EXED, RUNDIRECTION_CD, MODIFIER, WEIGHT, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.RUN_NUM, 
        B.USERID,
        B.USERID_EXED,
        B.RUNDIRECTION_CD,
        B.MODIFIER,
        B.WEIGHT,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
        <sql-query name="GET_CMPT_DIRECTION_SUB_MERGE" description="평가방향설정(부하)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_SUB_MERGE
        
        MERGE INTO TB_CAM_RUNDIRECTION_I A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? RUN_NUM,                    
                   	? USERID,   
                   	? USERID_EXED,                 
                    4 RUNDIRECTION_CD,
                    ? MODIFIER,
                    ? WEIGHT,
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.RUN_NUM = B.RUN_NUM
                  AND A.USERID_EXED = B.USERID_EXED
                  AND A.USERID = B.USERID
                )
        WHEN MATCHED THEN
        UPDATE        
        SET
        	WEIGHT = B.WEIGHT,
            USEFLAG = B.USEFLAG,
            MODIFIER = B.MODIFIER,
            RUNDIRECTION_CD = B.RUNDIRECTION_CD          
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, RUN_NUM, USERID, USERID_EXED, RUNDIRECTION_CD, MODIFIER, WEIGHT, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.RUN_NUM, 
        B.USERID,
        B.USERID_EXED,
        B.RUNDIRECTION_CD,
        B.MODIFIER,
        B.WEIGHT,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
    
     <sql-query name="GET_CMPT_DIRECTION_ONE_MERGE" description="평가방향설정(1차)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_ONE_MERGE
        
        MERGE INTO TB_CAM_RUNDIRECTION_I A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? RUN_NUM,                    
                   	? USERID,   
                   	? USERID_EXED,                 
                    1 RUNDIRECTION_CD,
                    ? MODIFIER,
                    ? WEIGHT,
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.RUN_NUM = B.RUN_NUM
                  AND A.USERID_EXED = B.USERID_EXED
                  AND A.USERID = B.USERID
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
        	WEIGHT = B.WEIGHT,
            USEFLAG = B.USEFLAG,
            MODIFIER = B.MODIFIER,
            RUNDIRECTION_CD = B.RUNDIRECTION_CD        
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, RUN_NUM, USERID, USERID_EXED, RUNDIRECTION_CD, MODIFIER, WEIGHT, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.RUN_NUM, 
        B.USERID,
        B.USERID_EXED,
        B.RUNDIRECTION_CD,
        B.MODIFIER,
        B.WEIGHT,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_TWO_MERGE" description="평가방향설정(2차)"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_TWO_MERGE
        
        MERGE INTO TB_CAM_RUNDIRECTION_I A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? RUN_NUM,                    
                   	? USERID,   
                   	? USERID_EXED,                 
                    2 RUNDIRECTION_CD,
                    ? MODIFIER,
                    ? WEIGHT,
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.RUN_NUM = B.RUN_NUM
                  AND A.USERID_EXED = B.USERID_EXED
                  AND A.USERID = B.USERID
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
        	WEIGHT = B.WEIGHT,
            USEFLAG = B.USEFLAG,
            MODIFIER = B.MODIFIER,
            RUNDIRECTION_CD = B.RUNDIRECTION_CD       
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, RUN_NUM, USERID, USERID_EXED, RUNDIRECTION_CD, MODIFIER, WEIGHT, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.RUN_NUM, 
        B.USERID,
        B.USERID_EXED,
        B.RUNDIRECTION_CD,
        B.MODIFIER,
        B.WEIGHT,
        B.USEFLAG
        )
        
    ]]></sql-query>    
    
    <sql-query name="OPERATOR_KPI_MAPP_UPDATE" description="고객사 kpi 업데이트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : OPERATOR_KPI_MAPP_UPDATE
        
        UPDATE TB_KPI_JOBLDR_MAP
        SET USEFLAG = ?
        WHERE COMPANYID = ?
        AND JOBLDR_NUM = ?
        
    ]]></sql-query>
    
    <sql-query name="GET_OPERATOR_CMPT_MAPP_UPDATE" description="고객사 역량 업데이트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_OPERATOR_CMPT_MAPP_UPDATE
        
        UPDATE TB_CM_JOBLER_CMPT_R
        SET USEFLAG = ?
        WHERE COMPANYID = ?
        AND JOBLDR_NUM = ?
        AND CMPNUMBER = ?
        
    ]]></sql-query>
    
        <sql-query name="UPDATE_SBJCT_CM_MAPPING" description="과정매핑 업데이트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : UPDATE_SBJCT_CM_MAPPING

    
        UPDATE TB_CM_SUBJECT_MAP
        SET USEFLAG = ?
        WHERE SUBJECT_NUM= ?
        AND SUBJECT_NUM = ?
        AND CMPNUMBER = ?

        
    ]]></sql-query>
    
       
    
    
    <sql-query name="UP_SBJCT_OPEN" description="과정상세 머지"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : INSERT_SBJCT_OPEN

       	MERGE INTO TB_BA_SBJCT A
                USING(
                    SELECT
                      ? SUBJECT_NAME,
                      ? TRAINING_CODE,
                      ? INSTITUTE_NAME,
                      ? EDU_TARGET,
                      ? EDU_OBJECT,
                      ? COURSE_CONTENTS,
                      ? COMPANYID,
                      ? SUBJECT_NUM,
                      (SELECT NVL(MAX(to_number(SUBJECT_NUM)), 0)+1 FROM TB_BA_SBJCT WHERE COMPANYID = ?) MAX_SUBJECT_NUM,
                      UPPER(?) USEFLAG,
                      ? SAMPLE_URL
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.SUBJECT_NUM = B.SUBJECT_NUM
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            SUBJECT_NAME = B.SUBJECT_NAME,
            TRAINING_CODE = B.TRAINING_CODE,
            INSTITUTE_NAME = B.INSTITUTE_NAME,
            USEFLAG = B.USEFLAG,
            EDU_TARGET = B.EDU_TARGET,
            EDU_OBJECT = B.EDU_OBJECT,
            COURSE_CONTENTS = B.COURSE_CONTENTS,
            SAMPLE_URL = B.SAMPLE_URL
        WHEN NOT MATCHED THEN 
        INSERT(SUBJECT_NUM, SUBJECT_NAME, TRAINING_CODE, INSTITUTE_NAME, EDU_TARGET, EDU_OBJECT, COURSE_CONTENTS ,COMPANYID, USEFLAG, SAMPLE_URL) 
        VALUES(
        B.MAX_SUBJECT_NUM,
        B.SUBJECT_NAME, 
        B.TRAINING_CODE, 
        B.INSTITUTE_NAME,
        B.EDU_TARGET,
        B.EDU_OBJECT,
        B.COURSE_CONTENTS,
        B.COMPANYID,
        B.USEFLAG,
        B.SAMPLE_URL
        )
    ]]></sql-query>
    
        <sql-query name="UP_SBJCT_OPEN_DETAIL" description="과정 개설 차수 업로드"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : UP_SBJCT_OPEN_DETAIL

       	MERGE INTO TB_BA_SBJCT_OPEN A
                USING(
                    SELECT
                      ? SUBJECT_NUM,
                      ? YEAR,
                      ? CHASU,
                      ? COMPANYID,
                      ? EDU_STIME,
                      ? EDU_ETIME,
                      'Y' USEFLAG,
                       (SELECT NVL(MAX(TO_NUMBER(CHASU)), 0)+1 FROM TB_BA_SBJCT_OPEN WHERE COMPANYID = ? AND YEAR = ?) MAX_CHASU
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.SUBJECT_NUM = B.SUBJECT_NUM
                  AND A.YEAR = B.YEAR
                  AND A.CHASU = B.CHASU
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            EDU_STIME = B.EDU_STIME,
            EDU_ETIME = B.EDU_ETIME
        WHEN NOT MATCHED THEN 
        INSERT(SUBJECT_NUM, YEAR, CHASU, COMPANYID, EDU_STIME, EDU_ETIME, USEFLAG) 
        VALUES(
        B.SUBJECT_NUM,
        B.YEAR, 
        B.MAX_CHASU, 
        B.COMPANYID,
        B.EDU_STIME,
        B.EDU_ETIME,
        B.USEFLAG
        )
    ]]></sql-query>
    
    
     <sql-query name="UP_SBJCT_MAPP" description="고객사 역량 매핑 머지"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : UP_SBJCT_MAPP
        
        MERGE INTO TB_CM_SUBJECT_MAP A
                USING(
                    SELECT
                    ? COMPANYID,
                    ? SUBJECT_NUM,
                   	? CMPNUMBER,                    
                    UPPER(?) USEFLAG
                    FROM DUAL
                )B ON (
                      A.COMPANYID = B.COMPANYID
                  AND A.CMPNUMBER = B.CMPNUMBER
                  AND A.SUBJECT_NUM = B.SUBJECT_NUM
                )
        WHEN MATCHED THEN
        UPDATE        
        SET 
            USEFLAG = B.USEFLAG
        WHEN NOT MATCHED THEN 
        INSERT(COMPANYID, SUBJECT_NUM, CMPNUMBER, USEFLAG) 
        VALUES(
        B.COMPANYID, 
        B.SUBJECT_NUM, 
        B.CMPNUMBER,
        B.USEFLAG
        )
        
    ]]></sql-query>
    
           <sql-query name="INSERT_SBJCT_DETAIL" description="과정상세 새로추가"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : INSERT_SBJCT_DETAIL

       INSERT INTO TB_BA_SBJCT (SUBJECT_NUM, SUBJECT_NAME, TRAINING_CODE, INSTITUTE_NAME, EDU_TARGET, EDU_OBJECT, COURSE_CONTENTS, COMPANYID, USEFLAG, SAMPLE_URL) 
        VALUES(
        (SELECT NVL(MAX(to_number(SUBJECT_NUM)), 0)+1 FROM TB_BA_SBJCT WHERE COMPANYID = ?),
        ?, 
        ?, 
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
        )
        
    ]]></sql-query>
    
      <sql-query name="DEL_SBJCT_OPEN" description="과정차수 삭제"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : INSERT_SBJCT_DETAIL

           UPDATE TB_BA_SBJCT_OPEN
		    SET USEFLAG = 'N'
		    WHERE SUBJECT_NUM = ?
		    AND YEAR = ?
		    AND CHASU = ?
		    AND COMPANYID = ?
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_TARGET_UPDATE" description="대상자 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_TARGET_UPDATE
        
        UPDATE TB_CAM_RUNTARGET_I
        SET USEFLAG = ?,
            CREATETIME = NULL,
            CREATER = NULL,
        	MODIFIER = ?,
            MODIFYTIME = NULL
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        
    ]]></sql-query>
    
    
    <sql-query name="GET_CMPT_TARGET_INIT" description="대상자 초기화"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_TARGET_INIT
        
        UPDATE TB_CAM_RUNTARGET_I
        SET USEFLAG = ?,
            CREATETIME = NULL,
            CREATER = NULL,
            MODIFYTIME = NULL,
            MODIFIER = ?
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID = ?
        
    ]]></sql-query>
    
    
    <sql-query name="GET_CMPT_DIRECTION_INIT" description="대상자의 방향별 설정정보 초기화"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_INIT
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
            MODIFIER = ?
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID_EXED = ?
    ]]></sql-query>
    
        <sql-query name="GET_CMPT_DIRECTION_UPDATE" description="평가방향설정 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_UPDATE
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
            MODIFIER = ?,
            MODIFYTIME = SYSDATE
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_SELF_UPDATE" description="대상자 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_SELF_UPDATE
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
        	MODIFIER = ?
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID = ?
        AND USERID_EXED = ?
        AND RUNDIRECTION_CD = 9
        
    ]]></sql-query>
    
        <sql-query name="GET_CMPT_DIRECTION_COL_UPDATE" description="대상자 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_COL_UPDATE
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
        	MODIFIER = ?,
        	WEIGHT = ''
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID_EXED = ?
        AND RUNDIRECTION_CD = 3
 
        
    ]]></sql-query>
    
            <sql-query name="GET_CMPT_DIRECTION_SUB_UPDATE" description="대상자 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_COL_UPDATE
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
        	MODIFIER = ?,
        	WEIGHT = ''
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID_EXED = ?
        AND RUNDIRECTION_CD = 4
 
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_ONE_UPDATE" description="대상자 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_ONE_UPDATE
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
        	MODIFIER = ?
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID = ?
        AND USERID_EXED = ?
        AND RUNDIRECTION_CD = 1
        
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIRECTION_TWO_UPDATE" description="대상자 관리"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_DIRECTION_TWO_UPDATE
        
        UPDATE TB_CAM_RUNDIRECTION_I
        SET USEFLAG = ?,
        	MODIFIER = ?
        WHERE COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID = ?
        AND USERID_EXED = ?
        AND RUNDIRECTION_CD = 2
        
      ]]></sql-query>
    
    <!-- ================================================= -->
    <!-- cnp project E..... -->
    <!-- ================================================= -->
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <sql-query name="GET_MAIL_INFO"
		description="메일정보 가져오기" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_MAIL_INFO
		--commnet : 메일정보 가져오기
		
		 SELECT 
		   MAX(DECODE(METACODE,'1', CD_VALUE1,'')) FROM_NAME
		 , MAX(DECODE(METACODE,'2', CD_VALUE1,'')) FROM_EMAIL
		 , MAX(B.EMAIL) TO_EMAIL
		 , MAX(B.NAME) TO_NAME
		FROM TB_BA_METACODE A, TB_BA_USER B
		WHERE A.COMPANYID = ?
		AND STANDARDMETA = 'BA02'
		AND METACODE IN ('1','2')
		AND B.COMPANYID = ?
		AND B.USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="MERGE_CLASS"
		description="수강신청" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : MERGE_CLASS
		--commnet : 수강신청
		
		 MERGE INTO TB_BA_CLASS A
		        USING(
		            SELECT C.USERID, B.SUBJECT_NUM, B.YEAR, B.CHASU, C.CURRENT_CLASS, C.DIVISIONID, D.DVS_NAME, ? CMPNUMBER, '2' ATTEND_STATE_CODE, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') APPLY_DATE,
		               B.EDU_STIME, B.EDU_ETIME, B.CANCEL_STIME, B.CANCEL_ETIME, B.REEDU_STIME, B.REEDU_ETIME, ? COUPON_FLAG , SYSDATE CREATETIME, 'PODO' CREATER, 'N' SYNC_YN
		            FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B, TB_BA_USER C, TB_BA_DIVISION D
		            WHERE A.SUBJECT_NUM = B.SUBJECT_NUM
		            AND   C.DIVISIONID = D.DIVISIONID
		            AND   B.CP_SUBJECT_NUM = ?
		            AND   B.YEAR = ?
		            AND   B.CHASU = ?
		            AND   C.COMPANYID = ?
		            AND   C.USERID = ?
		        ) B ON (
		                A.USERID = B.USERID
		            AND A.SUBJECT_NUM = B.SUBJECT_NUM
		            AND A.YEAR = B.YEAR
		            AND A.CHASU = B.CHASU
		        )
		   WHEN NOT MATCHED THEN
		   INSERT (USERID, SUBJECT_NUM, YEAR, CHASU, CURRENT_CLASS, DEPARTMENT, DVS_NAME, CMPNUMBER, ATTEND_STATE_CODE, APPLY_TIME,
		           EDU_STIME, EDU_ETIME, CANCEL_STIME, CANCEL_ETIME, REEDU_STIME, REEDU_ETIME, COUPON_FLAG, CREATETIME, CREATER, SYNC_YN)
		   VALUES(B.USERID, B.SUBJECT_NUM, B.YEAR, B.CHASU, B.CURRENT_CLASS, B.DIVISIONID, B.DVS_NAME, B.CMPNUMBER, B.ATTEND_STATE_CODE, B.APPLY_DATE,
		          B.EDU_STIME, B.EDU_ETIME, B.CANCEL_STIME, B.CANCEL_ETIME, B.REEDU_STIME, B.REEDU_ETIME, B.COUPON_FLAG, B.CREATETIME, B.CREATER, B.SYNC_YN)
		   WHEN MATCHED THEN
		   UPDATE
		   SET ATTEND_STATE_CODE = '2'
		
    ]]></sql-query>
    
    <sql-query name="GET_CP_SUBJECT_NUM"
		description="CP 과정번호 추출" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CP_SUBJECT_NUM
		--commnet : CP 과정번호 추출
		
		SELECT CP_SUBJECT_NUM FROM TB_BA_SBJCT WHERE SUBJECT_NUM = ?
		
    ]]></sql-query>
    
    <sql-query name="UDPATE_CLASS"
		description="수강정보 수강으로 업데이트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UDPATE_CLASS
		--commnet : 수강정보 수강으로 업데이트
		
		UPDATE TB_BA_CLASS
		SET ATTEND_STATE_CODE = ?
		WHERE USERID = ?
		AND   SUBJECT_NUM = ?
		AND   YEAR = ?
		AND   CHASU = ?
		
    ]]></sql-query>
    
    <sql-query name="INSERT_CLASS"
		description="수강신청" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_CLASS
		--commnet : 수강신청
		
		INSERT INTO TB_BA_CLASS(USERID, SUBJECT_NUM, YEAR, CHASU, CURRENT_CLASS, DEPARTMENT, DVS_NAME, CMPNUMBER, ATTEND_STATE_CODE, APPLY_TIME,
		                        EDU_STIME, EDU_ETIME, CANCEL_STIME, CANCEL_ETIME, REEDU_STIME, REEDU_ETIME, COUPON_FLAG, CREATETIME, CREATER, SYNC_YN)
		SELECT C.USERID, B.SUBJECT_NUM, B.YEAR, B.CHASU, C.CURRENT_CLASS, C.DIVISIONID, D.DVS_NAME, ? CMPNUMBER, '2' ATTEND_STATE_CODE, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') APPLY_DATE,
		       B.EDU_STIME, B.EDU_ETIME, B.CANCEL_STIME, B.CANCEL_ETIME, B.REEDU_STIME, B.REEDU_ETIME, ? , SYSDATE, ? , 'N'
		FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B, TB_BA_USER C, TB_BA_DIVISION D
		WHERE A.SUBJECT_NUM = B.SUBJECT_NUM
		AND   C.DIVISIONID = D.DIVISIONID
		AND   B.SUBJECT_NUM = ?
		AND   B.YEAR = ?
		AND   B.CHASU = ?
		AND   C.COMPANYID = ?
		AND   C.USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_COUPON_COUNT"
		description="쿠폰 개수" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_COUPON_COUNT
		--commnet : 쿠폰 개수
		
		SELECT COUPON FROM TB_BA_USER WHERE COMPANYID = ? AND USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="INSERT_DAOPAY_ORIGINAL_INFO"
		description="다우결제 정보" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_DAOPAY_INFO
		--commnet : 다우결제 정보
		
		MERGE INTO TB_BA_DAOPAY_INFO A
			        USING(
			            SELECT 
			                ? USERID,
			                ? YEAR,
			                ? CHASU,
			                ? SUBJECT_NUM,
			                ? AMOUNT,
			                ? PAYMETHOD,
			                ? CPID,
			                ? DAOUTRX,
			                ? ORDERNO,
			                ? SETDATE,
			                SYSDATE MODIFYTIME
			            FROM DUAL
			        )B ON(
			            A.USERID = B.USERID
			            AND  A.SUBJECT_NUM = B.SUBJECT_NUM
			            AND  A.YEAR = B.YEAR
			            AND  A.CHASU = B.CHASU
			        )
			WHEN MATCHED THEN
			UPDATE
			SET A.AMOUNT = B.AMOUNT,
			    A.PAYMETHOD = B.PAYMETHOD,
			    A.CPID = B.CPID,
			    A.DAOUTRX = B.DAOUTRX,
			    A.ORDERNO = B.ORDERNO,
			    A.SETDATE = B.SETDATE,
			    A.MODIFYTIME = B.MODIFYTIME
			WHEN NOT MATCHED THEN
			INSERT(USERID, YEAR, CHASU, SUBJECT_NUM, AMOUNT, PAYMETHOD, CPID, DAOUTRX, ORDERNO, SETDATE, CREATETIME)
			VALUES(B.USERID, B.YEAR, B.CHASU, B.SUBJECT_NUM, B.AMOUNT, B.PAYMETHOD, B.CPID, B.DAOUTRX, B.ORDERNO, B.SETDATE, B.MODIFYTIME)
		
    ]]></sql-query>
    
    <sql-query name="INSERT_DAOPAY_INFO"
		description="다우결제 정보" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_DAOPAY_INFO
		--commnet : 다우결제 정보
		
		MERGE INTO TB_BA_DAOPAY_INFO A
			        USING(
			            SELECT 
			                ? USERID,
			                ? YEAR,
			                ? CHASU,
			                ? SUBJECT_NUM,
			                ? AMOUNT,
			                ? PAYMETHOD,
			                ? CPID,
			                ? DAOUTRX,
			                ? ORDERNO,
			                ? SETDATE,
			                ? BANKCODE,
			                ? BANKNAME,
			                ? ACCOUNTNO,
			                ? DEPOSITENDDATE,
			                ? RECEIVERNAME,
			                SYSDATE MODIFYTIME
			            FROM DUAL
			        )B ON(
			            A.USERID = B.USERID
			            AND  A.SUBJECT_NUM = B.SUBJECT_NUM
			            AND  A.YEAR = B.YEAR
			            AND  A.CHASU = B.CHASU
			        )
			WHEN MATCHED THEN
			UPDATE
			SET A.AMOUNT = B.AMOUNT,
			    A.PAYMETHOD = B.PAYMETHOD,
			    A.CPID = B.CPID,
			    A.DAOUTRX = B.DAOUTRX,
			    A.ORDERNO = B.ORDERNO,
			    A.SETDATE = B.SETDATE,
			    A.BANKCODE = B.BANKCODE,
			    A.BANKNAME = B.BANKNAME,
			    A.ACCOUNTNO = B.ACCOUNTNO,
			    A.DEPOSITENDDATE = B.DEPOSITENDDATE,
			    A.RECEIVERNAME = B.RECEIVERNAME,
			    A.MODIFYTIME = B.MODIFYTIME
			WHEN NOT MATCHED THEN
			INSERT(USERID, YEAR, CHASU, SUBJECT_NUM, AMOUNT, PAYMETHOD, CPID, DAOUTRX, ORDERNO, SETDATE, 
						BANKCODE, BANKNAME, ACCOUNTNO, DEPOSITENDDATE, RECEIVERNAME, CREATETIME)
			VALUES(B.USERID, B.YEAR, B.CHASU, B.SUBJECT_NUM, B.AMOUNT, B.PAYMETHOD, B.CPID, B.DAOUTRX, B.ORDERNO, B.SETDATE, 
						B.BANKCODE, B.BANKNAME, B.ACCOUNTNO, B.DEPOSITENDDATE, B.RECEIVERNAME, B.MODIFYTIME)
		
    ]]></sql-query>
    
    <sql-query name="GET_USERID"
		description="사용자 USERID 추출" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_USERID
		--commnet : 사용자 USERID 추출
		
		SELECT USERID FROM TB_BA_USER WHERE COMPANYID = ? AND ID = ?
		
    ]]></sql-query>
    
    <sql-query name="DAINPAY_MODULE_INFO"
		description="다우결제 모듈 정보" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DAINPAY_MODULE_INFO
		--commnet : 다우결제 모듈 정보
		
		SELECT ? "sKey", ? "sID", ? "compCd", ? "courseCd", ? "courseSq", ? "eduYear", name "name", email "email",
                   CELLPHONE "hp", ADDRESS1||' '|| ADDRESS2 "addr", 
                   (SELECT EDU_COST FROM TB_BA_SBJCT_OPEN WHERE SUBJECT_NUM = ? AND YEAR = ? AND CHASU = ?) "costAmt",
                   'http://iccu.daincampus.com/daoupay/IccuDaouPaymentRun.jsp' URL,
                   ? "cmpnumber"
            FROM TB_BA_USER A
            WHERE A.COMPANYID = ?
            AND   A.USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_USER_ID"
		description="사용자 ID 추출" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_USER_ID
		--commnet : 사용자 ID 추출
		
		SELECT ID
        FROM TB_BA_USER 
        WHERE COMPANYID = ? 
        AND USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="RECOMMEND_ACTIVITY_LIST"
		description="추천 활동 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : RECOMMEND_ACTIVITY_LIST
		--commnet : 추천 활동 리스트
		
		SELECT CMPNAME, A.BOARD_TITLE, DECODE(A.BOARD_CODE, 7, '대내', '대외') ACT_DIVISION,
		       CASE WHEN ACT_SDATE IS NULL THEN ''
		       ELSE TO_CHAR(TO_DATE(ACT_SDATE, 'YYYYMMDD'),'YY.MM.DD')||' ~ '||TO_CHAR(TO_DATE(ACT_EDATE, 'YYYYMMDD'),'YY.MM.DD')
		       END ACT_DATE, A.BOARD_CODE, A.BOARD_NUM
		FROM TB_BRD_BOARD A, TB_BRD_CMPT_MAP B, TB_CM_COMPETENCY C
		WHERE A.BOARD_CODE = B.BOARD_CODE(+)
		AND   A.BOARD_NUM = B.BOARD_NUM(+)
		AND   B.CMPNUMBER = C.CMPNUMBER(+)
		AND   B.COMPANYID = ?
		AND   A.BOARD_CODE IN (7, 8)
		AND   TO_CHAR(SYSDATE, 'YYYYMMDD') < ACT_SDATE
		
    ]]></sql-query>
    
    <sql-query name="CMPT_STATISTICS_DIVISION_LIST"
		description="학과평균  리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : CMPT_STATISTICS_DIVISION_LIST
		--commnet : 학과평균  리스트
		
		    WITH ORIGIN_QUERY AS (
		    SELECT
		        A.*, B.CMPNAME,
		        ROUND((SCORE1 + SCORE2 + SCORE3 + SCORE4 + SCORE5 + SCORE6 + SCORE7 + SCORE8 + SCORE9 + SCORE10)/
		        (SELECT COUNT(*) FROM (SELECT DISTINCT DIVISION 
				FROM TB_CAM_RUNTARGET_I A, TB_CAM_RUNDIRECTION_I B, TB_CAR_INDC_SCORE C
				WHERE A.COMPANYID = B.COMPANYID 
				AND A.RUN_NUM = B.RUN_NUM 
				AND A.USERID = B.USERID
				AND B.COMPANYID = C.COMPANYID
				AND B.RUN_NUM = C.RUN_NUM
				AND B.USERID = C.USERID_EX
				AND A.COMPANYID = ?
				AND A.RUN_NUM = ? AND DIVISION IS NOT NULL))) AVERAGE, B.BSNS_REQR_LEVEL
		        FROM
		        (
		            SELECT
		            CMPNUMBER,
		            COMPANYID,
		            SUM(SCORE1) SCORE1,
		            SUM(SCORE2) SCORE2,
		            SUM(SCORE3) SCORE3,
		            SUM(SCORE4) SCORE4,
		            SUM(SCORE5) SCORE5,
		            SUM(SCORE6) SCORE6,
		            SUM(SCORE7) SCORE7,
		            SUM(SCORE8) SCORE8,
		            SUM(SCORE9) SCORE9,
		            SUM(SCORE10) SCORE10 
		            FROM
		            (
		            SELECT 
		            B.CMPNUMBER, 
		            A.COMPANYID,
		            DIVISION, 
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 1), SCORE, 0)))SCORE1,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 2), SCORE, 0)))SCORE2,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 3), SCORE, 0)))SCORE3,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 4), SCORE, 0)))SCORE4,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM =5), SCORE, 0)))SCORE5,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 6), SCORE, 0)))SCORE6,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 7), SCORE, 0)))SCORE7,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 8), SCORE, 0)))SCORE8,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 9), SCORE, 0)))SCORE9,
		            ROUND(AVG(DECODE(DIVISION, 
		                    (SELECT DIVISIONID
		                    FROM
		                    (
		                        SELECT ROW_NUMBER() OVER (ORDER BY DIVISIONID ASC) RNUM,  
		                                DIVISIONID 
		                        FROM TB_BA_DIVISION WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
		                    )WHERE RNUM = 10), SCORE, 0)))SCORE10
		            FROM   TB_CAM_RUNTARGET_I A, TB_CAR_INDC_SCORE B
		            WHERE A.COMPANYID = B.COMPANYID
		            AND   A.RUN_NUM = B.RUN_NUM
		            AND   A.USERID = B.USERID_EX
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   B.EXAMPLE_NUM IS NOT NULL
		            GROUP BY B.CMPNUMBER, A.COMPANYID, A.DIVISION
		            )GROUP BY COMPANYID, CMPNUMBER
		        ) A, TB_CM_COMPETENCY B
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND      A.COMPANYID = B.COMPANYID
		        ORDER BY A.CMPNUMBER ASC
		        )
		        SELECT * FROM ORIGIN_QUERY
		        UNION ALL
		        SELECT 999, 
		               3,
		               ROUND(AVG(SCORE1)),
		               ROUND(AVG(SCORE2)),
		               ROUND(AVG(SCORE3)),
		               ROUND(AVG(SCORE4)),
		               ROUND(AVG(SCORE5)),
		               ROUND(AVG(SCORE6)),
		               ROUND(AVG(SCORE7)),
		               ROUND(AVG(SCORE8)),
		               ROUND(AVG(SCORE9)),
		               ROUND(AVG(SCORE10)),
		               '학과평균', 
		               ROUND(AVG(AVERAGE)),
		               ROUND(AVG(BSNS_REQR_LEVEL))
		        FROM ORIGIN_QUERY
    ]]></sql-query>
    
    <sql-query name="DIVISION_CATEGORY_LIST"
		description="학과평균 카테고리 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DIVISION_CATEGORY_LIST
		--commnet : 학과평균 카테고리 리스트
		
		SELECT DVS_NAME
         FROM TB_BA_DIVISION
         WHERE  HIGH_DVSID = '0000000002' AND USEFLAG = 'Y'
         AND   COMPANYID = ?
         ORDER BY DIVISIONID
		
    ]]></sql-query>
    
    <sql-query name="CMPT_STATISTICS_YEAR_LIST"
		description="년도 평균" ><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : CMPT_STATISTICS_YEAR_LIST
		--commnet : 년도 평균
		
		WITH ORIGIN_QUERY AS (
	    SELECT
	            A.*, 
	            ROUND((SCORE1 + SCORE2 + SCORE3 + SCORE4)/
	            (
	                SELECT 
	                COUNT(*)
	                FROM(
	                    SELECT
	                    DISTINCT YEAR
	                    FROM(
	                        SELECT TO_CHAR(A.RUN_START, 'YYYY') YEAR
	                        FROM TB_CAM_RUN_L A
	                        WHERE   (TO_CHAR(A.RUN_START, 'YYYY') <= TO_CHAR(SYSDATE, 'YYYY')
	                        AND   TO_CHAR(A.RUN_START, 'YYYY') >= TO_CHAR(ADD_MONTHS(SYSDATE, - 36), 'YYYY'))
	                        AND   A.USEFLAG ='Y'
	                        AND   A.COMPANYID = ?
	                    )GROUP BY YEAR
	                )
	            )) AVERAGE
	        FROM
	        (
	            SELECT
	            A.CMPNUMBER,
	            B.CMPNAME,
	            B.BSNS_REQR_LEVEL,
	            SUM(SCORE1) SCORE1,
	            SUM(SCORE2) SCORE2,
	            SUM(SCORE3) SCORE3,
	            SUM(SCORE4) SCORE4
	            FROM
	            (
	                SELECT 
	                CMPNUMBER,
	                DECODE(YEAR, TO_CHAR(SYSDATE, 'YYYY'), ROUND(AVG(SCORE)),0) SCORE1,
	                DECODE(YEAR, TO_CHAR(ADD_MONTHS(SYSDATE, - 12), 'YYYY'), ROUND(AVG(SCORE)),0) SCORE2,
	                DECODE(YEAR, TO_CHAR(ADD_MONTHS(SYSDATE, - 24), 'YYYY'), ROUND(AVG(SCORE)),0) SCORE3,
	                DECODE(YEAR, TO_CHAR(ADD_MONTHS(SYSDATE, - 36), 'YYYY'), ROUND(AVG(SCORE)),0) SCORE4
	                FROM
	                (
	                    SELECT TO_CHAR(A.RUN_START, 'YYYY') YEAR , CMPNUMBER, SCORE
	                    FROM TB_CAM_RUN_L A, TB_CAR_INDC_SCORE B
	                    WHERE A.RUN_NUM = B.RUN_NUM
	                    AND   A.COMPANYID = B.COMPANYID
	                    AND   (TO_CHAR(A.RUN_START, 'YYYY') <= TO_CHAR(SYSDATE, 'YYYY')
	                    AND   TO_CHAR(A.RUN_START, 'YYYY') >= TO_CHAR(ADD_MONTHS(SYSDATE, - 36), 'YYYY'))
	                    AND   A.USEFLAG = 'Y'
	                    AND   B.EXAMPLE_NUM IS NOT NULL
	                    AND   A.COMPANYID = ?
	                )GROUP BY YEAR, CMPNUMBER
	            )A,
	            TB_CM_COMPETENCY B
	            WHERE A.CMPNUMBER = B.CMPNUMBER
	            GROUP BY A.CMPNUMBER, B.CMPNAME, B.BSNS_REQR_LEVEL
	            ORDER BY A.CMPNUMBER
	        )A
	        )
	        SELECT * FROM ORIGIN_QUERY
	        UNION ALL
	        SELECT 999, 
	               '년도평균',
	               ROUND(AVG(BSNS_REQR_LEVEL)),
	               ROUND(AVG(SCORE1)),
	               ROUND(AVG(SCORE2)),
	               ROUND(AVG(SCORE3)),
	               ROUND(AVG(SCORE4)),
	               ROUND(AVG(AVERAGE))
	        FROM ORIGIN_QUERY
		
    ]]></sql-query>
    
    <sql-query name="YEAR_CATEGORY_LIST"
		description="년도평균 카테고리 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : YEAR_CATEGORY_LIST
		--commnet : 년도평균 카테고리 리스트
		
		SELECT
		DISTINCT YEAR
		FROM(
		    SELECT TO_CHAR(A.RUN_START, 'YYYY') YEAR
		    FROM TB_CAM_RUN_L A
		    WHERE   (TO_CHAR(A.RUN_START, 'YYYY') <= TO_CHAR(SYSDATE, 'YYYY')
		    AND   TO_CHAR(A.RUN_START, 'YYYY') >= TO_CHAR(ADD_MONTHS(SYSDATE, - 36), 'YYYY'))
		    AND   A.USEFLAG ='Y'
		    AND   A.COMPANYID = ?
		)ORDER BY YEAR ASC
		
    ]]></sql-query>
    
    <sql-query name="RUN_COMPETENCY_LIST"
		description="실시에 들어간 역량 목록" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : RUN_COMPETENCY_LIST
		--commnet : 실시에 들어간 역량 목록
		
		SELECT DISTINCT B.CMPNUMBER, B.CMPNAME
		FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B
		WHERE A.COMPANYID = B.COMPANYID
		AND   A.COMPANYID = ?
		AND   A.RUN_NUM = ?
		ORDER BY B.CMPNUMBER
		
    ]]></sql-query>
    
    <sql-query name="DIAG_RESULT_EXCEL"
		description="진단결과" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DIAG_RESULT_EXCEL
		--commnet : 진단결과

		SELECT
		A.*, 
		ROUND((CMPNUMBER1+CMPNUMBER2+CMPNUMBER3+CMPNUMBER4+CMPNUMBER5+CMPNUMBER6+CMPNUMBER7+CMPNUMBER8+CMPNUMBER9+CMPNUMBER10)/
		(SELECT COUNT(*) FROM TB_CM_COMPETENCY WHERE USEFLAG = 'Y'))AVG_SCORE
		FROM
		(
		    SELECT
		    COMPANYID, RUN_NUM, USERID, DVS_NAME, ID, NAME, CURRENT_CLASS, DIAG_STATE,
		    ROUND(SUM(CMPNUMBER1)) CMPNUMBER1,
		    ROUND(SUM(CMPNUMBER2)) CMPNUMBER2,
		    ROUND(SUM(CMPNUMBER3)) CMPNUMBER3,
		    ROUND(SUM(CMPNUMBER4)) CMPNUMBER4,
		    ROUND(SUM(CMPNUMBER5)) CMPNUMBER5,
		    ROUND(SUM(CMPNUMBER6)) CMPNUMBER6,
		    ROUND(SUM(CMPNUMBER7)) CMPNUMBER7,
		    ROUND(SUM(CMPNUMBER8)) CMPNUMBER8,
		    ROUND(SUM(CMPNUMBER9)) CMPNUMBER9,
		    ROUND(SUM(CMPNUMBER10)) CMPNUMBER10
		    FROM
		    (
		        SELECT 
		        A.COMPANYID, A.RUN_NUM, A.USERID, A.DVS_NAME, A.ID, A.NAME, A.CURRENT_CLASS, A.DIAG_STATE,
		        AVG(DECODE(B.CMPNUMBER, 1, B.SCORE, 0)) CMPNUMBER1,
		        AVG(DECODE(B.CMPNUMBER, 2, B.SCORE, 0)) CMPNUMBER2,
		        AVG(DECODE(B.CMPNUMBER, 3, B.SCORE, 0)) CMPNUMBER3,
		        AVG(DECODE(B.CMPNUMBER, 4, B.SCORE, 0)) CMPNUMBER4,
		        AVG(DECODE(B.CMPNUMBER, 5, B.SCORE, 0)) CMPNUMBER5,
		        AVG(DECODE(B.CMPNUMBER, 6, B.SCORE, 0)) CMPNUMBER6,
		        AVG(DECODE(B.CMPNUMBER, 7, B.SCORE, 0)) CMPNUMBER7,
		        AVG(DECODE(B.CMPNUMBER, 8, B.SCORE, 0)) CMPNUMBER8,
		        AVG(DECODE(B.CMPNUMBER, 9, B.SCORE, 0)) CMPNUMBER9,
		        AVG(DECODE(B.CMPNUMBER, 9, B.SCORE, 0)) CMPNUMBER10
		        FROM
		        (
		            SELECT A.COMPANYID, A.RUN_NUM, A.USERID, D.DVS_NAME, ID, NAME, A.CURRENT_CLASS, DECODE(CMPL_FLAG, 'Y', '실시','미실시') DIAG_STATE
		            FROM TB_CAM_RUNTARGET_I A, TB_CAM_RUNDIRECTION_I B, TB_BA_USER C, TB_BA_DIVISION D
		            WHERE A.COMPANYID = B.COMPANYID
		            AND   A.RUN_NUM = B.RUN_NUM
		            AND   A.USERID = B.USERID
		            AND   A.USERID = C.USERID
		            AND   A.DIVISION = D.DIVISIONID(+)
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		        )A, TB_CAR_INDC_SCORE B
		        WHERE A.COMPANYID = B.COMPANYID(+)
		        AND   A.RUN_NUM = B.RUN_NUM(+)
		        AND   A.USERID = B.USERID_EX(+)
		        GROUP BY A.COMPANYID, A.RUN_NUM, A.USERID, A.DVS_NAME, A.ID, A.NAME, A.CURRENT_CLASS, A.DIAG_STATE, B.CMPNUMBER
		    )GROUP BY COMPANYID, RUN_NUM, USERID, DVS_NAME, ID, NAME, CURRENT_CLASS, DIAG_STATE
		    ORDER BY DIAG_STATE DESC
		)A
		
    ]]></sql-query>
    
    <sql-query name="CMPT_STATISTICS_CLASS_LIST"
		description="학년평균" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : CMPT_STATISTICS_CLASS_LIST
		--commnet : 학년평균
		
		WITH ORIGIN_QUERY AS (
	    SELECT
	        A.*, (CLASS1 + CLASS2 + CLASS3 + CLASS4)/
	        (SELECT COUNT(*) FROM(SELECT DISTINCT CURRENT_CLASS 
	          FROM TB_CAM_RUNTARGET_I A, TB_CAM_RUNDIRECTION_I B, TB_CAR_INDC_SCORE C
	          WHERE A.COMPANYID = B.COMPANYID 
	          AND A.RUN_NUM = B.RUN_NUM 
	          AND A.USERID = B.USERID
	          AND B.COMPANYID = C.COMPANYID
	          AND B.RUN_NUM = C.RUN_NUM
	          AND B.USERID = C.USERID_EX
	          AND A.COMPANYID = ?
	          AND A.RUN_NUM = ?)) LAST_AVG, 
	          CMPNAME, BSNS_REQR_LEVEL
	        FROM
	        (
	            SELECT
	            CMPNUMBER,
	            ROUND(SUM(CLASS1)) CLASS1,
	            ROUND(SUM(CLASS2)) CLASS2,
	            ROUND(SUM(CLASS3)) CLASS3,
	            ROUND(SUM(CLASS4)) CLASS4 
	            FROM
	            (
	                SELECT
	                CMPNUMBER,
	                AVG(DECODE(CURRENT_CLASS, 1, SCORE, 0)) CLASS1,
	                AVG(DECODE(CURRENT_CLASS, 2, SCORE, 0)) CLASS2,
	                AVG(DECODE(CURRENT_CLASS, 3, SCORE, 0)) CLASS3,
	                AVG(DECODE(CURRENT_CLASS, 4, SCORE, 0)) CLASS4
	                FROM
	                (
	                    SELECT CURRENT_CLASS, A.CMPNUMBER, AVG(SCORE) SCORE
	                    FROM TB_CAR_INDC_SCORE A, TB_CAM_RUNTARGET_I B, TB_CM_BHV_INDICATOR C
	                    WHERE A.COMPANYID = B.COMPANYID
	                    AND   A.RUN_NUM = B.RUN_NUM
	                    AND   A.USERID_EX = B.USERID
	                    AND   A.COMPANYID = C.COMPANYID
	                    AND   A.CMPNUMBER = C.CMPNUMBER
	                    AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
	                    AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
	                    AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')
	                    AND   A.COMPANYID = ?
	                    AND   A.RUN_NUM = ?
	                    AND   A.EXAMPLE_NUM IS NOT NULL
	                    GROUP BY CURRENT_CLASS, A.CMPNUMBER
	                )GROUP BY CMPNUMBER, CURRENT_CLASS
	                ORDER BY CMPNUMBER
	            )GROUP BY CMPNUMBER
	            ORDER BY CMPNUMBER
	        )A, TB_CM_COMPETENCY B
	        WHERE A.CMPNUMBER = B.CMPNUMBER)
	        SELECT * FROM ORIGIN_QUERY
	        UNION ALL
	        SELECT 999, 
	               ROUND(AVG(CLASS1)), 
	               ROUND(AVG(CLASS2)), 
	               ROUND(AVG(CLASS3)), 
	               ROUND(AVG(CLASS4)), 
	               ROUND(AVG(LAST_AVG)), 
	               '학년평균', 
	               ROUND(AVG(BSNS_REQR_LEVEL))
	        FROM ORIGIN_QUERY
		
    ]]></sql-query>
    
    <sql-query name="RECOMMEND_NOT_SUBJECT_INFO"
		description="추천 비교과과정 정보" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : RECOMMEND_NOT_SUBJECT_INFO
		--commnet : 추천 비교과과정 정보
		
		SELECT ? CMPNUMBER, A.SUBJECT_NAME, B.YEAR||'년 '||B.CHASU||'학기' EDU_DATE, A.EDU_DAY, A.COURSE_CONTENTS,A.EDU_OBJECT, 
		            B.EDU_COST, SAMPLE_URL, B.SUBJECT_NUM, B.YEAR, B.CHASU, DECODE(C.SUBJECT_NUM, NULL, 'Y', 'N') EDU_APPLY_POSSIBILITY,
		           NVL((SELECT COUPON FROM TB_BA_USER WHERE COMPANYID = ? AND USERID =?),0) - 
		           (SELECT COUNT(*) FROM TB_BA_CLASS WHERE USERID =? AND COUPON_FLAG= 'Y' AND ATTEND_STATE_CODE NOT IN ('4','7')) COUPON, INSTITUTE_NAME, EDU_HOUR
		FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B, TB_BA_CLASS C
		WHERE A.SUBJECT_NUM = B.SUBJECT_NUM
		AND   B.SUBJECT_NUM = C.SUBJECT_NUM(+)
		AND   B.YEAR = C.YEAR(+)
		AND   B.CHASU = C.CHASU(+)
		AND   C.USERID(+) = ?
		AND   C.ATTEND_STATE_CODE(+) NOT IN ('4','7')
		AND   B.SUBJECT_NUM = ?
		AND   B.YEAR = ?
		AND   B.CHASU = ?
		
    ]]></sql-query>
    
    <sql-query name="RECOMMEND_SUBJECT_INFO"
		description="추천 교과과정 정보" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : RECOMMEND_SUBJECT_INFO
		--commnet : 추천 교과과정 정보
		
		SELECT A.SUBJECT_NAME, YEAR||'년 '||B.CHASU||'학기' EDU_DATE, A.EDU_DAY, A.EDU_OBJECT, POINT
        FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B
        WHERE A.SUBJECT_NUM = B.SUBJECT_NUM
        AND   B.SUBJECT_NUM = ?
        AND   B.YEAR = ?
        AND   B.CHASU = ?
		
    ]]></sql-query>
    
    <sql-query name="DEVELOPMENT_GUIDE"
		description="역량개발가이드 그리드" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DEVELOPMENT_GUIDE
		--commnet : 역량개발가이드 그리드
		
		SELECT
		(
		    SELECT
		    SUBSTR(MAX(SYS_CONNECT_BY_PATH(CMPNAME, '</br>')), 6) 
		    FROM
		    (
		    SELECT
		    A.CMPNAME, ROWNUM RNUM
		    FROM
		    TB_CM_COMPETENCY A,
		    (
		        SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND   A.COMPANYID = B.COMPANYID
		        AND   A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
		        AND   A.USERID_EX = ?
		        AND   A.COMPANYID = C.COMPANYID
		        AND   A.CMPNUMBER = C.CMPNUMBER
		        AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      			AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		        AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		        GROUP BY A.CMPNUMBER, B.CMPNAME
		    )B
		    WHERE A.CMPNUMBER = B.CMPNUMBER
		    AND   A.COMPANYID = ?
		    AND   A.BSNS_REQR_LEVEL - SCORE > 10
		    )
		    START WITH RNUM = 1
		    CONNECT BY PRIOR RNUM = RNUM - 1
		)START_LIST,
		(
		    SELECT
		    SUBSTR(MAX(SYS_CONNECT_BY_PATH(CMPNAME, '</br>')), 6) 
		    FROM
		    (
		    SELECT
		    A.CMPNAME, ROWNUM RNUM
		    FROM
		    TB_CM_COMPETENCY A,
		    (
		        SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND   A.COMPANYID = B.COMPANYID
		        AND   A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
		        AND   A.USERID_EX = ?
		        AND   A.COMPANYID = C.COMPANYID
		        AND   A.CMPNUMBER = C.CMPNUMBER
		        AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      			AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		        AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		        GROUP BY A.CMPNUMBER, B.CMPNAME
		    )B
		    WHERE A.CMPNUMBER = B.CMPNUMBER
		    AND   A.COMPANYID = ?
		    AND   A.BSNS_REQR_LEVEL - SCORE < 10 
		    AND   SCORE - A.BSNS_REQR_LEVEL < 10 
		    )
		    START WITH RNUM = 1
		    CONNECT BY PRIOR RNUM = RNUM - 1
		)KEEP_LIST,
		(
		    SELECT
		    SUBSTR(MAX(SYS_CONNECT_BY_PATH(CMPNAME, '</br>')), 6) 
		    FROM
		    (
		    SELECT
		    A.CMPNAME, ROWNUM RNUM
		    FROM
		    TB_CM_COMPETENCY A,
		    (
		        SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND   A.COMPANYID = B.COMPANYID
		        AND   A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
		        AND   A.USERID_EX = ?
		        AND   A.COMPANYID = C.COMPANYID
		        AND   A.CMPNUMBER = C.CMPNUMBER
		        AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      			AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		        AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		        GROUP BY A.CMPNUMBER, B.CMPNAME
		    )B
		    WHERE A.CMPNUMBER = B.CMPNUMBER
		    AND   A.COMPANYID = ?
		    AND   SCORE - A.BSNS_REQR_LEVEL > 10
		    )
		    START WITH RNUM = 1
		    CONNECT BY PRIOR RNUM = RNUM - 1
		)STOP_LIST
		FROM DUAL
		
    ]]></sql-query>
    
    <sql-query name="DIAG_RESULT_SCORE"
		description="종합점수 결과" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DIAG_RESULT_SCORE
		--commnet : 종합점수 결과
		
		SELECT ROUND(AVG(SCORE))
		FROM
		(
		SELECT A.CMPNUMBER, ROUND(AVG(SCORE)) SCORE
		FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B 
		WHERE A.COMPANYID = B.COMPANYID
		AND   A.CMPNUMBER = B.CMPNUMBER 
		AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
		AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
		AND   A.COMPANYID = ?
		AND   A.RUN_NUM = ?
		AND   USERID_EX = ?
		GROUP BY A.CMPNUMBER
		)

		
    ]]></sql-query>
    
    <sql-query name="DIAG_RESULT_STRING"
		description="진단 결과 문장" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DIAG_RESULT_STRING
		--commnet :진단 결과 문장
		
		SELECT 
		'<P>'||'개인관점에서 </br> <font color="blue">강한역량은 '||
		(
		    SELECT
		    SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2)
		    FROM
		    (
		        SELECT
		        CMPNAME, ROW_NUMBER() OVER (ORDER BY SCORE DESC) RANK
		        FROM
		        (
		            SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		            WHERE A.CMPNUMBER = B.CMPNUMBER
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.USERID_EX = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.CMPNUMBER = C.CMPNUMBER
		            AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		            AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')
		            GROUP BY A.CMPNUMBER, B.CMPNAME
		        )A
		    ) 
		    WHERE RANK < 3
		    START WITH RANK = 1
		    CONNECT BY PRIOR RANK = RANK-1
		)||'</font> 이며, </br> <font color="red">약한역량은'||
		(
		    SELECT
		    SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2)
		    FROM
		    (
		        SELECT
		        CMPNAME, ROW_NUMBER() OVER (ORDER BY SCORE ASC) RANK
		        FROM
		        (
		            SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		            WHERE A.CMPNUMBER = B.CMPNUMBER
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.USERID_EX = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.CMPNUMBER = C.CMPNUMBER
		            AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		            AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		            GROUP BY A.CMPNUMBER, B.CMPNAME
		        )A
		    ) 
		    WHERE RANK < 3
		    START WITH RANK = 1
		    CONNECT BY PRIOR RANK = RANK-1
		)||'</font>입니다. </br></br> 또한 동일학년에 비해 약한 역량은 <font color="red">'||
		(
		    SELECT
		    DECODE(SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2) , NULL, '</font> 없으며 ', SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2)||'</font>이며, ')
		    FROM
		    (
		        SELECT
		        B.CMPNAME, ROWNUM RNUM
		        FROM
		        (
		            SELECT A.CMPNUMBER, ROUND(AVG(SCORE)) COMPARE_SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B, TB_CAM_RUNTARGET_I C
		            WHERE A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.RUN_NUM = C.RUN_NUM
		            AND   A.USERID_EX = C.USERID
		            AND   C.CURRENT_CLASS = (SELECT CURRENT_CLASS FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID = ?)
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.CMPNUMBER = B.CMPNUMBER
		            AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		            AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
		            GROUP BY A.CMPNUMBER
		        ) A, 
		        (
		            SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		            WHERE A.CMPNUMBER = B.CMPNUMBER
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.USERID_EX = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.CMPNUMBER = C.CMPNUMBER
		            AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		            AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		            GROUP BY A.CMPNUMBER, B.CMPNAME
		        )B
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND A.COMPARE_SCORE > SCORE
		    )
		    START WITH RNUM = 1
		    CONNECT BY PRIOR RNUM = RNUM - 1
		)||'전체 학생들에 비해 약한 역량은 <font color="red">' ||
		(
		    SELECT
		    DECODE(SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2) , NULL, ' </font> 없으며, ', SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2)||'</font>이며, ')
		    FROM
		    (
		        SELECT
		        B.CMPNAME, ROWNUM RNUM
		        FROM
		        (
		            SELECT A.CMPNUMBER, ROUND(AVG(SCORE)) COMPARE_SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B
		            WHERE A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.CMPNUMBER = B.CMPNUMBER
		            AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		            AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
		            GROUP BY A.CMPNUMBER
		        ) A, 
		        (
		            SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		            WHERE A.CMPNUMBER = B.CMPNUMBER
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.USERID_EX = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.CMPNUMBER = C.CMPNUMBER
		            AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		            AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		            GROUP BY A.CMPNUMBER, B.CMPNAME
		        )B
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND A.COMPARE_SCORE > SCORE
		    )
		    START WITH RNUM = 1
		    CONNECT BY PRIOR RNUM = RNUM - 1
		)||'같은 학과 학생들에 비해 약한 역량은 <font color="red">'||
		(
		    SELECT
		    DECODE(SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2) , NULL, '</font> 없습니다. ', SUBSTR(MAX(SYS_CONNECT_BY_PATH('"'||CMPNAME||'"', ', ')), 2)||'</font>입니다.  ')
		    FROM
		    (
		        SELECT
		        B.CMPNAME, ROWNUM RNUM
		        FROM
		        (
		            SELECT A.CMPNUMBER, ROUND(AVG(SCORE)) COMPARE_SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B, TB_CAM_RUNTARGET_I C
		            WHERE A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.RUN_NUM = C.RUN_NUM
		            AND   A.USERID_EX = C.USERID
		            AND   C.DIVISION = (SELECT DIVISION  FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID = ?)
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.CMPNUMBER = B.CMPNUMBER
		            AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		            AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
		            GROUP BY A.CMPNUMBER
		        ) A, 
		        (
		            SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		            FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B, TB_CM_BHV_INDICATOR C
		            WHERE A.CMPNUMBER = B.CMPNUMBER
		            AND   A.COMPANYID = B.COMPANYID
		            AND   A.COMPANYID = ?
		            AND   A.RUN_NUM = ?
		            AND   A.USERID_EX = ?
		            AND   A.COMPANYID = C.COMPANYID
		            AND   A.CMPNUMBER = C.CMPNUMBER
		            AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
      				AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		            AND   (C.EXCEPTION_FLAG IS NULL OR C.EXCEPTION_FLAG = 'N')AND   A.BHV_INDC_NUM = C.BHV_INDC_NUM
		            GROUP BY A.CMPNUMBER, B.CMPNAME
		        )B
		        WHERE A.CMPNUMBER = B.CMPNUMBER
		        AND A.COMPARE_SCORE > SCORE
		    )
		    START WITH RNUM = 1
		    CONNECT BY PRIOR RNUM = RNUM - 1
		)||'이에 해당 역량을 개발하기 위한 노력이 필요합니다.</P>'
		FROM DUAL
		
    ]]></sql-query>
    
    <sql-query name="NOT_SUBJECT_LIST"
		description="비교과과정 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : NOT_SUBJECT_LIST
		--commnet :비교과과정 리스트
		
		SELECT A.SUBJECT_NUM, A.YEAR, A.CHASU, B.CMPNAME, A.CMPNUMBER, A.SUBJECT_NAME, C.CMM_CODENAME,  A.EDU_HOUR, 
		       		EDU_DATE, DECODE(USERID, NULL, '미수강', FUN_COMMON_CODE('BA05',D.ATTEND_STATE_CODE)) ATTEND_STATE
		FROM 
		(
		SELECT C.CMPNUMBER, A.TRAINING_CODE, A.SUBJECT_NUM, B.YEAR, B.CHASU, 
		       A.SUBJECT_NAME, A.EDU_HOUR , 
		       FUN_DATE_FORMAT(TO_DATE(EDU_STIME, 'YYYYMMDD'), 1)||'~'||FUN_DATE_FORMAT(TO_DATE(EDU_ETIME, 'YYYYMMDD'), 1) EDU_DATE 
		FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B, TB_CM_SUBJECT_MAP C 
		WHERE A.SUBJECT_NUM = B.SUBJECT_NUM
		AND   A.SUBJECT_NUM = C.SUBJECT_NUM
		AND   C.COMPANYID = ?
		AND   B.YEAR = ?
		AND   A.OPEN_CODE = 2
		) A
		, TB_CM_COMPETENCY B, TB_BA_COMMONCODE C, TB_BA_CLASS D
		WHERE A.CMPNUMBER = B.CMPNUMBER
		AND   A.TRAINING_CODE = C.COMMONCODE
		AND   A.SUBJECT_NUM = D.SUBJECT_NUM(+)
		AND   A.YEAR = D.YEAR(+)
		AND   A.CHASU = D.CHASU(+)
		AND   A.CMPNUMBER = D.CMPNUMBER(+)
		AND   D.USERID(+) = ?
		AND   C.STANDARDCODE = 'BA03'
		ORDER BY A.CMPNUMBER, A.YEAR, A.CHASU
		
    ]]></sql-query>
    
     <sql-query name="SUBJECT_LIST"
		description="교과과정 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SUBJECT_LIST
		--commnet :교과과정 리스트
		
		SELECT DISTINCT A.SUBJECT_NUM, B.YEAR, B.CHASU, D.CMPNAME, A.SUBJECT_NAME,
		                        E.CMM_CODENAME, POINT, GRADE, TERM SEMESTER
		FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B, TB_CM_SUBJECT_MAP C, TB_CM_COMPETENCY D, TB_BA_COMMONCODE E
		WHERE A.SUBJECT_NUM = B.SUBJECT_NUM
		AND   A.SUBJECT_NUM = C.SUBJECT_NUM
		AND   C.CMPNUMBER = D.CMPNUMBER
		AND   A.TRAINING_CODE = E.COMMONCODE
		AND   E.STANDARDCODE = 'BA03'
		AND   C.COMPANYID = ?
		AND   B.YEAR = ?
		AND   A.OPEN_CODE = 1
		
    ]]></sql-query>
    
    <sql-query name="COMPETENCY_SCORE_LIST"
		description="역량별 점수" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : COMPETENCY_SCORE_LIST
		--commnet :역량별 점수
		
		SELECT A.CMPNUMBER, B.CMPNAME, ROUND(AVG(SCORE)) SCORE
		FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B
		WHERE A.COMPANYID = B.COMPANYID
		AND   A.CMPNUMBER = B.CMPNUMBER
		AND   A.COMPANYID = ?
		AND   A.RUN_NUM = ?
		AND   A.USERID_EX = ?
		GROUP BY A.CMPNUMBER, B.CMPNAME
		ORDER BY A.CMPNUMBER
		
    ]]></sql-query>
    
    <sql-query name="SUBELEMENT_EXPLANATION_LIST"
		description="하위요소 설명" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SUBELEMENT_EXPLANATION_LIST
		--commnet :하위요소 설명
		
		SELECT A.CMPNUMBER, SUBELEMENT_NAME, SUBELEMENT_DESC
         FROM TB_CM_COMPETENCY A, TB_CM_SUBELEMENT B, 
         (SELECT DISTINCT CMPNUMBER FROM TB_CAR_INDC_SCORE WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID_EX = ?) C
         WHERE A.CMPNUMBER = B.CMPNUMBER
         AND     A.COMPANYID = ?
         AND     A.CMPNUMBER = C.CMPNUMBER
         AND             B.USEFLAG = 'Y'
         AND      A.USEFLAG = 'Y'
		
    ]]></sql-query>
    
    <sql-query name="SUBELEMENT_RESULT_LIST"
		description="하위요소 그래프" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SUBELEMENT_RESULT_LIST
		--commnet :하위요소 그래프
		
		SELECT A.CMPNUMBER, CMPNAME, SUBELEMENT_NAME, 
       		   MY_SCORE, THE_WHOLE_SCORE, EQUAL_CLASS_SCORE, EQUAL_MAJOR_SCORE
		FROM
		(
		    SELECT A.CMPNUMBER, A.SUBELEMENT_NUM, MY_SCORE, THE_WHOLE_SCORE, EQUAL_CLASS_SCORE, EQUAL_MAJOR_SCORE
		    FROM
		    (
		        SELECT A.CMPNUMBER, A.SUBELEMENT_NUM, ROUND(AVG(A.SCORE)) MY_SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B
		        WHERE A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
		        AND   A.USERID_EX = ?
                AND A.COMPANYID = B.COMPANYID
                AND A.BHV_INDC_NUM = B.BHV_INDC_NUM
		        AND (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
		        GROUP BY A.CMPNUMBER, A.SUBELEMENT_NUM 
		    ) A,
		    (
		        SELECT A.CMPNUMBER, A.SUBELEMENT_NUM, ROUND(AVG(A.SCORE)) THE_WHOLE_SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B
		        WHERE A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
                AND   A.COMPANYID = B.COMPANYID
                AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
		        AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
		        GROUP BY A.CMPNUMBER, A.SUBELEMENT_NUM 
		    ) B,
		    (
		        SELECT A.CMPNUMBER, A.SUBELEMENT_NUM, ROUND(AVG(A.SCORE)) EQUAL_CLASS_SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B, TB_CAM_RUNTARGET_I C
		        WHERE A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
                AND   A.COMPANYID = B.COMPANYID
                AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
		        AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
                AND   A.COMPANYID = C.COMPANYID
		        AND   A.RUN_NUM= C.RUN_NUM
		        AND   A.USERID_EX = C.USERID
		        AND   C.CURRENT_CLASS = (SELECT CURRENT_CLASS FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID = ?)
		        GROUP BY A.COMPANYID, A.CMPNUMBER, A.SUBELEMENT_NUM
		    ) C,
		    (
		        SELECT A.CMPNUMBER, A.SUBELEMENT_NUM, ROUND(AVG(A.SCORE)) EQUAL_MAJOR_SCORE
		        FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B, TB_CAM_RUNTARGET_I C
		        WHERE A.COMPANYID = ?
		        AND   A.RUN_NUM = ?
                AND   A.COMPANYID = B.COMPANYID
                AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
		        AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
                AND   A.COMPANYID = C.COMPANYID
		        AND   A.RUN_NUM= C.RUN_NUM
		        AND   A.USERID_EX = C.USERID
		        AND   C.DIVISION = (SELECT DIVISION FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID = ?)
		        GROUP BY A.COMPANYID, A.CMPNUMBER, A.SUBELEMENT_NUM 
		    )D
		    WHERE A.CMPNUMBER = B.CMPNUMBER
		    AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		    AND   A.CMPNUMBER = C.CMPNUMBER
		    AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		    AND   A.CMPNUMBER = D.CMPNUMBER
		    AND   A.SUBELEMENT_NUM = D.SUBELEMENT_NUM
		)A, TB_CM_COMPETENCY B, TB_CM_SUBELEMENT C
		WHERE A.CMPNUMBER = B.CMPNUMBER
		AND   A.SUBELEMENT_NUM = C.SUBELEMENT_NUM
		AND   B.CMPNUMBER = C.CMPNUMBER
        AND   B.USEFLAG = 'Y'
        AND   C.USEFLAG = 'Y'
		AND   B.COMPANYID = ?
		AND   C.COMPANYID = ?	
		ORDER BY A.CMPNUMBER, A.SUBELEMENT_NUM
		
    ]]></sql-query>
    
    <sql-query name="COMPETENCY_EXPLANATION_LIST"
		description="역량 설명" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : COMPETENCY_EXPLANATION_LIST
		--commnet :역량 설명
		
		SELECT CMPNAME, CMPDEFINITION, A.CMPNUMBER
         FROM TB_CM_COMPETENCY A,
         (SELECT DISTINCT CMPNUMBER FROM TB_CAR_INDC_SCORE WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID_EX = ?) B
         WHERE A.CMPNUMBER = B.CMPNUMBER
         AND COMPANYID = ?
         AND USEFLAG = 'Y'
         ORDER BY A.CMPNUMBER ASC
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_SOCIAL_FLAG"
		description="일관성 척도 업데이트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_SOCIAL_FLAG
		--commnet :일관성 척도 업데이트
		
		UPDATE TB_CAM_RUNTARGET_I
		SET SOCIAL_FLAG = (
		    SELECT
		    CASE WHEN SUM(SCORE) <= 4 THEN 'Y' ELSE 'N' END FLAG
		    FROM
		    (
		    SELECT CASE WHEN A.SCORE = 100 THEN 1
		                WHEN A.SCORE = 80 THEN 0.5
		                WHEN A.SCORE <= 60 THEN 0
		           END SCORE
		    FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B
		    WHERE A.COMPANYID = B.COMPANYID
		    AND   A.CMPNUMBER = B.CMPNUMBER
		    AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
      		AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		    AND   B.SOCIAL_ADVISABLE_FLAG IS NOT NULL
		    AND   A.COMPANYID = ?
		    AND   A.RUN_NUM = ?
		    AND   A.USERID_EX = ?
		))
		WHERE COMPANYID = ?
		AND   RUN_NUM = ?
		AND   USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_CNST_FLAG"
		description="일관성 척도 업데이트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_CNST_FLAG
		--commnet :일관성 척도 업데이트
		
		UPDATE TB_CAM_RUNTARGET_I
		SET CNST_FLAG = (SELECT
		CASE WHEN SUM(SCORE) >= 5 THEN 'Y'
		     ELSE  'N'
		END FLAG
		FROM
		(
		    SELECT CASE WHEN A.SCORE-D.SCORE >= 40 OR D.SCORE-A.SCORE >= 40 THEN 0
		                WHEN A.SCORE-D.SCORE >= 20 OR D.SCORE-A.SCORE >= 20 THEN 0.5
		                WHEN A.SCORE-D.SCORE = 0 OR D.SCORE-A.SCORE = 0 THEN 1
		           END SCORE
		    FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B, TB_CM_BHV_INDICATOR C, TB_CAR_INDC_SCORE D
		    WHERE A.COMPANYID = B.COMPANYID
		    AND   A.CMPNUMBER = B.CMPNUMBER
		    AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
      		AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		    AND   B.CNST_BHV_INDC_NUM = C.BHV_INDC_NUM
		    AND   C.COMPANYID = D.COMPANYID(+)
		    AND   C.CMPNUMBER = D.CMPNUMBER(+)
		    AND   C.BHV_INDC_NUM = D.BHV_INDC_NUM(+)
		    AND   A.COMPANYID = ?
		    AND   A.RUN_NUM = ?
		    AND   A.USERID_EX = ?
		))
		WHERE COMPANYID = ?
		AND   RUN_NUM = ?
		AND   USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_CNST_FLAG"
		description="일관성 척도 업데이트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_CNST_FLAG
		--commnet :일관성 척도 업데이트
		
		UPDATE TB_CAM_RUNTARGET_I
		SET CNST_FLAG = (SELECT
		CASE WHEN SUM(SCORE) >= 5 THEN 'Y'
		     ELSE  'N'
		END FLAG
		FROM
		(
		    SELECT CASE WHEN A.SCORE-D.SCORE >= 40 OR D.SCORE-A.SCORE >= 40 THEN 0
		                WHEN A.SCORE-D.SCORE >= 20 OR D.SCORE-A.SCORE >= 20 THEN 0.5
		                WHEN A.SCORE-D.SCORE = 0 OR D.SCORE-A.SCORE = 0 THEN 1
		           END SCORE
		    FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B, TB_CM_BHV_INDICATOR C, TB_CAR_INDC_SCORE D
		    WHERE A.COMPANYID = B.COMPANYID
		    AND   A.CMPNUMBER = B.CMPNUMBER
		    AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
     		AND   A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		    AND   B.CNST_BHV_INDC_NUM = C.BHV_INDC_NUM
		    AND   C.COMPANYID = D.COMPANYID(+)
		    AND   C.CMPNUMBER = D.CMPNUMBER(+)
		    AND   C.BHV_INDC_NUM = D.BHV_INDC_NUM(+)
		    AND   A.COMPANYID = ?
		    AND   A.RUN_NUM = ?
		    AND   A.USERID_EX = ?
		))
		WHERE COMPANYID = ?
		AND   RUN_NUM = ?
		AND   USERID = ?
		
    ]]></sql-query>
    
    <sql-query name="DELETE_CMPTGROUP_SOCRE"
		description="역량군별 진단결과 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_CMPTGROUP_SOCRE
		--commnet :역량군별 진단결과 삭제
		
		DELETE FROM TB_CAR_CMPTGROUP_SCORE
		WHERE COMPANYID = ?
		AND     RUN_NUM = ?
		AND     USERID_EX = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_CMPT_SCORE"
		description="역량별 진단결과 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_CMPT_SCORE
		--commnet :역량별 진단결과 삭제
		
		UPDATE TB_CAR_CMPT_SCORE
		SET USEFLAG = 'N',
			MODIFIER = ?
		WHERE COMPANYID = ?
		AND     RUN_NUM = ?
		AND     USERID_EXED = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_EXED_CMPT_SCORE"
		description="역량별 최종 진단결과 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_EXED_CMPT_SCORE
		--commnet :역량별 진단결과 삭제
		
		UPDATE TB_CAR_EXED_CMPT_SCORE   
                SET USEFLAG  = 'N',
                	MODIFIER = ?
                WHERE COMPANYID = ?
                AND     RUN_NUM = ?
                AND     USERID_EXED  = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_INDC_SCORE"
		description="행동지표별 진단결과 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_INDC_SCORE
		--commnet :행동지표별 진단결과 삭제
		
		UPDATE TB_CAR_INDC_SCORE
		SET USEFLAG = 'N',
			MODIFIER = ?
		WHERE 	COMPANYID = ?
		AND     RUN_NUM = ?
		AND     USERID_EXED = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_COMPLETE_CANCEL"
		description="진단 초기화" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_COMPLETE_CANCEL
		--commnet :진단 초기화
		
		UPDATE TB_CAM_RUNDIRECTION_I 
		SET CMPL_FLAG = 'N',
				CMPL_DATE = NULL,
				MODIFIER = ?
		WHERE COMPANYID = ?
		AND     RUN_NUM = ?
		AND     USERID_EXED = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_COMPLETE_CANCEL2"
		description="진단 초기화" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_COMPLETE_CANCEL2
		--commnet :진단 초기화
		
		UPDATE TB_CAM_RUNTARGET_I  
        SET CMPT_EVL_CMPL_FLAG  = 'N',
                CMPT_EVL_CMPL_DATE  = NULL,
                MODIFIER = ?
        WHERE COMPANYID = ?
        AND     RUN_NUM = ?
        AND     USERID  = ?
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_CMPT_DIRECTION_SCORE"
		description="행동지표별 진단결과 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_CMPT_DIRECTION_SCORE
		--commnet :행동지표별 진단결과 삭제
		
		UPDATE TB_CAR_CMPT_DIRECTION_SCORE    
        SET USEFLAG  = 'N',
        	MODIFIER = ?
        WHERE COMPANYID = ?
        AND     RUN_NUM = ?
        AND     USERID_EXED  = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_STATISTICS_LIST"
		description="역량진단 진행현황" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_STATISTICS_LIST
		--commnet :역량진단 진행현황

SELECT ROW_NUMBER() OVER(ORDER BY BU.NAME) ROWNUMBER, CT.RUN_NUM, '' CHECKFLAG, CT.COMPANYID, RI.USERID, BU.NAME, BU.EMPNO, BD.DVS_NAME, CL.JOBLDR_NAME LEADERSHIP_NAME,
    CASE WHEN COUNT(*) = SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)) THEN '완료'
    ELSE '미완료'
    END STATE,
    COUNT(*) T_CNT, SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)) C_CNT
FROM TB_CAM_RUNTARGET_I CT, TB_CAM_RUNDIRECTION_I RI, TB_BA_USER BU, TB_BA_DIVISION BD, TB_CM_JOB_LDR_I CL
WHERE CT.COMPANYID = RI.COMPANYID 
    AND CT.RUN_NUM = RI.RUN_NUM 
    AND CT.USERID = RI.USERID_EXED
    AND RI.COMPANYID = BU.COMPANYID 
    AND RI.USERID = BU.USERID
    AND BU.COMPANYID = BD.COMPANYID  
    AND BU.DIVISIONID = BD.DIVISIONID
    AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L'
    AND CT.USEFLAG = 'Y'
    AND RI.USEFLAG = 'Y'
    AND CT.COMPANYID = ?
    AND RI.RUN_NUM = ?
GROUP BY CT.RUN_NUM, CT.COMPANYID, RI.USERID, BU.NAME, BU.EMPNO, BD.DVS_NAME, CL.JOBLDR_NAME
    ]]></sql-query>
    
    <sql-query name="GET_CURRENT_RUN_NUM"
		description="최근진단번호 가져오기" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CURRENT_RUN_NUM
		--commnet :최근진단번호 가져오기
		
		SELECT MAX(RUN_NUM) FROM TB_CAM_RUN_L WHERE COMPANYID = ?
		ORDER BY RUN_NUM ASC
		
    ]]></sql-query>
    
    <sql-query name="GET_QSTN_POOL_NUM"
		description="설문 문항관리 Pool No 가져오기" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CURRENT_RUN_NUM
		--commnet :최근진단번호 가져오기
		
		SELECT DECODE(MAX(QSTN_POOL_NO)+1, NULL,  '1', MAX(QSTN_POOL_NO)+1) QSTN_POOL_NO FROM TB_SV_QSTN_POOL WHERE COMPANYID = ?
		
    ]]></sql-query>
    
        <sql-query name="GET_QSTN_NUM"
		description="설문 문항관리  No 가져오기" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_QSTN_NUM
		--commnet :최근진단번호 가져오기
		
		SELECT DECODE(MAX(QSTN_SEQ)+1, NULL,  '1', MAX(QSTN_SEQ)+1) QSTN_SEQ FROM TB_SV_QSTN WHERE COMPANYID = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_SERV_NUM"
		description="설문 관리 No 가져오기" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SERV_NUM
		--commnet :최근진단번호 가져오기
		
		SELECT DECODE(MAX(PP_NO)+1, NULL,  '1', MAX(PP_NO)+1) PP_NO FROM TB_SV_PP WHERE COMPANYID = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_SURV_RUN_NULL"
		description="설문관리 년도 NULL" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SURV_RUN_NULL
		--commnet :설문관리 년도 NULL
        
        SELECT TO_CHAR(PP_ST, 'YYYY') YYYY 
        FROM (SELECT * FROM TB_SV_PP ORDER BY PP_ST DESC) 
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
        AND ROWNUM <2
        ORDER BY YYYY DESC
        
        
		
    ]]></sql-query>
    
    <sql-query name="GET_RUN_NAME"
		description="진단명 가져오기" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_RUN_NAME
		--commnet :진단명 가져오기
		
		SELECT RUN_NAME FROM TB_CAM_RUN_L WHERE COMPANYID = ? AND RUN_NUM = ?
		
		
    ]]></sql-query>
    
    <sql-query name="INSERT_RUN_TARGET"
		description="역량진단 대상자 추가" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_RUN_TARGET
		--commnet :역량진단 대상자 추가
		
		INSERT INTO TB_CAM_RUNTARGET_I(COMPANYID, RUN_NUM, USERID, DIVISION, CURRENT_CLASS, CREATETIME, CREATER)
		VALUES(?, ?, ?, ?, ?, SYSDATE, ?)
		
		
    ]]></sql-query>
    
    <sql-query name="INSERT_RUN_DIRECTION"
		description="역량진단 방향설정 추가" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_RUN_DIRECTION
		--commnet :역량진단 방향설정 추가
		
		INSERT INTO TB_CAM_RUNDIRECTION_I(COMPANYID, RUN_NUM, USERID, USERID_EXED, RUNDIRECTION_CD, CREATETIME, CREATER)
		VALUES(?, ?, ?, ?, ?, SYSDATE, ?)
		
		
    ]]></sql-query>
    
    <sql-query name="DELETE_RUN_TARGET"
		description="역량진단 대상자 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_RUN_TARGET
		--commnet :역량진단 대상자 삭제
		
		DELETE FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ?
		
		
    ]]></sql-query>
    
    <sql-query name="DELETE_RUN_DIRECTION"
		description="역량진단 방향설정 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_RUN_DIRECTION
		--commnet :역량진단 방향설정 삭제
		
		DELETE FROM TB_CAM_RUNDIRECTION_I WHERE COMPANYID = ? AND RUN_NUM = ?
		
		
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_TARGET_LIST"
		description="대상자 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_TARGET_LIST
		--commnet :진단자 리스트
		
	SELECT ROW_NUMBER() OVER(ORDER BY RI.USEFLAG,BU.USERID ASC)-1 ROWNUMBER, DECODE(RI.USEFLAG, 'Y', 'checked="1"','') CHECKFLAG, DECODE(RI.USEFLAG, 'Y', 'Y','') EXCEL_CHECK
	, BU.EMPNO, BU.JOB, CJ.JOBLDR_NAME JOB_NM, CL.JOBLDR_NAME LEADERSHIP_NM, BU.LEADERSHIP, BD.DVS_NAME, BD.DIVISIONID, BD.HIGH_DVSID, BU.COMPANYID, BU.USERID, BU.NAME, SELF.WEIGHT SELF_WEIGHT, ONE.USERID ONE_USERID, ONE.NAME ONE_NAME, ONE.EMPNO ONE_EMPNO, ONE.WEIGHT ONE_WEIGHT
    ,TWO.USERID TWO_USERID,TWO.NAME TWO_NAME, TWO.EMPNO TWO_EMPNO, TWO.WEIGHT TWO_WEIGHT
    , SELF.START_DATE S_START_DATE, ONE.START_DATE O_START_DATE, TWO.START_DATE T_START_DATE 
    FROM TB_BA_USER BU,  TB_CM_JOB_LDR_I CL, TB_CM_JOB_LDR_I CJ,
    (
    SELECT *
    FROM TB_CAM_RUNTARGET_I
    WHERE COMPANYID = ? AND RUN_NUM = ?
        AND USEFLAG = 'Y'
    ) RI,
    (
    SELECT *
    FROM TB_CAM_RUNDIRECTION_I
    WHERE COMPANYID = ? AND RUN_NUM = ?
        AND RUNDIRECTION_CD = '9' --자가평가
        AND USEFLAG = 'Y'
    ) SELF,
    (
    SELECT RI1.COMPANYID, RI1.USERID, RI1.USERID_EXED, RI1.WEIGHT, BU1.NAME,BU1.EMPNO, START_DATE
    FROM TB_CAM_RUNDIRECTION_I RI1, TB_BA_USER BU1
    WHERE RI1.COMPANYID = BU1.COMPANYID AND RI1.USERID = BU1.USERID
        AND RI1.COMPANYID = ? AND RI1.RUN_NUM = ?
        AND RI1.RUNDIRECTION_CD = '1' --일차평가
        AND RI1.USEFLAG = 'Y'
    ) ONE,
    (
    SELECT RI1.COMPANYID, RI1.USERID, RI1.USERID_EXED, RI1.WEIGHT, BU1.NAME,BU1.EMPNO, START_DATE
    FROM TB_CAM_RUNDIRECTION_I RI1, TB_BA_USER BU1
    WHERE RI1.COMPANYID = BU1.COMPANYID AND RI1.USERID = BU1.USERID
        AND RI1.COMPANYID = ? AND RI1.RUN_NUM = ?
        AND RI1.RUNDIRECTION_CD = '2' --이차평가
        AND RI1.USEFLAG = 'Y'
    ) TWO,
    (SELECT COMPANYID, DIVISIONID, DVS_NAME, HIGH_DVSID FROM TB_BA_DIVISION WHERE COMPANYID = ?) BD
WHERE BU.COMPANYID = RI.COMPANYID(+) AND BU.USERID = RI.USERID(+)
    AND BU.COMPANYID = SELF.COMPANYID(+) AND BU.USERID = SELF.USERID_EXED(+)
    AND BU.COMPANYID = ONE.COMPANYID(+) AND BU.USERID = ONE.USERID_EXED(+)
    AND BU.COMPANYID = TWO.COMPANYID(+) AND BU.USERID = TWO.USERID_EXED(+)
    AND BU.COMPANYID = BD.COMPANYID(+) AND BU.DIVISIONID = BD.DIVISIONID(+)
    AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L' AND CL.USEFLAG(+) = 'Y'
    AND BU.COMPANYID = CJ.COMPANYID(+) AND BU.JOB = CJ.JOBLDR_NUM(+) AND CJ.JOBLDR_FLAG(+) = 'J' AND CJ.USEFLAG(+) = 'Y'
    AND BU.COMPANYID = ?
    AND BU.USEFLAG = 'Y'
ORDER BY DECODE(RI.USERID, null,  '', 'checked="1"')
		
    ]]></sql-query>
    
        <sql-query name="GET_CMPT_TARGET_LIST_V2"
		description="대상자 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_TARGET_LIST_V2
		--commnet :진단자 리스트
		
	SELECT ROW_NUMBER() OVER(ORDER BY RI.USEFLAG,BU.USERID ASC)-1 ROWNUMBER, DECODE(RI.USEFLAG, 'Y', 'checked="1"','') CHECKFLAG, DECODE(RI.USEFLAG, 'Y', 'Y','') EXCEL_CHECK
	, BU.EMPNO, BU.JOB, CJ.JOBLDR_NAME JOB_NM, CL.JOBLDR_NAME LEADERSHIP_NM, BU.LEADERSHIP, BD.DVS_NAME, BD.DIVISIONID, BD.HIGH_DVSID, BU.COMPANYID, BU.USERID, BU.NAME, SELF.WEIGHT SELF_WEIGHT, ONE.USERID ONE_USERID, ONE.NAME ONE_NAME, ONE.EMPNO ONE_EMPNO, ONE.WEIGHT ONE_WEIGHT
    ,COL.USERID COL_USERID, COL.WEIGHT COL_WEIGHT, COL.CNT COL_CNT, COL.EMPNO COL_EMPNO
    ,SUB.USERID SUB_USERID, SUB.WEIGHT SUB_WEIGHT, SUB.CNT SUB_CNT, SUB.EMPNO SUB_EMPNO
    ,TWO.USERID TWO_USERID,TWO.NAME TWO_NAME, TWO.EMPNO TWO_EMPNO, TWO.WEIGHT TWO_WEIGHT
    , SELF.START_DATE S_START_DATE, ONE.START_DATE O_START_DATE, TWO.START_DATE T_START_DATE
    FROM TB_BA_USER BU,  TB_CM_JOB_LDR_I CL, TB_CM_JOB_LDR_I CJ,
    (
    SELECT *
    FROM TB_CAM_RUNTARGET_I
    WHERE COMPANYID = ? AND RUN_NUM = ?
        AND USEFLAG = 'Y'
    ) RI,
    (
    SELECT *
    FROM TB_CAM_RUNDIRECTION_I
    WHERE COMPANYID = ? AND RUN_NUM = ?
        AND RUNDIRECTION_CD = '9' --자가평가
        AND USEFLAG = 'Y'
    ) SELF,
    (
    SELECT LISTAGG(RI1.USERID,',') WITHIN GROUP(ORDER BY RUNDIRECTION_CD) USERID,
    LISTAGG(BU1.EMPNO,',') WITHIN GROUP(ORDER BY RUNDIRECTION_CD) EMPNO, RI1.WEIGHT,
    RI1.COMPANYID, RI1.USERID_EXED, COUNT(*) CNT
    FROM TB_CAM_RUNDIRECTION_I RI1, TB_BA_USER BU1
    WHERE RI1.COMPANYID = BU1.COMPANYID AND RI1.USERID = BU1.USERID
        AND RI1.COMPANYID = ? AND RI1.RUN_NUM = ?
        AND RI1.RUNDIRECTION_CD = '3' --동표평가
        AND RI1.USEFLAG = 'Y'
    GROUP BY RI1.COMPANYID, RI1.USERID_EXED, RI1.WEIGHT
    ) COL,
    (
    SELECT LISTAGG(RI1.USERID,',') WITHIN GROUP(ORDER BY RUNDIRECTION_CD) USERID,
    LISTAGG(BU1.EMPNO,',') WITHIN GROUP(ORDER BY RUNDIRECTION_CD) EMPNO, RI1.WEIGHT,
    RI1.COMPANYID, RI1.USERID_EXED, COUNT(*) CNT
    FROM TB_CAM_RUNDIRECTION_I RI1, TB_BA_USER BU1
    WHERE RI1.COMPANYID = BU1.COMPANYID AND RI1.USERID = BU1.USERID
        AND RI1.COMPANYID = ? AND RI1.RUN_NUM = ?
        AND RI1.RUNDIRECTION_CD = '4' --부하평가
        AND RI1.USEFLAG = 'Y'
    GROUP BY RI1.COMPANYID, RI1.USERID_EXED, RI1.WEIGHT
    ) SUB,
    (
    SELECT RI1.COMPANYID, RI1.USERID, RI1.USERID_EXED, RI1.WEIGHT, BU1.NAME,BU1.EMPNO, START_DATE
    FROM TB_CAM_RUNDIRECTION_I RI1, TB_BA_USER BU1
    WHERE RI1.COMPANYID = BU1.COMPANYID AND RI1.USERID = BU1.USERID
        AND RI1.COMPANYID = ? AND RI1.RUN_NUM = ?
        AND RI1.RUNDIRECTION_CD = '1' --일차평가
        AND RI1.USEFLAG = 'Y'
    ) ONE,
    (
    SELECT RI1.COMPANYID, RI1.USERID, RI1.USERID_EXED, RI1.WEIGHT, BU1.NAME,BU1.EMPNO, START_DATE
    FROM TB_CAM_RUNDIRECTION_I RI1, TB_BA_USER BU1
    WHERE RI1.COMPANYID = BU1.COMPANYID AND RI1.USERID = BU1.USERID
        AND RI1.COMPANYID = ? AND RI1.RUN_NUM = ?
        AND RI1.RUNDIRECTION_CD = '2' --이차평가
        AND RI1.USEFLAG = 'Y'
    ) TWO,
    (SELECT COMPANYID, DIVISIONID, DVS_NAME, HIGH_DVSID FROM TB_BA_DIVISION WHERE COMPANYID = ?) BD
	WHERE BU.COMPANYID = RI.COMPANYID(+) AND BU.USERID = RI.USERID(+)
    AND BU.COMPANYID = SELF.COMPANYID(+) AND BU.USERID = SELF.USERID_EXED(+)
    AND BU.COMPANYID = COL.COMPANYID(+) AND BU.USERID = COL.USERID_EXED(+)
    AND BU.COMPANYID = SUB.COMPANYID(+) AND BU.USERID = SUB.USERID_EXED(+)
    AND BU.COMPANYID = ONE.COMPANYID(+) AND BU.USERID = ONE.USERID_EXED(+)
    AND BU.COMPANYID = TWO.COMPANYID(+) AND BU.USERID = TWO.USERID_EXED(+)
    AND BU.COMPANYID = BD.COMPANYID(+) AND BU.DIVISIONID = BD.DIVISIONID(+)
    AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L' AND CL.USEFLAG(+) = 'Y'
    AND BU.COMPANYID = CJ.COMPANYID(+) AND BU.JOB = CJ.JOBLDR_NUM(+) AND CJ.JOBLDR_FLAG(+) = 'J' AND CJ.USEFLAG(+) = 'Y'
    AND BU.COMPANYID = ?
    AND BU.USEFLAG = 'Y'
	ORDER BY DECODE(RI.USERID, null,  '', 'checked="1"'), BD.DVS_NAME
		
    ]]></sql-query>
    
    
     <sql-query name="GET_CMPT_LIST_USER"
		description="동료,부하 평가자 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_TARGET_USER
		--commnet :평가자 리스트
		
		     SELECT 
               ROW_NUMBER() OVER(ORDER BY BD.DVS_NAME ASC)-1 ROWNUMBER
             , BU.USERID
             , BU.NAME
             , BD.DVS_NAME
             , BU.EMPNO             
             , (select JOBLDR_NAME from TB_CM_JOB_LDR_I where JOBLDR_NUM = BU.JOB AND JOBLDR_FLAG = 'J' AND  COMPANYID = BU.COMPANYID) JOB_NAME
             , (select JOBLDR_NAME from TB_CM_JOB_LDR_I where JOBLDR_NUM = BU.LEADERSHIP AND JOBLDR_FLAG = 'L' AND COMPANYID = BU.COMPANYID) LEADERSHIP_NAME
             , DECODE(SD.USERID, NULL, '', 'checked="1"') CHECKFLAG
          FROM (SELECT DIVISIONID, DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = ?) BD,
               TB_BA_USER BU,
               (
               SELECT *
               FROM TB_BA_USER 
               WHERE USERID IN (]]><dynamic><![CDATA[${QUERY_WHERE}]]></dynamic><![CDATA[)
               ) SD
         WHERE BU.USERID = SD.USERID(+) AND BU.COMPANYID = SD.COMPANYID(+)
           AND BU.COMPANYID = ?
           AND BU.USERID != ?
           AND BU.DIVISIONID = BD.DIVISIONID(+)
           ORDER BY CHECKFLAG,ROWNUMBER ASC]]>
           </sql-query>
    
    <sql-query name="GET_CMPT_TARGET_USER"
		description="평가자 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_TARGET_USER
		--commnet :평가자 리스트
		
SELECT BU.USERID,
       BU.ID,
       BU.NAME,
       BD.DIVISIONID,
       BU.EMPNO,
       BU.JOB,
       (SELECT JOBLDR_NAME
          FROM TB_CM_JOB_LDR_I
         WHERE COMPANYID = BU.COMPANYID AND JOBLDR_NUM = BU.JOB AND JOBLDR_FLAG = 'J')
          JOB_NAME,
       BU.LEADERSHIP,
       (SELECT JOBLDR_NAME
          FROM TB_CM_JOB_LDR_I
         WHERE     COMPANYID = BU.COMPANYID
               AND JOBLDR_NUM = BU.LEADERSHIP
               AND JOBLDR_FLAG = 'L')
          LEADERSHIP_NAME,
       BD.DVS_NAME,
       BU.GRADE_NM,
       ROW_NUMBER () OVER (ORDER BY LVL) RNUM
FROM TB_BA_USER BU, (
    SELECT LEVEL LVL, COMPANYID, DIVISIONID, DVS_NAME, DVS_MANAGER
    FROM TB_BA_DIVISION       
    WHERE COMPANYID = ? AND USEFLAG = 'Y'
    START WITH DIVISIONID = ?
    CONNECT BY PRIOR COMPANYID = COMPANYID AND PRIOR HIGH_DVSID = DIVISIONID 
  ) BD
 WHERE     BU.COMPANYID = BD.COMPANYID
    AND BU.USERID = BD.DVS_MANAGER
    AND BU.COMPANYID = ?
    AND BU.USERID != ?
    AND BU.USEFLAG = 'Y'
    ]]></sql-query>
    
        <sql-query name="GET_CMPT_TARGET_ALL_MANAGER" description="전사 평가자 리스트" ><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_CMPT_TARGET_ALL_MANAGER
        --commnet : 전사 평가자 리스트
        
    SELECT BU.USERID
         , BU.ID
         , BU.NAME
         , BU.EMPNO
         , BU.JOB
         , (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = BU.COMPANYID AND JOBLDR_NUM = BU.JOB AND JOBLDR_FLAG = 'J') JOB_NAME
         , BU.LEADERSHIP
         , (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = BU.COMPANYID AND JOBLDR_NUM = BU.LEADERSHIP AND JOBLDR_FLAG = 'L') LEADERSHIP_NAME
         , BD.DVS_NAME
         , BU.GRADE_NM
         , ROW_NUMBER() OVER(ORDER BY BU.NAME) RNUM
      FROM TB_BA_USER BU, TB_BA_DIVISION BD
      WHERE BU.COMPANYID = BD.COMPANYID
       AND BU.userid = BD.DVS_MANAGER
       AND BU.COMPANYID = ?
       AND BU.USEFLAG = 'Y'
       AND BD.USEFLAG = 'Y'
    ]]></sql-query>
    
    
    
    <sql-query name="GET_CMPT_DIAG_LIST"
		description="역량진단 콤보 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_DIAG_LIST
		--commnet :역량진단 콤보 리스트
		
		SELECT RUN_NUM VALUE, CONCAT(RUN_NAME || ' [ 코드:',RUN_NUM ||' ]' )  TEXT ,BOSS_WEIGHT, COL_WEIGHT, SUB_WEIGHT, SELF_WEIGHT, YYYY, 
	        CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(RUN_START, 'YYYYMMDD') AND TO_CHAR(RUN_END, 'YYYYMMDD') THEN 'O'
	        ELSE 'X'
	        END PERIOD_FLAG,
	        CASE WHEN RUN_START > SYSDATE THEN 'Y'
            ELSE 'N'
            END RUN_START_YN
        FROM TB_CAM_RUN_L
        WHERE USEFLAG = 'Y' AND COMPANYID = ? AND DEL_YN = 'N' AND EVL_TYPE_CD = '1'
        ORDER BY RUN_NUM DESC
		
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_DIAG_OBJ_LIST"
		description="역량진단 콤보 리스트" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_DIAG_OBJ_LIST
		--commnet :역량진단 콤보 리스트
		
		SELECT RUN_NUM VALUE, CONCAT(RUN_NAME || ' [ 코드:',RUN_NUM ||' ]' )  TEXT ,BOSS_WEIGHT, COL_WEIGHT, SUB_WEIGHT, SELF_WEIGHT, YYYY, 
	        CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(RUN_START, 'YYYYMMDD') AND TO_CHAR(RUN_END, 'YYYYMMDD') THEN 'O'
	        ELSE 'X'
	        END PERIOD_FLAG,
	        CASE WHEN RUN_START > SYSDATE THEN 'Y'
            ELSE 'N'
            END RUN_START_YN
        FROM TB_CAM_RUN_L
        WHERE USEFLAG = 'Y' AND COMPANYID = ? AND DEL_YN = 'N'
        ORDER BY RUN_START DESC
		
    ]]></sql-query>
    
    <sql-query name="INSERT_CMPT_WEIGHT"
		description="진단 역량별 가중치 추가" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_CMPT_WEIGHT
		--commnet :진단 역량별 가중치 추가
		
		INSERT INTO TB_CAM_RUN_CMPT_WEIGHT(COMPANYID, RUN_NUM, CMPNUMBER, WEIGHT)
		VALUES(?, ?, ?, ?)
		
		
    ]]></sql-query>
    
    <sql-query name="DELETE_CMPT_WEIGHT"
		description="진단 역량별 가중치 삭제" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_CMPT_WEIGHT
		--commnet :진단 역량별 가중치 삭제
		
		DELETE FROM TB_CAM_RUN_CMPT_WEIGHT WHERE COMPANYID = ? AND RUN_NUM = ?
		
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_CAM_RUN"
		description="진단 수정" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_CAM_RUN
		--commnet :진단 수정
		
		UPDATE TB_CAM_RUN_L
		SET   USEFLAG = ?,
			  EVL_TYPE_CD = ?,
			  RUN_NAME = ?,
		      RUN_START = ?,
		      RUN_END = ?,
		      RESULT_OPEN_DATE = ?,
		      BOSS_WEIGHT = ?,
		      COL_WEIGHT = ?,
		      SUB_WEIGHT = ?,
		      SELF_WEIGHT = ?,
		      BOSS_YN = ?,
		      COL_YN = ?,
		      SUB_YN = ?,
		      SELF_YN = ?,
		      COL_HCNT =?,
		      SUB_HCNT =?,
		      BOSS_HCNT =?,
		      MODIFYTIME = SYSDATE,
		      MODIFIER = ?,
		      YYYY = ?,
		      DIAGNO_DIR_TYPE_CD = ?
		WHERE COMPANYID = ?
		AND   RUN_NUM = ?
		
		
    ]]></sql-query>
    
    <sql-query name="INSERT_CAM_RUN"
		description="실시 추가" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_CAM_RUN
		--commnet :진단 추가
		
		INSERT INTO TB_CAM_RUN_L(COMPANYID, RUN_NUM, EVL_TYPE_CD, RUN_NAME, RUN_START, RUN_END,RESULT_OPEN_DATE, BOSS_YN, COL_YN, SUB_YN, SELF_YN, CREATETIME, CREATER,
								BOSS_WEIGHT, COL_WEIGHT, SUB_WEIGHT, SELF_WEIGHT,COL_HCNT, SUB_HCNT,BOSS_HCNT, YYYY , DIAGNO_DIR_TYPE_CD, USEFLAG)
		VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
		
		
    ]]></sql-query>
    
    <sql-query name="UPDATE_CAM_RUN_CMPGROUP" description="실시관리 역량군 미사용업데이트"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : UPDATE_CAM_RUN_CMPGROUP

    
        UPDATE TB_CAM_RUN_CMPGROUP
        SET USEFLAG = 'N' , MODIFYTIME = SYSDATE , MODIFIER = ?
        WHERE COMPANYID = ?
        AND RUN_NUM = ?

        
    ]]></sql-query>
    
     <sql-query name="MERGE_TB_CAM_RUN_CMPGROUP" description="실시관리 역량군 머지"><![CDATA[
        --sql_file : ca-sqlset.xml
        --sql_name : MERGE_TB_CAM_RUN_CMPGROUP

    
        MERGE INTO TB_CAM_RUN_CMPGROUP A
		USING(
		    SELECT
		        ? COMPANYID,
		        ? RUN_NUM,
		        ? COMMONCODE,
		        'Y' USEFLAG,
		        ? CREATER
		    FROM DUAL
		) B
		ON (A.COMPANYID = B.COMPANYID AND A.RUN_NUM = B.RUN_NUM AND A.CMPGROUP = B.COMMONCODE)
		WHEN MATCHED THEN
		UPDATE SET 
		    A.USEFLAG = B.USEFLAG
		WHEN NOT MATCHED THEN
		    INSERT(A.COMPANYID, A.RUN_NUM, A.CMPGROUP, A.USEFLAG,A.CREATETIME,A.CREATER)
		    VALUES(B.COMPANYID, B.RUN_NUM, B.COMMONCODE, B.USEFLAG,SYSDATE,B.CREATER)

        
    ]]></sql-query>
    
    
    
    <sql-query name="GET_MAX_RUN_NUM"
		description="실시번호 채번" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_MAX_RUN_NUM
		--commnet :실시번호 채번
		
		SELECT NVL(MAX(RUN_NUM), 0) + 1
		FROM TB_CAM_RUN_L
		WHERE COMPANYID = ?
		
		
    ]]></sql-query>
    
      <sql-query name="GET_CMPT_WEIGHT_LIST"
		description="진단 가중치 목록" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_WEIGHT_LIST
		--commnet :진단 가중치 목록"
		
		SELECT RUN_NUM, A.CMPNUMBER, CMPNAME, NVL(WEIGHT, 100) WEIGHT
		FROM TB_CM_COMPETENCY A, TB_CAM_RUN_CMPT_WEIGHT B 
		WHERE B.COMPANYID(+) = ?
		AND   B.RUN_NUM(+) = ?
		AND   A.CMPNUMBER = B.CMPNUMBER(+)
		AND   A.USEFLAG='Y'
		
		
    ]]></sql-query>
    
    <sql-query name="GET_CMPT_ADMIN_LIST"
		description="진단 목록"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CMPT_ADMIN_LIST
		--commnet : 실시관리
	SELECT 
       ROW_NUMBER() OVER(ORDER BY USEFLAG DESC,CREATETIME DESC) ROWNUMBER,
       RUN_NUM,
       RUN_NAME,
       RUN_COMMENT,
       EVL_TYPE_CD,
       FUN_COMMON_CODE(A.COMPANYID, 'BA17', EVL_TYPE_CD)EVL_TYPE_STRING,
       FUN_COMMON_CODE(A.COMPANYID, 'BA19', DIAGNO_DIR_TYPE_CD) DIAGNOD_CD_STRING,    
       FUN_DATE_FORMAT(RUN_START, 1)||' ~ '|| FUN_DATE_FORMAT(RUN_END, 1) RUN_DATE,
       RUN_START,
       RUN_END,
       YYYY,
       BOSS_YN,
       COL_YN,
       SUB_YN,
       SELF_YN,
       BOSS_WEIGHT,
       COL_WEIGHT,
       SUB_WEIGHT,
       SELF_WEIGHT,
       COL_HCNT,
       SUB_HCNT,
       BOSS_HCNT,
       DEL_YN,
       RESULT_OPEN_DATE,
       DIAGNO_DIR_TYPE_CD,
       USEFLAG,
       (SELECT COUNT(*) 
        FROM TB_CAM_RUNTARGET_I 
        WHERE COMPANYID =A.COMPANYID
        AND RUN_NUM = A.RUN_NUM
        ) CNT,
               CASE WHEN RUN_START > SYSDATE THEN '대기'
                WHEN RUN_START <= SYSDATE AND RUN_END >= SYSDATE THEN'진행'
                WHEN RUN_END < SYSDATE THEN '완료'
            END RUN_STATE
        FROM TB_CAM_RUN_L A
        WHERE COMPANYID = ?
        AND DEL_YN = 'N'
		
		
    ]]></sql-query>
    
    
    <sql-query name="SELECT_CMPT_CMPGROUP_LIST"
		description="실시관리 사용 역량군 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_CMPT_CMPGROUP_LIST
		--commnet : 실시관리
		
			SELECT A.COMPANYID,
			       A.COMMONCODE,
			       B.RUN_NUM,
			       A.CMM_CODENAME,
			       A.CD_VALUE1,
			       DECODE(B.USEFLAG, 'Y', 'checked','') CHECKFLAG
			FROM TB_BA_COMMONCODE A,
			    (SELECT COMPANYID,
			            CMPGROUP,
			            RUN_NUM,
			            USEFLAG 
			     FROM TB_CAM_RUN_CMPGROUP 
			     WHERE RUN_NUM= ? 
			     ) B
			WHERE A.COMPANYID = B.COMPANYID(+)
			AND A.COMMONCODE = B.CMPGROUP(+)  
			AND A.STANDARDCODE = 'C102'
			AND A.COMPANYID = ? 
			AND A.USEFLAG = 'Y'
    ]]></sql-query>
    
    
     <sql-query name="SELECT_RUN_TARGET_LIST"
		description="대상자관리 대상자 목록 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_RUN_TARGET_LIST
		--commnet : 대상자관리
		SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
			SELECT  
				A.COMPANYID,
		        A.RUN_NUM,
		        A.USERID,
		        A.DIVISION,
		        B.NAME,
		        B.ID,
		        B.EMPNO,
		        B.GRADE_NUM,
		        B.GRADE_NM,
            (SELECT CD_VALUE1 FROM TB_BA_COMMONCODE WHERE COMPANYID = A.COMPANYID AND STANDARDCODE = 'BA15' AND COMMONCODE = A.GRADE_NUM and USEFLAG = 'Y' AND DEL_YN = 'N') GRADE_DIV_NM,
		        A.JOB,
		        (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = A.JOB AND JOBLDR_FLAG = 'J') JOB_NAME,
		        A.LEADERSHIP,
		        (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = A.LEADERSHIP AND JOBLDR_FLAG = 'L') LEADERSHIP_NAME,
		        (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = B.COMPANYID AND DIVISIONID = A.DIVISION) DVS_NAME,
		        B.DEL_YN,
		        '' USEFLAG 
			FROM TB_CAM_RUNTARGET_I A , TB_BA_USER B
			WHERE A.USERID = B.USERID
			AND A.COMPANYID = B.COMPANYID
			AND A.COMPANYID =?
			AND A.RUN_NUM = ?
			AND B.DEL_YN = 'N'
			AND A.USEFLAG = 'Y'
			AND B.EMP_STS_CD ='10'
		)SL
		WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic>
</sql-query>
 
      <sql-query name="SELECT_NOT_RUN_TARGET_LIST"
		description="대상자관리 미대상자 목록 리스트"><![CDATA[
 		SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
		SELECT
		    USERID,
		    NAME,
		    ID,
		    EMPNO,
		    DIVISIONID,
		    GRADE_NUM,
		    GRADE_NM,
            (SELECT CD_VALUE1 FROM TB_BA_COMMONCODE WHERE COMPANYID = A.COMPANYID AND STANDARDCODE = 'BA15' AND COMMONCODE = A.GRADE_NUM and USEFLAG = 'Y' AND DEL_YN = 'N') GRADE_DIV_NM,
		    JOB,
		    (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = A.JOB AND JOBLDR_FLAG = 'J') JOB_NAME,
		    LEADERSHIP,
		    (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = A.LEADERSHIP AND JOBLDR_FLAG = 'L') LEADERSHIP_NAME,
		    (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = A.COMPANYID AND DIVISIONID = A.DIVISIONID) DVS_NAME,
		    '' USEFLAG,
		    DEL_YN
		FROM TB_BA_USER A
		WHERE USEFLAG = 'Y'
		AND COMPANYID = ?
		AND EMP_STS_CD ='10'
		AND USERID NOT IN (
		        SELECT USERID
		        FROM TB_CAM_RUNTARGET_I 
		        WHERE USEFLAG = 'Y'
		        AND COMPANYID = A.COMPANYID
		        AND RUN_NUM = ?
		        )
		)SL
		WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic></sql-query>    
    
    
     <sql-query name="TB_RUN_TARGET_YN"
		description="대상자관리 대상자 미사용처리"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : TB_RUN_TARGET_YN
		--commnet : 대상자관리 저장
	
		UPDATE TB_CAM_RUNTARGET_I
		SET USEFLAG = 'N'
		WHERE COMPANYID = ?
		AND RUN_NUM =?

    ]]></sql-query>
    
    
    <sql-query name="TB_RUN_TARGET_MAP"
		description="대상자관리 대상자 목록 저장"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : TB_RUN_TARGET_MAP
		--commnet : 대상자관리 저장
	
		MERGE INTO TB_CAM_RUNTARGET_I A
        USING(
            SELECT
                ? COMPANYID,
                ? RUN_NUM,
                ? USEFLAG,
                ? DIVISION,
                ? JOB,
                ? LEADERSHIP,
                ? USERID,
                ? CREATER,
                ? GRADE_NUM
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.RUN_NUM = B.RUN_NUM AND A.USERID = B.USERID )
        WHEN MATCHED THEN
        UPDATE SET 
            A.USEFLAG = B.USEFLAG,
            A.DIVISION = B.DIVISION,
            A.JOB = B.JOB,
            A.LEADERSHIP = B.LEADERSHIP,
            A.MODIFIER = B.CREATER,
            A.MODIFYTIME = SYSDATE,
            A.GRADE_NUM = B.GRADE_NUM
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.RUN_NUM, A.USERID, A.USEFLAG, A.DIVISION, A.LEADERSHIP, A.JOB,A.CREATER,A.CREATETIME,A.GRADE_NUM)
            VALUES(B.COMPANYID, B.RUN_NUM, B.USERID, B.USEFLAG, B.DIVISION, B.LEADERSHIP, B.JOB,B.CREATER,SYSDATE,B.GRADE_NUM)

    ]]></sql-query>
    
     <sql-query name="SELECT_RUN_DIRECTION_LIST"
		description="방향설정  리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_RUN_DIRECTION_LIST
		--commnet : 방향설정
		SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
        SELECT  A.COMPANYID,
        A.RUN_NUM,
        A.USERID,
        A.DIVISION,
        B.NAME,
        B.ID,
        B.EMPNO,
        B.GRADE_NUM,
        B.GRADE_NM,
        A.JOB,
        (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = B.JOB AND JOBLDR_FLAG = 'J') JOB_NAME,
        A.LEADERSHIP,
        (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = B.LEADERSHIP AND JOBLDR_FLAG = 'L') LEADERSHIP_NAME,
        (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = B.COMPANYID AND DIVISIONID = B.DIVISIONID) DVS_NAME,
        C.BOSS_YN,
        C.COL_YN,
        C.SUB_YN,
        C.SELF_YN,
        C.BOSS_HCNT,
        C.COL_HCNT,
        C.SUB_HCNT,
        NVL(D.SELF_CNT,0) SELF_CNT,
        NVL(D.BOSS_CNT,0) BOSS_CNT,
        NVL(D.COL_CNT,0) COL_CNT,
        NVL(D.SUB_CNT,0) SUB_CNT,
        B.DEL_YN, 
        A.USEFLAG 
        FROM TB_CAM_RUNTARGET_I A,TB_BA_USER B, TB_CAM_RUN_L C,
         (SELECT COMPANYID, RUN_NUM, USERID_EXED
            , NVL(SUM(SELF_CNT), 0) SELF_CNT
            , NVL(SUM(BOSS_CNT), 0) BOSS_CNT
            , NVL(SUM(COL_CNT), 0) COL_CNT
            , NVL(SUM(SUB_CNT), 0) SUB_CNT
          FROM(
             SELECT COMPANYID, RUN_NUM, USERID_EXED
                , DECODE(RUNDIRECTION_CD, '1', 1) SELF_CNT
                , DECODE(RUNDIRECTION_CD, '4', 1) BOSS_CNT
                , DECODE(RUNDIRECTION_CD, '3', 1) COL_CNT
                , DECODE(RUNDIRECTION_CD, '2', 1) SUB_CNT
            FROM TB_CAM_RUNDIRECTION_I 
            WHERE COMPANYID =? AND RUN_NUM = ?
                AND USEFLAG ='Y'
            )
          GROUP BY COMPANYID, RUN_NUM, USERID_EXED
        ) D
        WHERE A.USERID = B.USERID
        AND A.COMPANYID = B.COMPANYID
        AND A.COMPANYID = C.COMPANYID
        AND A.RUN_NUM = C.RUN_NUM
        AND A.COMPANYID = D.COMPANYID(+)
        AND A.RUN_NUM = D.RUN_NUM(+)
        AND A.USERID = D.USERID_EXED(+)
        AND A.COMPANYID = ?
        AND A.RUN_NUM = ?
        AND A.USEFLAG = 'Y'
        AND B.DEL_YN = 'N'
        AND C.USEFLAG = 'Y'
        AND B.USEFLAG = 'Y'
       ) SL
        WHERE 1=1
        ]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
		]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic>
    </sql-query>
    
    <sql-query name="SELECT_RUN_EMPOLYEE_LIST"
		description="방향설정  임직원 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_RUN_EMPOLYEE_LIST
		--commnet : 방향설정
		SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
			SELECT 
			       A.USERID,
			       A.ID,
			       A.NAME,
			       A.JOB,
			       A.LEADERSHIP,
			       A.DIVISIONID,
			       A.GRADE_NUM,
			       A.GRADE_NM,
			       A.EMPNO,
			       B.DVS_NAME, 
			       A.USEFLAG,
			       A.DEL_YN
			FROM TB_BA_USER A,TB_BA_DIVISION B
			WHERE A.COMPANYID = B.COMPANYID
			AND A.DIVISIONID = B.DIVISIONID
			AND A.COMPANYID = ?
			AND A.USERID NOT IN(SELECT USERID FROM TB_CAM_RUNDIRECTION_I WHERE COMPANYID = A.COMPANYID AND RUN_NUM =? AND USERID_EXED = ? AND USEFLAG='Y' )
			AND A.USERID != ?
			AND A.DEL_YN = 'N'
			AND A.USEFLAG = 'Y'
			AND A.EMP_STS_CD ='10'
		)SL
		WHERE 1=1
    ]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic></sql-query>   
    
    <sql-query name="SELECT_RUN_DIR_USER_LIST"
		description="방향설정  진단자 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_RUN_DIR_USER_LIST
		--commnet : 방향설정
		SELECT 
		    A.COMPANYID,
		    A.RUN_NUM,
		    A.USERID,
		    A.USERID_EXED,
		    A.RUNDIRECTION_CD,
		    B.BOSS_YN,
		    B.COL_YN,
		    B.SELF_YN,
		    B.BOSS_HCNT,
		    B.COL_HCNT,
		    B.SUB_HCNT,
		    C.NAME,
		    C.EMPNO,
		    C.GRADE_NM,
		    (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = C.COMPANYID AND DIVISIONID = C.DIVISIONID) DVS_NAME,
		    A.USEFLAG
		FROM TB_CAM_RUNDIRECTION_I A,
		     TB_CAM_RUN_L B,
		     TB_BA_USER C
		WHERE A.COMPANYID = B.COMPANYID
		AND A.RUN_NUM = B.RUN_NUM
		AND A.USERID = C.USERID
		AND A.COMPANYID = C.COMPANYID
		AND A.COMPANYID = ?
		AND A.USERID_EXED = ?
		AND A.RUNDIRECTION_CD = ?
		AND A.USEFLAG = 'Y'
		AND B.RUN_NUM = ?
		AND B.USEFLAG = 'Y'
		AND B.DEL_YN = 'N'
		AND C.USEFLAG = 'Y'
		AND C.DEL_YN = 'N' 
    ]]></sql-query>
    
     <sql-query name="TB_RUN_DIR_USER_UPDATE"
		description="방향설정  진단자 사용처리"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : TB_RUN_DIR_USER_UPDATE
		--commnet : 방향설정
		UPDATE TB_CAM_RUNDIRECTION_I 
		SET USEFLAG = 'N'
		WHERE COMPANYID = ?
		AND RUN_NUM = ?
		AND USERID_EXED =?
		AND RUNDIRECTION_CD = ?
    ]]></sql-query>
    
    
    <sql-query name="MERGE_TB_RUN_DIR_MAP"
		description="방향설정  진단자 사용처리"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : MERGE_TB_RUN_DIR_MAP
		--commnet : 방향설정
		
		MERGE INTO TB_CAM_RUNDIRECTION_I A
        USING(
            SELECT
                ? COMPANYID,
                ? RUN_NUM,
                ? USERID,
                ? USERID_EXED,
                ? RUNDIRECTION_CD,
                ? USEFLAG,
                ? CREATER
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.RUN_NUM = B.RUN_NUM AND A.USERID = B.USERID AND A.USERID_EXED = B.USERID_EXED )
        WHEN MATCHED THEN
        UPDATE SET
       	    A.RUNDIRECTION_CD = B.RUNDIRECTION_CD,
            A.USEFLAG = B.USEFLAG,
            A.MODIFIER = B.CREATER,
            A.MODIFYTIME = SYSDATE
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.RUN_NUM, A.USERID, A.USERID_EXED, A.USEFLAG, A.RUNDIRECTION_CD,A.CREATER,A.CREATETIME)
            VALUES(B.COMPANYID, B.RUN_NUM, B.USERID, B.USERID_EXED, B.USEFLAG, B.RUNDIRECTION_CD,B.CREATER,SYSDATE)
            
    ]]></sql-query>
    

 
    <sql-query name="GET_MAX_CMP_NUM"
		description="역량번호 채번"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_MAX_CMP_NUM
		--commnet :역량번호 채번
		
		SELECT SEQ_CMPNUMBER.NEXTVAL FROM DUAL
    ]]></sql-query>
    
    
    <sql-query name="UDPATE_SOCIALEXCEPTION_FLAG"
		description="일관성 척도 행동지표 예외처리"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UDPATE_SOCIALEXCEPTION_FLAG
		--commnet :일관성 척도 행동지표 예외처리
		
		UPDATE TB_CM_BHV_INDICATOR
		SET EXCEPTION_FLAG = ?
		WHERE COMPANYID = ?
		
    ]]></sql-query>
    
    <sql-query name="GET_CONSISTENCY_LIST"
		description="일관성 척도 행동지표 가능 목록"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_CONSISTENCY_LIST
		--commnet :일관성 척도 행동지표 가능 목록
		
		SELECT NULL VALUE, '선택' TEXT
		FROM DUAL
		UNION ALL
		SELECT
		*
		FROM
		(
			SELECT BHV_INDC_NUM VALUE, BHV_INDICATOR TEXT
			FROM TB_CM_BHV_INDICATOR
			WHERE COMPANYID = ? 
			AND      (EXCEPTION_FLAG IS NULL OR EXCEPTION_FLAG = 'N')
			ORDER BY BHV_INDICATOR ASC
		)
		
    ]]></sql-query>
    
    <sql-query name="MERGE_SUBELEMENT"
		description="하위요소 병합"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : MERGE_SUBELEMENT
		--commnet :하위요소 병합
		
		MERGE INTO TB_CM_SUBELEMENT A
		            USING(
		                SELECT
		                    ? COMPANYID, 
		                    ? CMPNUMBER,
		                    ? SUBELEMENT_NUM,
		                    ? SUBELEMENT_NAME,
		                    ? SUBELEMENT_DESC,
		                    ? BSNS_REQR_LEVEL,
		                    SYSDATE MODIFYTIME,
		                    ? MODIFIER
		                FROM DUAL
		            )B
		            ON(
		                    A.COMPANYID = B.COMPANYID
		                AND A.CMPNUMBER = B.CMPNUMBER
		                AND A.SUBELEMENT_NUM = B.SUBELEMENT_NUM
		            )
		WHEN NOT MATCHED THEN
		INSERT(COMPANYID, CMPNUMBER, SUBELEMENT_NUM, SUBELEMENT_NAME, SUBELEMENT_DESC, BSNS_REQR_LEVEL, USEFLAG, CREATETIME, CREATER)
		VALUES
		(B.COMPANYID, B.CMPNUMBER, 
		(SELECT NVL(MAX(SUBELEMENT_NUM),0) + 1 FROM TB_CM_SUBELEMENT A WHERE COMPANYID = ? AND  CMPNUMBER = ?), 
		B.SUBELEMENT_NAME, B.SUBELEMENT_DESC, B.BSNS_REQR_LEVEL, 'Y', B.MODIFYTIME, B.MODIFIER)
		WHEN MATCHED THEN
		UPDATE
		SET SUBELEMENT_NAME = B.SUBELEMENT_NAME,
		    SUBELEMENT_DESC = B.SUBELEMENT_DESC,
		    BSNS_REQR_LEVEL = B.BSNS_REQR_LEVEL,
		    MODIFYTIME = B.MODIFYTIME,
		    MODIFIER = B.MODIFIER
    ]]></sql-query>
    
    <sql-query name="DELETE_SUBELEMENT"
		description="하위요소 삭제"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_SUBELEMENT
		--commnet :하위요소 삭제 
		
		DELETE FROM TB_CM_SUBELEMENT 
        WHERE COMPANYID = ?
        AND   CMPNUMBER  = ?
        AND   (SUBELEMENT_NUM) NOT IN 
                     (SELECT
                     SUBELEMENT_NUM
                     FROM   TB_CM_BHV_INDICATOR
                     WHERE COMPANYID = ?
                     AND   CMPNUMBER = ?)
    ]]></sql-query>
    
    <sql-query name="GET_SUBELEMENT_ALL_LIST"
		description="하위요소 모든 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SUBELEMENT_ALL_LIST
		--commnet :하위요소 모든 리스트
		
		SELECT ROWNUM ROWNUMBER, CMPNUMBER, SUBELEMENT_NUM, SUBELEMENT_NAME,
					SUBELEMENT_NUM VALUE, SUBELEMENT_NAME TEXT,  SUBELEMENT_DESC
		FROM TB_CM_SUBELEMENT
		WHERE COMPANYID = ?

    ]]></sql-query>
    
    <sql-query name="GET_SUBELEMENT_LIST"
		description="하위요소 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_SUBELEMENT_LIST
		--commnet :하위요소 리스트 
		
		SELECT ROWNUM ROWNUMBER, SUBELEMENT_NUM, SUBELEMENT_NAME,  SUBELEMENT_DESC, BSNS_REQR_LEVEL
		FROM TB_CM_SUBELEMENT
		WHERE COMPANYID = ?
		AND   	CMPNUMBER = ?

    ]]></sql-query>
    
    <sql-query name="MERGE_BHV_INDICATOR"
		description="행동지표 저장"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : "MERGE_BHV_INDICATOR"
		
		MERGE INTO TB_CM_BHV_INDICATOR A
		        USING(
		            SELECT
		            ? COMPANYID,
		            ? CMPNUMBER,
		            ? BHV_INDC_NUM,	           
		            'Y' SELF_FLAG,
		            ? BHV_INDICATOR,
		            UPPER(?) USEFLAG,
		            ? USERNUM
		            FROM DUAL
		        )B ON (
		              A.COMPANYID = B.COMPANYID
		          AND A.CMPNUMBER = B.CMPNUMBER
		          AND A.BHV_INDC_NUM = B.BHV_INDC_NUM
		        )
		WHEN MATCHED THEN
		UPDATE
		SET BHV_INDICATOR = B.BHV_INDICATOR,
		    USEFLAG = B.USEFLAG,
		    MODIFYTIME = SYSDATE,
		    MODIFIER = B.USERNUM
		WHEN NOT MATCHED THEN 
		INSERT(COMPANYID, CMPNUMBER, BHV_INDC_NUM, SELF_FLAG, BHV_INDICATOR, USEFLAG, 
					CREATETIME, CREATER) 
		VALUES(
		B.COMPANYID, 
		B.CMPNUMBER, 
		B.BHV_INDC_NUM,
		B.SELF_FLAG, 
		B.BHV_INDICATOR, 
		B.USEFLAG,
		SYSDATE,
		B.USERNUM
		)

    ]]></sql-query>
    
    <sql-query name="MERGE_RUN_DIRECTION"
		description="역량진단 방향설정 저장"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : MERGE_RUN_TARGET
		
		MERGE INTO TB_CAM_RUNDIRECTION_I A
		           USING(
		                SELECT 
		                ? COMPANYID,
		                ? RUN_NUM,
		                ? USERID_EX,
		                ? USERID_EXED,
		                '4' RUNDIRECTION_CD,
		                SYSDATE CREATETIME,
		                ? CREATER
		                FROM DUAL
		           ) B  
		           ON (
		                 A.COMPANYID    = B.COMPANYID
		             AND A.RUN_NUM      = B.RUN_NUM
		             AND A.USERID_EX    = B.USERID_EX
		             AND A.USERID_EXED  = B.USERID_EXED
		            )
		WHEN NOT MATCHED THEN
		INSERT (COMPANYID, RUN_NUM, USERID_EX, USERID_EXED, RUNDIRECTION_CD, CREATETIME, CREATER)
		VALUES(
		B.COMPANYID,
		B.RUN_NUM,
		B.USERID_EX,
		B.USERID_EXED,
		B.RUNDIRECTION_CD,
		B.CREATETIME,
		B.CREATER
		)
    ]]></sql-query>
    
    <sql-query name="MERGE_RUN_TARGET"
		description="역량진단 대상자 저장"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : MERGE_RUN_TARGET
		
		MERGE INTO TB_CAM_RUNTARGET_I A
		           USING(
		                SELECT 
		                ? COMPANYID,
		                ? RUN_NUM,
		                ? USERID,
		                DIVISIONID DIVISION,
		                JOB,
		                LEADERSHIP,
		                'Y' USEFLAG,
		                SYSDATE CREATETIME,
		                ? CREATER
		                FROM TB_BA_USER
		                WHERE USERID = 22
		           ) B  
		           ON (
		                 A.COMPANYID = B.COMPANYID
		             AND A.RUN_NUM = B.RUN_NUM
		             AND A.USERID = B.USERID
		            )
		WHEN NOT MATCHED THEN
		INSERT (COMPANYID, RUN_NUM, USERID, DIVISION, JOB, LEADERSHIP, USEFLAG, CREATETIME, CREATER)
		VALUES(
		B.COMPANYID,
		B.RUN_NUM,
		B.USERID,
		B.DIVISION,
		B.JOB,
		B.LEADERSHIP,
		B.USEFLAG,
		B.CREATETIME,
		B.CREATER
		)
    ]]></sql-query>
    
     <sql-query name="GET_QUESTION_SAVE_CNT"
		description="행동지표 max값"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_QUESTION_SAVE_CNT
		
		SELECT NVL(MAX(QUESTION_SEQ), 0)
        FROM TB_CAR_INDC_SCORE
        WHERE COMPANYID = ?
        AND   RUN_NUM = ?
        AND   USERID_EX = ?
        AND   SCORE != 0
    ]]></sql-query>
    
    <sql-query name="GET_MAX_BHV_INDCNUM"
		description="행동지표 max값"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_MAX_BHV_INDCNUM
		
		SELECT SEQ_BHV_INDC_NUM.NEXTVAL FROM DUAL
    ]]></sql-query>
    
    
    <sql-query name="UDPATE_CM_INDICATOR"
		description="행동지표 수정"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : UDPATE_CM_INDICATOR
		
		UPDATE TB_CM_BHV_INDICATOR
        SET  BHV_INDICATOR = ?,
               USEFLAG = ?,
               MODIFYTIME = SYSDATE,
               MODIFIER = ?,               
               EXCEPTION_FLAG = ?
        WHERE  COMPANYID = ?
        AND    CMPNUMBER = ?
        AND    BHV_INDC_NUM = ?
        
        
        
        
    ]]></sql-query>
    
    <sql-query name="OPERATOR_UDPATE_CM_INDICATOR"
		description="행동지표 수정(고객사)"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : OPERATOR_UDPATE_CM_INDICATOR
	 
        
        
                  MERGE INTO TB_CM_BHV_INDICATOR A
        USING(
            SELECT 
               ? BHV_INDICATOR,
               ? USEFLAG,
                SYSDATE MODIFYTIME,
                ? MODIFIER,
                ? COMPANYID,
                ? CMPNUMBER,
                ? BHV_INDC_NUM
            FROM DUAL
           ) B ON (A.BHV_INDC_NUM = B.BHV_INDC_NUM AND A.CMPNUMBER = B.CMPNUMBER AND A.COMPANYID = B.COMPANYID )
           WHEN MATCHED THEN
           UPDATE
             SET  BHV_INDICATOR = B.BHV_INDICATOR,
                  USEFLAG = B.USEFLAG,
                  MODIFYTIME = B.MODIFYTIME,
                  MODIFIER = B.MODIFIER
           WHEN NOT MATCHED THEN
           INSERT(COMPANYID, CMPNUMBER, BHV_INDC_NUM, BHV_INDICATOR, USEFLAG, MODIFYTIME, MODIFIER) 
           VALUES(B.COMPANYID, B.CMPNUMBER, SEQ_BHV_INDC_NUM.NEXTVAL, B.BHV_INDICATOR, B.USEFLAG, B.MODIFYTIME, B.MODIFIER)
        
    ]]></sql-query>
    
    <sql-query name="INSERT_CM_INDICATOR"
		description="행동지표 추가"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_CM_INDICATOR
		
		INSERT INTO TB_CM_BHV_INDICATOR(COMPANYID, CMPNUMBER, BHV_INDC_NUM, SELF_FLAG, BHV_INDICATOR, 
        USEFLAG, CREATETIME, CREATER, EXCEPTION_FLAG)
        VALUES
        (
        ?,
        ?,
        ?,
        'Y',
        ?,
        ?,
        SYSDATE,
        ?,
        ?
        )
    ]]></sql-query>
    
    <sql-query name="OPERATOR_INSERT_CM_INDICATOR"
		description="행동지표 추가(고객사)"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : OPERATOR_INSERT_CM_INDICATOR
		
		INSERT INTO TB_CM_BHV_INDICATOR(COMPANYID, CMPNUMBER, BHV_INDC_NUM, SELF_FLAG, BHV_INDICATOR, 
        USEFLAG, CREATETIME, CREATER, EXCEPTION_FLAG)
        VALUES
        (
        ?,
        ?,
        ?,
        'Y',
        ?,
        ?,
        SYSDATE,
        ?,
        ?
        )
    ]]></sql-query>    
    
    
    
    <sql-query name="GET_COMPETENCY_COMBO_LIST"
		description="역량 콤보 리스트"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_COMPETENCY_COMBO_LIST
		
		SELECT CMPNUMBER VALUE, CMPNAME TEXT, CMPGROUP, CMPGROUP_S
		FROM TB_CM_COMPETENCY
		WHERE USEFLAG = 'Y'
		AND COMPANYID = ?
		ORDER  BY CMPNAME
    ]]></sql-query>
    
    <sql-query name="GET_COMPETENCY_GROUP_COMBO_LIST"
        description="역량 콤보 리스트"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_COMPETENCY_GROUP_COMBO_LIST
    
        SELECT CMPNUMBER VALUE, FUN_COMMON_CODE(A.COMPANYID, 'C102', CMPGROUP)||'>'||CMPNAME TEXT, CMPGROUP, CMPGROUP_S
        FROM TB_CM_COMPETENCY A
        WHERE USEFLAG = 'Y'
        AND COMPANYID = ?
        ORDER  BY CMPGROUP, CMPNAME
    ]]></sql-query>
    
    <sql-query name="GET_MY_COMPETENCY_GROUP_COMBO_LIST"
        description="나의 역량 콤보 리스트"><![CDATA[

        --sql_file : ca-sqlset.xml
        --sql_name : GET_MY_COMPETENCY_GROUP_COMBO_LIST
    
SELECT DISTINCT FUN_COMMON_CODE(COMPANYID, 'C102', CMPGROUP)||'>'||CMPNAME TEXT, CMPNUMBER VALUE, CMPGROUP
FROM(
    /* 자신이 등록한 역량 목록 */
    SELECT HI.COMPANYID, CMPNAME, HI.CMPNUMBER, CC.CMPGROUP
    FROM(
        SELECT SOC.COMPANYID, SOC.CMPNUMBER
        FROM TB_BA_SBJCT S,
            TB_BA_SBJCT_OPEN SO,
            TB_BA_SBJCT_OPEN_CLASS SOC,
            TB_BA_USER U,
            TB_BA_DIVISION D1
        WHERE S.SUBJECT_NUM = SO.SUBJECT_NUM
            AND SO.OPEN_NUM = SOC.OPEN_NUM
            AND SOC.USERID = U.USERID
            AND U.COMPANYID = D1.COMPANYID
            AND U.DIVISIONID = D1.DIVISIONID
            AND S.COMPANYID = ?
            AND SOC.USERID = ?
            AND CMPNUMBER IS NOT NULL
        UNION ALL
        SELECT EAS.COMPANYID, EAS.CMPNUMBER
        FROM TB_EM_ALW_STD EAS,
            TB_EM_ALW_STD_USER EASU,
            TB_BA_USER U,
            TB_BA_DIVISION D1
        WHERE EAS.COMPANYID = ?
            AND EAS.COMPANYID = EASU.COMPANYID
            AND EAS.ALW_STD_SEQ = EASU.ALW_STD_SEQ
            AND EASU.USERID = U.USERID
            AND U.COMPANYID = D1.COMPANYID
            AND U.DIVISIONID = D1.DIVISIONID
            AND EASU.USERID = ?
            AND EAS.CMPNUMBER IS NOT NULL
        ) HI, TB_CM_COMPETENCY CC
    WHERE HI.COMPANYID = CC.COMPANYID AND HI.CMPNUMBER = CC.CMPNUMBER
    UNION ALL    
    -- 공통역량
    SELECT CC.COMPANYID, CC.CMPNAME, CC.CMPNUMBER, CMPGROUP
    FROM TB_CM_COMPETENCY CC, TB_BA_COMMONCODE BC
    WHERE CC.CMPGROUP = BC.COMMONCODE AND BC.STANDARDCODE = 'C102' AND BC.CD_VALUE1 = 'Y'
        AND CC.USEFLAG = 'Y' AND CC.DEL_YN = 'N'
        AND CC.COMPANYID = ?
    UNION ALL
    -- 리더십역량
    SELECT DISTINCT CC.COMPANYID, CC.CMPNAME, CC.CMPNUMBER, CC.CMPGROUP
    FROM TB_CM_JOB_LDR_I CJ, TB_CM_JOBLER_CMPT_R CJC,TB_CM_COMPETENCY CC
    WHERE CJ.COMPANYID = CJC.COMPANYID AND CJ.JOBLDR_NUM = CJC.JOBLDR_NUM AND CJ.USEFLAG = 'Y' AND CJ.DEL_YN = 'N' AND CJC.USEFLAG = 'Y' 
        AND CJC.COMPANYID = CC.COMPANYID AND CJC.CMPNUMBER = CC.CMPNUMBER AND CC.USEFLAG = 'Y' AND CC.DEL_YN = 'N'
        AND (CC.COMPANYID, CJ.JOBLDR_NUM) IN (
            SELECT BU.COMPANYID, BU.LEADERSHIP 
            FROM TB_BA_USER BU
            WHERE BU.USERID = ?
        )
    UNION ALL
    -- 직무역량
    SELECT DISTINCT CC.COMPANYID, CC.CMPNAME, CC.CMPNUMBER, CC.CMPGROUP 
    FROM TB_CM_JOB_LDR_I CJ, TB_CM_JOBLER_CMPT_R CJC,TB_CM_COMPETENCY CC
    WHERE CJ.COMPANYID = CJC.COMPANYID AND CJ.JOBLDR_NUM = CJC.JOBLDR_NUM AND CJ.USEFLAG = 'Y' AND CJ.DEL_YN = 'N' AND CJC.USEFLAG = 'Y' 
        AND CJC.COMPANYID = CC.COMPANYID AND CJC.CMPNUMBER = CC.CMPNUMBER AND CC.USEFLAG = 'Y' AND CC.DEL_YN = 'N'
        AND (CC.COMPANYID, CJ.JOBLDR_NUM) IN (
            SELECT BU.COMPANYID, BU.JOB
            FROM TB_BA_USER BU
            WHERE BU.USERID = ?
        ) 
    )
ORDER BY CMPGROUP, TEXT
    ]]></sql-query>

    <sql-query name="USER_DIAG_RESULT_LIST"
		description="역량진단 결과"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : USER_DIAG_RESULT_LIST
		
		SELECT B.CMPNAME, GETTING_SOCRE
		FROM
		(
		    SELECT  CMPNUMBER, ROUND(AVG(SCORE),2) GETTING_SOCRE
		    FROM TB_CAR_CMPT_SCORE A
		    WHERE A.COMPANYID = ?
		    AND   A.RUN_NUM = ?
		    AND   A.USERID_EX = ?
		GROUP BY CMPNUMBER
		)A,
		TB_CM_COMPETENCY B
		WHERE A.CMPNUMBER = B.CMPNUMBER
    
    ]]></sql-query>
    <sql-query name="USER_RUN_MAP_SELECT"
		description="사용자의 역량진단 목록"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : USER_RUN_MAP_SELECT
		
		SELECT *
		FROM
		(
		SELECT A.RUN_NUM, RUN_NAME, FUN_DATE_FORMAT(RUN_START, 1)||'~'||FUN_DATE_FORMAT(RUN_END, 1) RUN_DATE, CURRENT_CLASS, 
		       DECODE(C.CMPL_FLAG, 'N', '실시 전', NULL, '실시 전', '진단완료') DIAG_STATE_NAME,  FUN_DATE_FORMAT(CMPL_DATE, 1) CMPL_DATE,
		       CASE WHEN SYSDATE >= RUN_START AND SYSDATE <= RUN_END THEN '1'
		            WHEN SYSDATE < RUN_START THEN '2'
		            WHEN SYSDATE > RUN_END THEN '3' 
		       END IMPLEMENT_FLAG
		FROM TB_CAM_RUN_L A, TB_CAM_RUNTARGET_I B,TB_CAM_RUNDIRECTION_I C
		WHERE A.COMPANYID = B.COMPANYID
		AND   A.RUN_NUM = B.RUN_NUM 
		AND   B.COMPANYID = C.COMPANYID
		AND   B.RUN_NUM = C.RUN_NUM
		AND   B.USERID = C.USERID
		AND   B.COMPANYID = ?
		AND   B.USERID = ?
		ORDER BY CMPL_DATE DESC, RUN_END DESC
		) WHERE ROWNUM BETWEEN ? * 50 + 1 AND (? +  1) *  50
    ]]></sql-query>
    
    <sql-query name="USER_RUN_MAP_SELECT_CNT"
		description="사용자의 역량진단 총 개수"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : USER_RUN_MAP_SELECT
		
		SELECT COUNT(*)
		FROM
		(
		SELECT A.RUN_NUM, RUN_NAME, FUN_DATE_FORMAT(RUN_START, 1)||'~'||FUN_DATE_FORMAT(RUN_END, 1) RUN_DATE, CURRENT_CLASS, 
		       DECODE(C.CMPL_FLAG, 'N', '실시 전', NULL, '실시 전', '진단완료') DIAG_STATE_NAME,  FUN_DATE_FORMAT(CMPL_DATE, 1) CMPL_DATE,
		       CASE WHEN SYSDATE >= RUN_START AND SYSDATE <= RUN_END THEN '1'
		            WHEN SYSDATE < RUN_START THEN '2'
		            WHEN SYSDATE > RUN_END THEN '3' 
		       END IMPLEMENT_FLAG
		FROM TB_CAM_RUN_L A, TB_CAM_RUNTARGET_I B,TB_CAM_RUNDIRECTION_I C
		WHERE A.COMPANYID = B.COMPANYID
		AND   A.RUN_NUM = B.RUN_NUM 
		AND   B.COMPANYID = C.COMPANYID
		AND   B.RUN_NUM = C.RUN_NUM
		AND   B.USERID = C.USERID
		AND   B.COMPANYID = ?
		AND   B.USERID = ?
		ORDER BY CMPL_DATE DESC, RUN_END DESC
		) 
    ]]></sql-query>

    <sql-query name="GET_RUN_RESULT_COUNT"
		description="답변검사"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : GET_RUN_RESULT_COUNT
		
		SELECT COUNT(*) CNT FROM TB_CAR_INDC_SCORE WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID_EX = ?
    ]]></sql-query>

    <sql-query name="INDICATOR_SELECT"
		description="행동지표 문항"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INDICATOR_SELECT
		
		SELECT ROW_NUMBER() OVER (ORDER BY dbms_random.value()) QUESTION_SEQ, A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR,
					 A.SUBELEMENT_NUM
        FROM TB_CM_BHV_INDICATOR A, TB_CM_EXAMPLE B, TB_CM_COMPETENCY C
        WHERE A.CMPNUMBER = B.CMPNUMBER
        AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
        AND   A.COMPANYID = B.COMPANYID
        AND   A.COMPANYID = C.COMPANYID
        AND   A.CMPNUMBER = C.CMPNUMBER
        AND   A.COMPANYID = ?
        AND   A.USEFLAG = 'Y'
        AND   C.USEFLAG = 'Y'
        GROUP BY A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR, A.SUBELEMENT_NUM
    ]]></sql-query>

    <sql-query name="INDICATOR_RE_SELECT"
		description="임시저장된 행동지표 문항"><![CDATA[

		--sql_file : ca-sqlset.xml
		--sql_name : INDICATOR_RE_SELECT
		
		SELECT  B.QUESTION_SEQ, A.CMPNUMBER, A.BHV_INDC_NUM, A.BHV_INDICATOR, A.SUBELEMENT_NUM
		FROM TB_CM_BHV_INDICATOR A, TB_CAR_INDC_SCORE B
		WHERE A.COMPANYID = B.COMPANYID
		AND   A.CMPNUMBER = B.CMPNUMBER
		AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
		AND   A.COMPANYID = ?
		AND   B.RUN_NUM = ?
		AND   B.USERID_EXED = ?
		AND   A.USEFLAG = 'Y'
		ORDER BY QUESTION_SEQ

    ]]></sql-query>
    
    <sql-query name="INDICATOR_EXAMPLE_SELECT"
		description="보기문항"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : INDICATOR_EXAMPLE_SELECT
		
		SELECT CMPNUMBER, BHV_INDC_NUM, EXAMPLE_NUM, EXAMPLE, EXM_ORDER, EXM_SCORE
		FROM TB_CM_EXAMPLE
		WHERE COMPANYID = ?
		AND   USEFLAG = 'Y'
		ORDER BY CMPNUMBER, BHV_INDC_NUM, EXAMPLE_NUM 
    ]]></sql-query>
    
    <sql-query name="INDICATOR_EXAMPLE_SELECT_TEST"
		description="보기문항"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : INDICATOR_EXAMPLE_SELECT_TEST
		
		SELECT CMPNUMBER, BHV_INDC_NUM, EXAMPLE_NUM, EXAMPLE, EXM_ORDER, EXM_SCORE
		FROM TB_CM_EXAMPLE
		WHERE COMPANYID = ?
		AND   CMPNUMBER = ?
		AND   BHV_INDC_NUM= ?
		AND   USEFLAG = 'Y'
		ORDER BY CMPNUMBER, BHV_INDC_NUM, EXAMPLE_NUM 
    ]]></sql-query>
    
    <sql-query name="INDICATOR_SCORE_SELECT"
		description="진단자 임시저장 정보"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : INDICATOR_SCORE_SELECT
		
		SELECT
         A.CMPNUMBER, A.BHV_INDC_NUM, A.USERID, A.USERID_EXED, A.RUNDIRECTION_CD, B.EXAMPLE_NUM
         FROM
         (
         SELECT A.COMPANYID, B.CMPNUMBER, B.BHV_INDC_NUM, A.RUN_NUM, A.USERID, A.USERID_EXED, A.RUNDIRECTION_CD
         FROM TB_CAM_RUNDIRECTION_I A, TB_CM_BHV_INDICATOR B WHERE A.COMPANYID = ? AND A.RUN_NUM = ? AND USERID = ?
         ) A, TB_CAR_INDC_SCORE B
         WHERE A.COMPANYID = B.COMPANYID(+) 
         AND   A.CMPNUMBER = B.CMPNUMBER(+)
         AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM(+)
         AND   A.RUN_NUM = B.RUN_NUM(+)
         AND   A.USERID = B.USERID_EX(+)
         AND   A.USERID_EXED = B.USERID_EXED(+)
         AND   A.CMPNUMBER = ?
          AND   A.BHV_INDC_NUM = ?
         ORDER BY A.CMPNUMBER, A.BHV_INDC_NUM, A.RUNDIRECTION_CD, USERID_EX  ASC
    ]]></sql-query>

	
	<sql-query name="DELETE_SELF_QUESTION_EXAMPLE"
		description="행동지표 진단 결과 삭제."><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : DELETE_SELF_QUESTION_EXAMPLE
		
		 DELETE TB_CAR_INDC_SCORE
		  WHERE COMPANYID     = ?
		    AND RUN_NUM       = ?
		    AND USERID_EX     = ?
		    
	]]></sql-query>
	<sql-query name="INSERT_QUESTION_EXAMPLE"
		description="행동지표 진단 결과 저장."><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_QUESTION_EXAMPLE
		
		INSERT INTO TB_CAR_INDC_SCORE
        ( COMPANYID
        , CMPNUMBER
        , BHV_INDC_NUM
        , SUBELEMENT_NUM
        , RUN_NUM
        , USERID_EX
        , USERID_EXED
        , SCORE
        , EXAMPLE_NUM
        , QUESTION_SEQ
        , CREATETIME
        , CREATER
        ) VALUES (
          ?
        , ?
        , ?
        , ?
        , ?
        , ?
        , ? 
        , ? * ((SELECT WEIGHT FROM TB_CAM_RUN_CMPT_WEIGHT WHERE COMPANYID = ? AND RUN_NUM = ? AND CMPNUMBER = ?)/100)
        , ?
        , ?
        , SYSDATE
        , ?
        )
    ]]></sql-query>
	
	<sql-query name="CMPTGROUP_SCORE_RESULT"
		description="역량군별 진단결과 저장"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : CMPTGROUP_SCORE_RESULT
		
  		INSERT INTO TB_CAR_CMPTGROUP_SCORE
		(
		CMPGROUP,
		COMPANYID, 
		RUN_NUM,
		USERID_EX,
		USERID_EXED,
		SCORE,
		SCLP_FCTR_SCORE,
		CREATETIME,
		CREATER
		)
		SELECT
		    B.CMPGROUP, 
		    A.COMPANYID,
		    RUN_NUM, 
		    USERID_EX, 
		    USERID_EXED, 
		    ROUND(AVG(SCORE),2) SCORE, 
		    ROUND(AVG(SCORE),2) SCLP_FCTR_SCORE,
		    SYSDATE,
		    ?
		FROM TB_CAR_INDC_SCORE A, TB_CM_COMPETENCY B
		WHERE A.CMPNUMBER = B.CMPNUMBER
		AND   RUN_NUM = ?
		AND   USERID_EX = ?
		GROUP BY A.COMPANYID, RUN_NUM, USERID_EX, USERID_EXED, CMPGROUP
		
	]]></sql-query>
	
	<sql-query name="INSERT_ASSESSMENT_RESULT"
		description="역량별 진단결과 저장"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : INSERT_ASSESSMENT_RESULT
		
  		INSERT INTO TB_CAR_CMPT_SCORE
		( 
		    COMPANYID       --회사번호           
		  , CMPNUMBER       --역량번호           
		  , RUN_NUM         --실시번호           
		  , USERID_EX       --진단자_사용자순번  
		  , USERID_EXED     --피진단자_사용자순번
		  , SCORE           --점수               
		  , SCLP_FCTR_SCORE
		  , CREATETIME      --생성일시
		  , CREATER         --생성자  
		)
		SELECT 
		    CIS.COMPANYID, 
		    CIS.CMPNUMBER, 
		    CIS.RUN_NUM, 
		    CIS.USERID_EX, 
		    CIS.USERID_EXED, 
		    ROUND(AVG(CIS.SCORE),2) SCORE, 
		    ROUND(AVG(CIS.SCORE),2) SCLP_FCTR_SCORE,
		    SYSDATE,
		    ?
		FROM TB_CM_BHV_INDICATOR BI,
             TB_CAR_INDC_SCORE CIS
		WHERE CIS.RUN_NUM = ?
		  AND CIS.USERID_EX = ?
          AND CIS.COMPANYID = BI.COMPANYID
          AND CIS.BHV_INDC_NUM = BI.BHV_INDC_NUM
          AND (BI.EXCEPTION_FLAG IS NULL OR BI.EXCEPTION_FLAG = 'N')
		GROUP BY CIS.COMPANYID, CIS.CMPNUMBER, CIS.RUN_NUM, CIS.USERID_EX, CIS.USERID_EXED
		
	]]></sql-query>
	<sql-query name="UPDATE_ASSESSMENT_RESULT"
		description="역량별 진단방향설정 update"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : UPDATE_ASSESSMENT_RESULT
		
	   UPDATE TB_CAM_RUNDIRECTION_I
       SET CMPL_FLAG = 'Y'
            , CMPL_DATE = SYSDATE
            , MODIFYTIME = SYSDATE
            , MODIFIER = ?
        WHERE COMPANYID = ?
          AND RUN_NUM = ?
          AND USERID = ?
	]]></sql-query>
	
	<sql-query name="SELECT_CMPT_CMPR_LIST"
		description="역량진단 결과"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_CMPT_CMPR_LIST
		
	    SELECT CMPNAME, BSNS_REQR_LEVEL, MY_SCORE, THE_WHOLE_SCORE, EQUAL_CLASS_SCORE, EQUAL_MAJOR_SCORE
		FROM
		(
		    SELECT CMPNUMBER, CMPNAME, BSNS_REQR_LEVEL
		    FROM TB_CM_COMPETENCY
		    WHERE  COMPANYID = ?
		)A,
		(
		    SELECT CMPNUMBER, SCORE AS MY_SCORE
		    FROM TB_CAR_CMPT_SCORE
		    WHERE COMPANYID = ?
		    AND   RUN_NUM = ?
		    AND   USERID_EX = ?
		)B,
		(
		    SELECT CMPNUMBER, ROUND(AVG(SCORE)) THE_WHOLE_SCORE
		    FROM TB_CAR_CMPT_SCORE
		    WHERE COMPANYID = ?
		    AND   RUN_NUM = ?
		    GROUP BY CMPNUMBER
		)C,
		(
		    SELECT A.CMPNUMBER, ROUND(AVG(SCORE)) EQUAL_CLASS_SCORE
		    FROM  TB_CAR_CMPT_SCORE A, TB_CAM_RUNTARGET_I C
		    WHERE A.COMPANYID = ?
		    AND   A.RUN_NUM = ?
		    AND   A.COMPANYID = C.COMPANYID
		    AND   A.RUN_NUM = C.RUN_NUM
		    AND   A.USERID_EX = C.USERID
		    AND   C.CURRENT_CLASS = (SELECT CURRENT_CLASS FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID = ?)
		    GROUP BY A.CMPNUMBER
		)D,
		(
		    SELECT A.CMPNUMBER, ROUND(AVG(SCORE)) EQUAL_MAJOR_SCORE
		    FROM TB_CAR_CMPT_SCORE A, TB_CAM_RUNTARGET_I C
		    WHERE A.COMPANYID = ?
		    AND   A.RUN_NUM = ?
		    AND   A.COMPANYID = C.COMPANYID
		    AND   A.RUN_NUM = C.RUN_NUM
		    AND   A.USERID_EX = C.USERID
		    AND   C.DIVISION = (SELECT DIVISION  FROM TB_CAM_RUNTARGET_I WHERE COMPANYID = ? AND RUN_NUM = ? AND USERID = ?)
		    GROUP BY A.CMPNUMBER
		) E
		WHERE A.CMPNUMBER = B.CMPNUMBER
		AND   A.CMPNUMBER = C.CMPNUMBER(+)
		AND   A.CMPNUMBER = D.CMPNUMBER(+)
		AND   A.CMPNUMBER = E.CMPNUMBER
	]]></sql-query>
	
	<sql-query name="SELECT_RESULT_CMPT_GROW_SUBJECT_LIST"
		description="역량성장도 조회 실시리스트"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_RESULT_CMPT_GROW_SUBJECT_LIST
		
	    SELECT 1 ORDER_NUM, B.RUN_NAME
          FROM TB_CAM_RUNDIRECTION_I A, TB_CAM_RUN_L B 
         WHERE A.RUN_NUM = B.RUN_NUM
           AND A.COMPANYID = B.COMPANYID
           AND A.COMPANYID = ?
           AND A.RUN_NUM = ?
           AND A.USERID_EXED = ?
        UNION ALL
        SELECT *
         FROM
         (
         SELECT ROW_NUMBER() OVER(ORDER BY CMPL_DATE DESC) + 1 ORDER_NUM, B.RUN_NAME
         FROM TB_CAM_RUNDIRECTION_I A, TB_CAM_RUN_L B 
         WHERE A.RUN_NUM = B.RUN_NUM
         AND   A.COMPANYID = ?
         AND   A.RUN_NUM != ?
         AND   A.USERID_EXED = ?
         AND   A.CMPL_FLAG = 'Y'
         AND   B.RUN_END <= ( SELECT RUN_END FROM TB_CAM_RUN_L WHERE RUN_NUM = ? AND COMPANYID = ?)
         AND   ROWNUM <= 2
         ORDER BY CMPL_DATE DESC
         )
         ORDER BY ORDER_NUM DESC
	]]></sql-query>
	
	<sql-query name="SELECT_RESULT_CMPT_GROW_LIST"
		description="역량성장도 조회"><![CDATA[
		
		--sql_file : ca-sqlset.xml
		--sql_name : SELECT_RESULT_CMPT_GROW_LIST
		
		WITH ABC AS (
				SELECT
					A.CMPNUMBER,
					B.CMPNAME,
					ROUND(AVG(DECODE(ORDER_NUM, 1, SCORE, NULL))) RUN1,
					ROUND(AVG(DECODE(ORDER_NUM, 2, SCORE, NULL))) RUN2,
					ROUND(AVG(DECODE(ORDER_NUM, 3, SCORE, NULL))) RUN3
				FROM
				(
				    SELECT ORDER_NUM, RUN_NAME, A.RUN_NUM, CMPNUMBER, SCORE, COMPANYID FROM
				    (
				        SELECT 1 ORDER_NUM, B.RUN_NAME, A.RUN_NUM
				        FROM TB_CAM_RUNDIRECTION_I A, TB_CAM_RUN_L B
				        WHERE A.RUN_NUM = B.RUN_NUM
				        AND   A.COMPANYID = B.COMPANYID
				        AND   A.COMPANYID = ?
				        AND   A.RUN_NUM = ?
				        AND   A.USERID_EXED = ?
				        UNION ALL
				        SELECT *
				        FROM
				        (
				            SELECT ROW_NUMBER() OVER(ORDER BY CMPL_DATE DESC) + 1 ORDER_NUM, B.RUN_NAME, A.RUN_NUM
				            FROM TB_CAM_RUNDIRECTION_I A, TB_CAM_RUN_L B
				            WHERE A.RUN_NUM = B.RUN_NUM
				            AND   A.COMPANYID = ?
				            AND   B.RUN_END <= ( SELECT RUN_END FROM TB_CAM_RUN_L WHERE RUN_NUM = ?  AND COMPANYID = ?)
				            AND   A.RUN_NUM != ?
				            AND   A.USERID_EXED = ?
				            AND   A.CMPL_FLAG = 'Y'
				            AND   ROWNUM <= 2
				            ORDER BY CMPL_DATE DESC
				        )
				    )A,
				    (
				        SELECT A.CMPNUMBER, RUN_NUM, SCORE, A.COMPANYID 
				        FROM TB_CAR_INDC_SCORE A, TB_CM_BHV_INDICATOR B 
				        WHERE A.COMPANYID = B.COMPANYID
				        AND   A.CMPNUMBER = B.CMPNUMBER 
				        AND   A.BHV_INDC_NUM = B.BHV_INDC_NUM
				        AND   (B.EXCEPTION_FLAG IS NULL OR B.EXCEPTION_FLAG = 'N')
				        AND   A.COMPANYID = ?
				        AND   A.USERID_EXED = ?
				    )B
				    WHERE A.RUN_NUM = B.RUN_NUM
				    ORDER BY ORDER_NUM DESC, CMPNUMBER, A.RUN_NUM
				)A, TB_CM_COMPETENCY B
				WHERE A.CMPNUMBER = B.CMPNUMBER
				AND      A.COMPANYID = B.COMPANYID
				GROUP BY A.CMPNUMBER, B.CMPNAME
				ORDER BY A.CMPNUMBER
		)
        SELECT CMPNUMBER, CMPNAME
             , CASE WHEN RUN3 IS NOT NULL AND RUN2 IS NOT NULL AND RUN1 IS NOT NULL THEN RUN3
                    WHEN RUN3 IS NULL AND RUN2 IS NOT NULL AND RUN1 IS NOT NULL THEN RUN2
                    WHEN RUN3 IS NULL AND RUN2 IS NULL AND RUN1 IS NOT NULL THEN RUN1
                    ELSE NULL
                END RUN1
             , CASE WHEN RUN3 IS NOT NULL AND RUN2 IS NOT NULL AND RUN1 IS NOT NULL THEN RUN2
                    WHEN RUN3 IS NULL AND RUN2 IS NOT NULL AND RUN1 IS NOT NULL THEN RUN1
                    ELSE NULL
                END RUN2
             , CASE WHEN RUN3 IS NOT NULL AND RUN2 IS NOT NULL AND RUN1 IS NOT NULL THEN RUN1
                    ELSE NULL
                END RUN3
          FROM (
                SELECT 0 CMPNUMBER, '전체' CMPNAME, ROUND(AVG(RUN1),2) RUN1, ROUND(AVG(RUN2),2) RUN2, ROUND(AVG(RUN3),2) RUN3 
                FROM ABC
                UNION ALL
                SELECT * FROM ABC
               )
	]]></sql-query>
	
	<sql-query name="SELECT_MAX_SEQ_KPI_NO"
        description="지표번호 조회"><![CDATA[
        
        --sql_file : ca-sqlset.xml
        --sql_name : SELECT_MAX_SEQ_KPI_NO
        
	SELECT SEQ_KPI_NO.NEXTVAL FROM DUAL
    ]]></sql-query>
    
    <sql-query name="INSERT_USER_KPI"
        description="일반사용자 지표 등록"><![CDATA[
        
        --sql_file : ca-sqlset.xml
        --sql_name : INSERT_USER_KPI

BEGIN

INSERT INTO TB_KPI(COMPANYID, KPI_NO, KPI_NM,  KPI_TYPE, MEA_EVL_CYC, EVL_TYPE, EVL_HOW, UNIT, CAP, TARGET, THRESHOLD, TARGET_SET_WRNT,  DATASOURCE, MGMT_DEPT, USEFLAG, CREATETIME, CREATER, REG_TYPE_CD)
SELECT 
    ? COMPANYID,
    ? KPI_NO,
    ? KPI_NM,
    ? KPI_TYPE,
    ? MEA_EVL_CYC,
    ? EVL_TYPE,
    ? EVL_HOW,
    ? UNIT,
    ? CAP,
    ? TARGET,
    ? THRESHOLD,
    ? TARGET_SET_WRNT,
    ? DATASOURCE,
    ? MGMT_DEPT,
    UPPER(?) USEFLAG,
    SYSDATE CREATETIME,
    ? CREATER,
    ? REG_TYPE_CD
FROM DUAL;

INSERT INTO TB_KPI_USER_MAP(COMPANYID, RUN_NUM, USERID, KPI_NO, USEFLAG, CREATETIME, CREATER, REG_TYPE_CD)
SELECT 
    ? COMPANYID,
    ? RUN_NUM,
    ? USERID,
    ? KPI_NO,
    'Y' USEFLAG,
    SYSDATE CREATETIME,
    ? CREATER,
    ? REG_TYPE_CD
FROM DUAL 
        ;
END;
    ]]></sql-query>
    
    <sql-query name="CORE_CMPT_EDU_MNG_LIST"
		description="핵심역량교육실적관리(리스트)" ><![CDATA[

		--sql_file : ca-sqlset.xml
		--commnet : 핵심역량교육실적관리(리스트)
		--sql_name : CORE_CMPT_EDU_MNG_LIST
		SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
		      SELECT ROW_NUMBER() OVER(ORDER BY A.MJR_CMPT_EDU_PRF_SEQ DESC) ROWNUMBER
		      		 , A.COMPANYID
		             , A.MJR_CMPT_EDU_PRF_SEQ
		             , A.USERID
		             , A.EVL_NM
		             , C.NAME
		             , A.DIVISIONID 
		             , B.DVS_NAME
		             , C.GRADE_NM
		             , C.EMP_STS_CD
		             , FUN_COMMON_CODE(A.COMPANYID, 'BA16', C.EMP_STS_CD) EMP_STS_NM
		             , (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE A.DIVISIONID = DIVISIONID AND A.COMPANYID=COMPANYID) THEN_DVS_NM
		             , FUN_COMMON_CODE(A.COMPANYID, 'BA15', A.GRADE_NUM) THEN_GRADE_NM
		             , A.GRADE_NUM
		             , A.EVL_RST
		             , A.EVL_SCO
		             , TO_CHAR (A.EVL_DT,'YYYY-MM-DD') EVL_DT
		             , A.EDU_ST_DT
		             , A.EDU_ED_DT
		             , TO_CHAR (A.EDU_ST_DT,'YYYY-MM-DD') || ' ~ ' || TO_CHAR(A.EDU_ED_DT,'YYYY-MM-DD') EDU_PERIOD
		             , A.USEFLAG
		      FROM TB_EM_MJR_CMPT_EDU_PRF_MGMT A ,TB_BA_DIVISION B , TB_BA_USER C 
		      WHERE A.USERID = C.USERID
		      AND B.DIVISIONID = C.DIVISIONID
		      AND A.COMPANYID = B.COMPANYID
		      AND A.COMPANYID = ?
		      AND A.USEFLAG = 'Y'
		      AND A.DEL_YN ='N'
		)SL
		WHERE 1=1
        ]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
		]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic></sql-query>  
		
		<sql-query name="SAVE_CMPT_EDU_MNG"
		description="핵심역량교육실적관리(저장)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 핵심역량교육실적관리(저장)
			--sql_name : SAVE_CMPT_EDU_MNG
			
			MERGE INTO TB_EM_MJR_CMPT_EDU_PRF_MGMT A
            USING(
                SELECT 
                    ? MJR_CMPT_EDU_PRF_SEQ,
					? COMPANYID,
                    ? USERID,
                    ? DIVISIONID,
                    ? GRADE_NUM,
                    ? EVL_RST,
                    ? EVL_SCO,
                    ? EVL_DT,
                    ? EDU_ST_DT,
                    ? EDU_ED_DT,
                    'Y' USEFLAG,
                    'N' DEL_YN,
                    ? CREATER,
                    ? EVL_NM
                FROM DUAL
               ) B ON (A.MJR_CMPT_EDU_PRF_SEQ = B.MJR_CMPT_EDU_PRF_SEQ AND A.COMPANYID = B.COMPANYID )
               WHEN MATCHED THEN
               UPDATE
                 SET  A.USERID = B.USERID,
                      A.DIVISIONID = B.DIVISIONID,
                      A.GRADE_NUM = B.GRADE_NUM,
                      A.EVL_RST = B.EVL_RST,
                      A.EVL_SCO = B.EVL_SCO,
                      A.EVL_DT = B.EVL_DT,
                      A.EDU_ST_DT = B.EDU_ST_DT,
                      A.EDU_ED_DT = B.EDU_ED_DT,
                      A.MODIFYTIME = SYSDATE,
                      A.MODIFIER = B.CREATER,
                      A.EVL_NM = B.EVL_NM
               WHEN NOT MATCHED THEN
               INSERT(A.MJR_CMPT_EDU_PRF_SEQ, A.COMPANYID, A.USERID, A.DIVISIONID, A.GRADE_NUM, A.EVL_RST, A.EVL_SCO, A.EVL_DT, A.EDU_ST_DT, A.EDU_ED_DT, A.USEFLAG, A.CREATETIME, A.CREATER, A.EVL_NM, A.DEL_YN) 
               VALUES((SELECT NVL(MAX(MJR_CMPT_EDU_PRF_SEQ),0)+1 MJR_CMPT_EDU_PRF_SEQ FROM TB_EM_MJR_CMPT_EDU_PRF_MGMT), B.COMPANYID, B.USERID, B.DIVISIONID, B.GRADE_NUM, B.EVL_RST, B.EVL_SCO, B.EVL_DT, B.EDU_ST_DT, B.EDU_ED_DT, B.USEFLAG, SYSDATE, B.CREATER, B.EVL_NM, B.DEL_YN)
        
		]]>
		</sql-query>

		<sql-query name="DELETE_CMPT_EDU_MNG"
		description="핵심역량교육실적관리(삭제)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 핵심역량교육실적관리(삭제)
			--sql_name : DELETE_CMPT_EDU_MNG
			
			UPDATE TB_EM_MJR_CMPT_EDU_PRF_MGMT
			SET    USEFLAG = 'N' , DEL_YN = 'Y' , MODIFIER = ? , MODIFYTIME = SYSDATE
			WHERE MJR_CMPT_EDU_PRF_SEQ = ?
			AND COMPANYID = ?
		]]>
		</sql-query>
		
		<sql-query name="GET_CMPT_EDU_MNG_LIST_EXCEL"
		description="핵심역량교육실적관리 (엑셀다운로드)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 핵심역량교육실적관리(엑셀다운로드)
			--sql_name : GET_CMPT_EDU_MNG_LIST_EXCEL
			
			SELECT ROW_NUMBER() OVER(ORDER BY A.MJR_CMPT_EDU_PRF_SEQ DESC) ROWNUMBER
                     , A.COMPANYID
                     , A.MJR_CMPT_EDU_PRF_SEQ
                     , A.USERID
                     , A.EVL_NM
                     , C.NAME
                     , B.DVS_NAME /*현재 소속*/
                     , C.DIVISIONID 
                     , C.GRADE_NM /*현재 직급*/
                     , C.GRADE_NUM
                     , C.EMP_STS_CD /*재직 상태*/
                     , FUN_COMMON_CODE(A.COMPANYID, 'BA16', C.EMP_STS_CD) EMP_STS_NM
                     , (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE A.DIVISIONID = DIVISIONID AND A.COMPANYID=COMPANYID) THEN_DVS_NM
                     , A.DIVISIONID THEN_DIVISIONID /*당시소속*/
                     , FUN_COMMON_CODE(A.COMPANYID, 'BA15', A.GRADE_NUM) THEN_GRADE_NM
                     , A.GRADE_NUM THEN_GRADE_NUM /*당시직급*/
                     , A.EVL_RST
                     , A.EVL_SCO
                     , TO_CHAR (A.EVL_DT,'YYYYMMDD') EVL_DT
                     , TO_CHAR (A.EDU_ST_DT,'YYYYMMDD') EDU_ST_DT
                     , TO_CHAR (A.EDU_ED_DT,'YYYYMMDD') EDU_ED_DT
                     , A.USEFLAG
              FROM TB_EM_MJR_CMPT_EDU_PRF_MGMT A ,TB_BA_DIVISION B , TB_BA_USER C 
              WHERE A.USERID = C.USERID
              AND B.DIVISIONID = C.DIVISIONID
              AND A.COMPANYID = B.COMPANYID
              AND A.COMPANYID = ?
              AND A.USEFLAG ='Y'
		]]>
		</sql-query>
		
		<sql-query name="GET_CMPT_OBJ_LIST_EXCEL"
		description="대상자관리 (엑셀다운로드)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 대상자관리(엑셀다운로드)
			--sql_name : GET_CMPT_OBJ_LIST_EXCEL
			
			 SELECT  
                A.COMPANYID,
                A.RUN_NUM,
                A.USERID,
                A.DIVISION,
                B.NAME,
                B.ID,
                B.EMPNO,
                B.GRADE_NUM,
                B.GRADE_NM,
                A.JOB,
                (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = B.JOB AND JOBLDR_FLAG = 'J') JOB_NAME,
                A.LEADERSHIP,
                (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = B.LEADERSHIP AND JOBLDR_FLAG = 'L') LEADERSHIP_NAME,
                (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = B.COMPANYID AND DIVISIONID = B.DIVISIONID) DVS_NAME,
                A.USEFLAG,
                C.RUN_NAME
            FROM TB_CAM_RUNTARGET_I A , TB_BA_USER B, TB_CAM_RUN_L C
            WHERE A.USERID = B.USERID
            AND A.COMPANYID = B.COMPANYID
            AND A.RUN_NUM = C.RUN_NUM
            AND A.COMPANYID = C.COMPANYID
            AND A.COMPANYID = ?
            AND A.RUN_NUM = ?
            AND B.DEL_YN = 'N'
            AND A.USEFLAG = 'Y'
            AND B.EMP_STS_CD ='10'
		]]>
		</sql-query>

        <sql-query name="GET_CMPT_DIR_EXCEL"
        description="방향설정 (엑셀다운로드)" ><![CDATA[
            --sql_file : ca-sqlset.xml
            --commnet : 방향설정(엑셀다운로드)
            --sql_name : GET_CMPT_DIR_EXCEL

SELECT BUC.EMPNO EXEC_EMPNO, BUD.EMPNO EXED_EMPNO, CR.RUNDIRECTION_CD, CR.USEFLAG
FROM TB_CAM_RUNTARGET_I CI, TB_CAM_RUNDIRECTION_I CR, TB_BA_USER BUC, TB_BA_USER BUD
WHERE CI.COMPANYID = CR.COMPANYID AND CI.RUN_NUM = CR.RUN_NUM AND CI.USERID = CR.USERID_EXED
    AND CR.USERID = BUC.USERID
    AND CR.USERID_EXED = BUD.USERID
    AND CR.COMPANYID = ?
    AND CR.RUN_NUM = ?
    AND CI.USEFLAG = 'Y'
    AND CR.USEFLAG = 'Y'
ORDER BY BUC.EMPNO, BUD.EMPNO
        ]]>
        </sql-query>

		<sql-query name="GET_CMPT_DIR_LIST_EXCEL"
		description="방향설정 (엑셀다운로드)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 방향설정(엑셀다운로드)
			--sql_name : GET_CMPT_DIR_LIST_EXCEL
			
			SELECT  
		        A.RUN_NUM,
		        A.USERID,
		        B.NAME,
		        B.EMPNO,
		        (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE COMPANYID = B.COMPANYID AND DIVISIONID = B.DIVISIONID) DVS_NAME,
		        A.DIVISION,
		        B.GRADE_NM,
		        B.GRADE_NUM,
		        (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = B.JOB AND JOBLDR_FLAG = 'J') JOB_NAME,
		        A.JOB,
		        (SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = B.LEADERSHIP AND JOBLDR_FLAG = 'L') LEADERSHIP_NAME,
		        A.LEADERSHIP,
		        --C.BOSS_YN,
		        --C.COL_YN,
		        --C.SUB_YN,
		        --C.SELF_YN,
		        --C.BOSS_HCNT,
		        --C.COL_HCNT,
		        --C.SUB_HCNT,
		        NVL(D.SELF_CNT,0) SELF_CNT,
		        NVL(D.BOSS_CNT,0) BOSS_CNT,
		        NVL(D.COL_CNT,0) COL_CNT,
		        NVL(D.SUB_CNT,0) SUB_CNT,
		        C.RUN_NAME
		        --B.DEL_YN, 
		        --A.USEFLAG 
		        FROM TB_CAM_RUNTARGET_I A,TB_BA_USER B, TB_CAM_RUN_L C,
		         (SELECT COMPANYID, RUN_NUM, USERID_EXED
		            , NVL(SUM(SELF_CNT), 0) SELF_CNT
		            , NVL(SUM(BOSS_CNT), 0) BOSS_CNT
		            , NVL(SUM(COL_CNT), 0) COL_CNT
		            , NVL(SUM(SUB_CNT), 0) SUB_CNT
		          FROM(
		             SELECT COMPANYID, RUN_NUM, USERID_EXED
		                , DECODE(RUNDIRECTION_CD, '1', 1) SELF_CNT
		                , DECODE(RUNDIRECTION_CD, '4', 1) BOSS_CNT
		                , DECODE(RUNDIRECTION_CD, '3', 1) COL_CNT
		                , DECODE(RUNDIRECTION_CD, '2', 1) SUB_CNT
		            FROM TB_CAM_RUNDIRECTION_I 
		            WHERE COMPANYID = ? AND RUN_NUM = ?
		                AND USEFLAG ='Y'
		            )
		          GROUP BY COMPANYID, RUN_NUM, USERID_EXED
		        ) D
	        WHERE A.USERID = B.USERID
	        AND A.COMPANYID = B.COMPANYID
	        AND A.COMPANYID = C.COMPANYID
	        AND A.RUN_NUM = C.RUN_NUM
	        AND A.COMPANYID = D.COMPANYID(+)
	        AND A.RUN_NUM = D.RUN_NUM(+)
	        AND A.USERID = D.USERID_EXED(+)
	        AND A.COMPANYID = ?
	        AND A.RUN_NUM = ?
	        AND A.USEFLAG = 'Y'
		    AND B.DEL_YN = 'N'
		    ORDER BY B.NAME
		]]>
		</sql-query>
		
		 <sql-query name="SELECT_CORE_CMPT_EDU_USE_CNT" description="핵심역량교육실적관리 - 업로드 업데이트 중복 체크"><![CDATA[
        -- BA_SUBJECT : SELECT_CORE_CMPT_EDU_USE_CNT
    
		SELECT COUNT(*) CNT
        FROM TB_EM_MJR_CMPT_EDU_PRF_MGMT BS
        WHERE BS.COMPANYID = ? 
            AND BS.MJR_CMPT_EDU_PRF_SEQ = ?
    	]]></sql-query>
    	
    	<sql-query name="UPLOAD_CMPT_EDU_MNG"
		description="핵심역량교육실적관리(엑셀업로드)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 핵심역량교육실적관리(엑셀업로드)
			--sql_name : UPLOAD_CMPT_EDU_MNG
			
			
        MERGE INTO TB_EM_MJR_CMPT_EDU_PRF_MGMT A
            USING(
                SELECT 
                    ? MJR_CMPT_EDU_PRF_SEQ,
                    ? COMPANYID,
                    ? EVL_NM,
                    (SELECT USERID FROM TB_BA_USER WHERE EMPNO = ?) USERID,
                    ? NAME,
                    ? DIVISIONID,
                    ? GRADE_NUM,
                    ? EVL_RST,
                    ? EVL_SCO,
                    ? EVL_DT,
                    ? EDU_ST_DT,
                    ? EDU_ED_DT,
                    ? CREATER,
                    ? USEFLAG,
                    ? DEL_YN
                FROM DUAL
               ) B ON (A.MJR_CMPT_EDU_PRF_SEQ = B.MJR_CMPT_EDU_PRF_SEQ AND A.COMPANYID = B.COMPANYID )
               WHEN MATCHED THEN
               UPDATE
                 SET  A.USERID = B.USERID,
                      A.DIVISIONID = B.DIVISIONID,
                      A.GRADE_NUM = B.GRADE_NUM,
                      A.EVL_RST = B.EVL_RST,
                      A.EVL_SCO = B.EVL_SCO,
                      A.EVL_DT = B.EVL_DT,
                      A.EDU_ST_DT = B.EDU_ST_DT,
                      A.EDU_ED_DT = B.EDU_ED_DT,
                      A.MODIFYTIME = SYSDATE,
                      A.MODIFIER = B.CREATER,
                      A.EVL_NM = B.EVL_NM,
                      A.USEFLAG = B.USEFLAG,
                      A.DEL_YN = B.DEL_YN
               WHEN NOT MATCHED THEN
               INSERT(A.MJR_CMPT_EDU_PRF_SEQ, A.COMPANYID, A.USERID, A.DIVISIONID, A.GRADE_NUM, A.EVL_RST, A.EVL_SCO, A.EVL_DT, A.EDU_ST_DT, A.EDU_ED_DT, A.USEFLAG, A.CREATETIME, A.CREATER, A.EVL_NM, A.DEL_YN) 
               VALUES((SELECT MAX(MJR_CMPT_EDU_PRF_SEQ)+1 MJR_CMPT_EDU_PRF_SEQ FROM TB_EM_MJR_CMPT_EDU_PRF_MGMT), B.COMPANYID, B.USERID, B.DIVISIONID, B.GRADE_NUM, B.EVL_RST, B.EVL_SCO, B.EVL_DT, B.EDU_ST_DT, B.EDU_ED_DT, B.USEFLAG, SYSDATE, B.CREATER, B.EVL_NM, B.DEL_YN)
		]]>
		</sql-query>
		
		<sql-query name="CORE_CMPT_EDU_MNG_SEQ"
		description="핵심역량교육실적관리(엑셀업로드)" ><![CDATA[
		    --sql_file : ca-sqlset.xml
			--commnet : 핵심역량교육실적관리(시퀀스)
			--sql_name : UPLOAD_CMPT_EDU_MNG
			
			
      		 SELECT MAX(MJR_CMPT_EDU_PRF_SEQ)+1 MJR_CMPT_EDU_PRF_SEQ FROM TB_EM_MJR_CMPT_EDU_PRF_MGMT
		]]>
		</sql-query>
		
		 <sql-query name="CANCEL_CLASS_ADMIN_APPR_REQ" description="상시학습관리 - 승인요청 취소처리"><![CDATA[
        -- CA : CANCEL_MTR_APPR_REQ
    
		UPDATE TB_EM_ALW_STD
		SET REQ_STS_CD = 0
		WHERE COMPANYID = ? AND REQ_NUM = ?
    ]]></sql-query>
    
    
    <sql-query name="SELECT_CORE_CA_OBJ_USE_CNT" description="대상자관리 - 업로드 업데이트 중복 체크"><![CDATA[
        -- CA : SELECT_CORE_CMPT_EDU_USE_CNT
    
		 SELECT COUNT(*) CNT
        FROM TB_CAM_RUNTARGET_I BS
        WHERE BS.COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID = (SELECT USERID FROM TB_BA_USER WHERE EMPNO = ?)
        AND USEFLAG = 'Y'
    ]]></sql-query>
    
    <sql-query name="SELECT_EM_ADMIN_CLASS_USE_CNT" description="상시학습관리 - 업로드 업데이트 중복 체크"><![CDATA[
        -- CA : SELECT_CORE_CMPT_EDU_USE_CNT
    
		 SELECT COUNT(*) CNT
        FROM TB_EM_ALW_STD BS
        WHERE BS.COMPANYID = ?
        AND ALW_STD_SEQ =?
    ]]></sql-query>
    
    <sql-query name="DELETE_ALW_EMP_MAP" description="상시학습관리 - 업로드 수료자 삭제"><![CDATA[
        -- CA : SELECT_CORE_CMPT_EDU_USE_CNT
    
		UPDATE TB_EM_ALW_STD_USER
		SET USEFLAG = 'N'
		WHERE COMPANYID = ? 
		AND ALW_STD_SEQ = ?
    ]]></sql-query>
    
    <sql-query name="UPLOAD_ALW_ADMIN_CLASS_DELETE" description="상시학습관리 - 업로드 상시학습 삭제"><![CDATA[
        -- CA : SELECT_CORE_CMPT_EDU_USE_CNT
    
		 UPDATE TB_EM_ALW_STD
			SET USEFLAG = 'N',
			    DEL_YN = 'Y'
			WHERE COMPANYID = ? 
			AND ALW_STD_SEQ =?
    ]]></sql-query>
    
    
    <sql-query name="SELECT_CA_DIR_USE_CNT" description="방향설정 - 업로드 업데이트 중복 체크"><![CDATA[
        -- CA : SELECT_CA_DIR_USE_CNT
    
		SELECT COUNT(*) CNT
        FROM TB_CAM_RUNDIRECTION_I BS
        WHERE BS.COMPANYID = ?
        AND RUN_NUM = ?
        AND USERID_EXED = ?
        AND USERID = (SELECT USERID FROM TB_BA_USER WHERE EMPNO = ?)
        AND USEFLAG = 'Y'
    ]]></sql-query>
    
     <sql-query name="UPLOAD_CA_DIR_NOT_USE" description="방향설정 - 업로드 대상자 미사용처리"><![CDATA[
        -- CA : UPLOAD_CA_DIR_NOT_USE
    
		UPDATE TB_CAM_RUNDIRECTION_I
		SET USEFLAG ='N'
		WHERE COMPANYID = ?
		AND RUN_NUM = ?
    ]]></sql-query>
    
    <sql-query name="SET_RUN_DIR_AUTO_SAVE" description="방향설정 - 자동설정"><![CDATA[
        -- CA : SET_RUN_DIR_AUTO_SAVE
    
		CALL PROC_AUTO_SET_RUNDIRECTION(?,?,?,?)
		
    ]]></sql-query>
    
    <sql-query name="IS_USE_USER" description="방향설정 - 존재하는 아이디인지 체크 "><![CDATA[
        -- CA : IS_USE_USER
    
SELECT
    NVL((
    SELECT USERID FROM TB_BA_USER WHERE EMPNO = ? AND USEFLAG = 'Y' and ROWNUM = 1
    ), 0) EXEC_USERID,
    NVL((
    SELECT USERID FROM TB_BA_USER WHERE EMPNO = ? AND USEFLAG = 'Y' and ROWNUM = 1
    ), 0) EXED_USERID
FROM DUAL
    
    ]]></sql-query>
    
    <sql-query name="UPLOAD_CA_DIR_MNG" description="방향설정 - 업로드 대상자 "><![CDATA[
        -- CA : UPLOAD_CA_DIR_MNG
    
		MERGE INTO TB_CAM_RUNDIRECTION_I A
        USING(
            SELECT
                ? COMPANYID,
                ? RUN_NUM,
                (SELECT USERID FROM TB_BA_USER WHERE EMPNO = ? AND USEFLAG = 'Y') USERID,
                (SELECT USERID FROM TB_BA_USER WHERE EMPNO = ? AND USEFLAG = 'Y') USERID_EXED,
                ? RUNDIRECTION_CD,
                ? USEFLAG,
                ? CREATER
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.RUN_NUM = B.RUN_NUM AND A.USERID = B.USERID AND A.USERID_EXED = B.USERID_EXED)
        WHEN MATCHED THEN
        UPDATE SET 
        	A.RUNDIRECTION_CD = B.RUNDIRECTION_CD,
            A.USEFLAG = B.USEFLAG,
            A.MODIFIER = B.CREATER,
            A.MODIFYTIME = SYSDATE
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.RUN_NUM, A.USERID, A.USERID_EXED, A.USEFLAG, A.RUNDIRECTION_CD,A.CREATER,A.CREATETIME)
            VALUES(B.COMPANYID, B.RUN_NUM, B.USERID, B.USERID_EXED, B.USEFLAG, B.RUNDIRECTION_CD,B.CREATER,SYSDATE)
    ]]></sql-query>
    
    <sql-query name="UPLOAD_CMPT_OBJ_MNG"
		description="대상자관리관리(엑셀업로드)" ><![CDATA[
	    --sql_file : ca-sqlset.xml
		--commnet : 대상자관리관리(엑셀업로드)
		--sql_name : UPLOAD_CMPT_OBJ_MNG_UPLOAD
		
		MERGE INTO TB_CAM_RUNTARGET_I A
        USING(
            SELECT
                ? COMPANYID,
                ? RUN_NUM,
                ? USEFLAG,
                (SELECT USERID FROM TB_BA_USER WHERE EMPNO = ?) USERID,
                ? CREATER
            FROM DUAL
        ) B
        ON (A.COMPANYID = B.COMPANYID AND A.RUN_NUM = B.RUN_NUM AND A.USERID = B.USERID )
        WHEN MATCHED THEN
        UPDATE SET 
            A.USEFLAG = B.USEFLAG,
            A.MODIFIER = B.CREATER,
            A.MODIFYTIME = SYSDATE
        WHEN NOT MATCHED THEN
            INSERT(A.COMPANYID, A.RUN_NUM, A.USERID, A.USEFLAG, A.CREATER,A.CREATETIME)
            VALUES(B.COMPANYID, B.RUN_NUM, B.USERID, B.USEFLAG, B.CREATER,SYSDATE)
		]]>
		</sql-query>
		
		<sql-query name="UPLOAD_CA_OBJ_NOT_USE"
		description="대상자관리관리(엑셀업로드 초기화)" ><![CDATA[
	    --sql_file : ca-sqlset.xml
		--commnet : 대상자관리관리(엑셀업로드 초기화)
		--sql_name : UPLOAD_CA_OBJ_NOT_USE
		
		UPDATE TB_CAM_RUNTARGET_I
        SET USEFLAG ='N' 
        WHERE COMPANYID = ? 
        AND RUN_NUM = ?
		
		]]>
		</sql-query>
    	
</sqlset>