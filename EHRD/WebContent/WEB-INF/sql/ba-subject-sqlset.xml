<?xml version="1.0" encoding="UTF-8"?>
<sqlset>
<name>BA_SUBJECT</name>
<version>2.0</version>
<description>과정관리 모듈을 위한 쿼리</description>
	
	
	<sql-query name="SELECT_IS_USE_SUBJECT_CNT" description="과정관리 - 엑셀 업로드시 존재하는 과정인지 체크"><![CDATA[
	        -- BA_SUBJECT : SELECT_IS_USE_SUBJECT_CNT
	    
	SELECT COUNT(*) CNT FROM TB_BA_SBJCT
	WHERE COMPANYID = ?
	    AND SUBJECT_NAME = ?
	    AND TRAINING_CODE = ?
	    AND ALW_STD_CD = ?
	    AND DEL_YN = 'N'
	    ]]></sql-query>
	
	<sql-query name="DELETE_TB_BA_SBJCT" description="과정관리 - 과정삭제처리"><![CDATA[
	        -- BA_SUBJECT : DELETE_TB_BA_SBJCT
	    
	--과정삭제
	UPDATE TB_BA_SBJCT
	SET USEFLAG = 'N',
	    DEL_YN = 'Y',
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND SUBJECT_NUM = ?
	    ]]></sql-query>
	
	<sql-query name="INSERT_TB_BA_SBJCT" description="과정관리 - 과정입력처리"><![CDATA[
	        -- BA_SUBJECT : INSERT_TB_BA_SBJCT
	    
	-- 과정 추가
	INSERT INTO TB_BA_SBJCT(
	    COMPANYID,
	    SUBJECT_NUM,
	    SUBJECT_NAME,
	    TRAINING_CODE,
	    EDU_HOUR_H,
	    EDU_HOUR_M,
	    RECOG_TIME_H,
	    RECOG_TIME_M,
	    EDU_OBJECT,
	    EDU_TARGET,
	    COURSE_CONTENTS,
	    ALW_STD_CD,
	    INSTITUTE_CODE,
	    INSTITUTE_NAME,
	    DEPT_DESIGNATION_YN,
	    OFFICETIME_CD,
	    EDUINS_DIV_CD,
	    USEFLAG,
	    CREATETIME,
	    CREATER,
	    PERF_ASSE_SBJ_CD
	    )
	VALUES(
	    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
	    ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE,
	    ?, ?)
	    ]]></sql-query>
	
	<sql-query name="UPDATE_TB_BA_SBJCT" description="과정관리 - 과정수정처리"><![CDATA[
	        -- BA_SUBJECT : UPDATE_TB_BA_SBJCT
	    
	-- 과정수정
	UPDATE TB_BA_SBJCT       
	SET 
	    SUBJECT_NAME = ?,
	    TRAINING_CODE = ?,
	    EDU_HOUR_H,
	    EDU_HOUR_M,
	    RECOG_TIME_H = ?,
	    RECOG_TIME_M = ?,
	    EDU_OBJECT = ?,
	    EDU_TARGET = ?,
	    COURSE_CONTENTS = ?,
	    ALW_STD_CD = ?,
	    INSTITUTE_CODE,
	    INSTITUTE_NAME = ?,
	    DEPT_DESIGNATION_YN = ?,
	    OFFICETIME_CD = ?,
	    EDUINS_DIV_CD = ?,
	    USEFLAG = ?,
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?,
	    PERF_ASSE_SBJ_CD = ?,
	WHERE COMPANYID = ? AND SUBJECT_NUM = ?
	]]></sql-query>
	    
	<sql-query name="DELETE_TB_BA_SBJCT_OPEN" description="차수관리 - 삭제"><![CDATA[
	        -- BA_SUBJECT : DELETE_TB_BA_SBJCT_OPEN
	  
	UPDATE TB_BA_SBJCT_OPEN
	SET USEFLAG = 'N',
	    DEL_YN = 'Y',
	    MODIFYTIME = SYSDATE, 
	    MODIFIER = ?
	WHERE COMPANYID = ? 
	    AND SUBJECT_NUM = ? 
	    AND OPEN_NUM = ?
	    ]]></sql-query>
	    
    <sql-query name="SEVERAL_DELETE_TB_BA_SBJCT_OPEN" description="차수관리 - 삭제"><![CDATA[
            -- BA_SUBJECT : SEVERAL_DELETE_TB_BA_SBJCT_OPEN
      
    UPDATE TB_BA_SBJCT_OPEN
    SET USEFLAG = 'N',
        DEL_YN = 'Y',
        MODIFYTIME = SYSDATE, 
        MODIFIER = ?
    WHERE COMPANYID = ? 
        AND OPEN_NUM = ?
        ]]></sql-query>
        
	
	<sql-query name="UPDATE_TB_BA_SBJCT_OPEN" description="차수관리 - 엑셀 업로드 수정"><![CDATA[
	        -- BA_SUBJECT : UPDATE_TB_BA_SBJCT_OPEN
	  
	UPDATE TB_BA_SBJCT_OPEN
	SET SUBJECT_NAME = ?,
	    YYYY = ?, 
	    CHASU = ?,
	    EDU_STIME = ?, 
	    EDU_ETIME = ?, 
	    APPLY_STIME = ?, 
	    APPLY_ETIME = ?, 
	    CANCEL_ETIME = ?, 
	    APPLICANT = ?,
	    EDU_DAYS = ?, 
	    EDU_HOUR_H = ?,
	    EDU_HOUR_M = ?,
	    MODIFYTIME = SYSDATE, 
	    MODIFIER = ?
	WHERE COMPANYID = ? 
	    AND SUBJECT_NUM = ? 
	    AND OPEN_NUM = ?
	    ]]></sql-query>
	
	<sql-query name="SELECT_TARGET_OPEN_CNT" description="차수관리 - 엑셀 업로드시 존재하는 개설정보인지 체크"><![CDATA[
	        -- BA_SUBJECT : SELECT_TARGET_OPEN_CNT
	  
	SELECT COUNT(*) CNT
	FROM TB_BA_SBJCT_OPEN BS
	WHERE BS.COMPANYID = ?
	    AND BS.SUBJECT_NUM = ?
	    AND BS.OPEN_NUM = ?
	    AND BS.DEL_YN = 'N'
	    ]]></sql-query>
	
	<sql-query name="INSERT_TB_BA_SBJCT_OPEN" description="차수관리 - 엑셀 업로드 추가"><![CDATA[
	        -- BA_SUBJECT : INSERT_TB_BA_SBJCT_OPEN
	  
	INSERT INTO TB_BA_SBJCT_OPEN(
		COMPANYID, SUBJECT_NUM, OPEN_NUM, YYYY, CHASU,
		SUBJECT_NAME, INSTITUTE_CODE, INSTITUTE_NAME, TRAINING_CODE, COURSE_CONTENTS, EDU_OBJECT,
		EDU_TARGET, EDU_STIME, EDU_ETIME, APPLY_STIME, APPLY_ETIME,
		CANCEL_ETIME, APPLICANT, USEFLAG, CREATETIME, CREATER,
		EDU_DAYS, EDU_HOUR_H, EDU_HOUR_M, RECOG_TIME_H, RECOG_TIME_M, ALW_STD_CD, DEPT_DESIGNATION_YN,
		DEPT_DESIGNATION_CD, OFFICETIME_CD, EDUINS_DIV_CD, PERF_ASSE_SBJ_CD
	)
	SELECT COMPANYID, SUBJECT_NUM,
		? OPEN_NUM, 
		? YYYY, 
		? CHASU, 
		SUBJECT_NAME, INSTITUTE_CODE, INSTITUTE_NAME, TRAINING_CODE,
		COURSE_CONTENTS, EDU_OBJECT, EDU_TARGET,
		? EDU_STIME,
		? EDU_ETIME, 
		? APPLY_STIME,
		? APPLY_ETIME, 
		? CANCEL_ETIME,
		? APPLICANT, 
		'Y' USEFLAG, SYSDATE CREATETIME, 
		? CREATER,
		? EDU_DAYS,
		EDU_HOUR_H, EDU_HOUR_M, RECOG_TIME_H, RECOG_TIME_M, ALW_STD_CD,
		DEPT_DESIGNATION_YN,DEPT_DESIGNATION_CD,OFFICETIME_CD, EDUINS_DIV_CD, PERF_ASSE_SBJ_CD
	FROM TB_BA_SBJCT BS
	WHERE BS.COMPANYID = ?
	    AND BS.SUBJECT_NUM = ?
	    AND BS.DEL_YN = 'N'
	    ]]></sql-query>
	
	<sql-query name="SELECT_IS_USE_SAME_PERIOD_OPEN_CNT" description="차수관리 - 엑셀 업로드시 동일기간의 개설유무 체크"><![CDATA[
	        -- BA_SUBJECT : SELECT_IS_USE_SAME_PERIOD_OPEN_CNT
	    
	SELECT COUNT(*) CNT
	FROM TB_BA_SBJCT_OPEN
	WHERE COMPANYID = ?
	    AND SUBJECT_NUM = ?
	    AND YYYY = ?
	    AND EDU_STIME = ?
	    AND EDU_ETIME = ?
	    AND DEL_YN = 'N'
	    AND NVL(CLOSING_YN, 'N') = 'N'
	    ]]></sql-query>
	
	<sql-query name="SELECT_IS_USE_OPEN_CNT" description="차수관리 - 엑셀 업로드시 존재하는 과정인지 체크"><![CDATA[
	        -- BA_SUBJECT : SELECT_IS_USE_OPEN_CNT
	    
	SELECT COUNT(*) CNT
	FROM TB_BA_SBJCT BS
	WHERE BS.COMPANYID = ? 
	    AND BS.SUBJECT_NUM = ?
	    AND BS.DEL_YN = 'N'
	    ]]></sql-query>
	
    <sql-query name="UPDATE_TB_BA_RECOMM_REQ_ADD_DATA" description="교육추천승인- 승인자가 최종 승인 처리"><![CDATA[
            -- BA_SUBJECT : "UPDATE_TB_BA_RECOMM_REQ_ADD_DATA"
        
    BEGIN 
    
    UPDATE TB_BA_APPR_REQ
    SET LAST_REQ_STS_CD = ?,
        LAST_REQ_STS_DTIME = SYSDATE,
        MODIFYTIME = SYSDATE,
        MODIFIER = ?
    WHERE COMPANYID = ? AND REQ_NUM = ?;
    
    UPDATE TB_BA_SBJCT_OPEN
    SET REQ_STS_CD = ?,
        MODIFYTIME = SYSDATE,
        MODIFIER = ?
    WHERE COMPANYID = ? AND REQ_NUM = ?;
    
    END;
        ]]></sql-query>
        
	<sql-query name="UPDATE_TB_BA_APPR_REQ_ADD_DATA" description="교육승인- 승인자가 최종 승인 처리"><![CDATA[
	        -- BA_SUBJECT : "UPDATE_TB_BA_APPR_REQ_ADD_DATA"
	    
	BEGIN 
	
	UPDATE TB_BA_APPR_REQ
	SET LAST_REQ_STS_CD = ?,
	    LAST_REQ_STS_DTIME = SYSDATE,
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND REQ_NUM = ?;
	
	IF ? = 'S' THEN -- 교육과정
		UPDATE TB_BA_SBJCT_OPEN_CLASS
		SET ATTEND_STATE_CODE = DECODE(?, '3', '3', ATTEND_STATE_CODE),
		    CANCEL_STIME = DECODE(?, '3', SYSDATE),
		    FAIL_REASON = DECODE(?, '3', ?),
		    REQ_STS_CD = ?,
		    MODIFYTIME = SYSDATE,
		    MODIFIER = ?
		WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?;
	ELSE -- 상시학습
		UPDATE TB_EM_ALW_STD
		SET REQ_STS_CD = ?,
		    MODIFYTIME = SYSDATE,
		    MODIFIER = ?,
		    RECOG_TIME_H = ?,
		    RECOG_TIME_M = ?
		WHERE COMPANYID = ? AND ALW_STD_SEQ = ?;
	END IF;
	
	END;
	    ]]></sql-query>
	
	<sql-query name="UPDATE_TB_BA_APPR_REQ_LINE" description="교육승인- 승인자가 승인요청건을 처리"><![CDATA[
	        -- BA_SUBJECT : UPDATE_TB_BA_APPR_REQ_LINE
	    
	UPDATE TB_BA_APPR_REQ_LINE
	SET REQ_STS_CD = ?,
	    REQ_REMARKS = ?,
	    REQ_STS_DTIME = SYSDATE,
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND REQ_NUM = ? AND REQ_LINE_SEQ = ?
	    ]]></sql-query>
	
	<sql-query name="GET_EDU_ALW_USER_LIST" description="상시학습과정의 수강생목록"><![CDATA[
	        -- BA_SUBJECT : GET_EDU_ALW_USER_LIST
	    
	SELECT EU.USERID, NAME,EU.GRADE_NUM, FUN_COMMON_CODE(ES.COMPANYID, 'BA15', EU.GRADE_NUM) GRADE_NM, TT_GET_SCO TT_GET_SCO_NUMB
    FROM TB_EM_ALW_STD ES, TB_EM_ALW_STD_USER EU, TB_BA_USER BU
    WHERE ES.COMPANYID = EU.COMPANYID AND ES.ALW_STD_SEQ = EU.ALW_STD_SEQ
        AND EU.COMPANYID  = BU.COMPANYID AND EU.USERID = BU.USERID
        AND ES.COMPANYID = ?
        AND ES.ALW_STD_SEQ = ?
        AND ES.USEFLAG = 'Y' AND ES.DEL_YN = 'N' AND EU.USEFLAG = 'Y' AND BU.USEFLAG = 'Y'
	    ]]></sql-query>
	
	<sql-query name="GET_EDU_ALW_INFO" description="상시학습 과정 정보 조회"><![CDATA[
	        -- BA_SUBJECT : GET_EDU_ALW_INFO
	    
	SELECT A.*
          FROM (
                SELECT EAS.ALW_STD_SEQ AS ASSEQ /* 개설번호 */
                     , EAS.SUBJECT_NM AS SUBJECT_NAME /* 과정명 */
                     , EAS.TRAINING_CD AS TRAINING_CODE /* 학습유형 */ 
                     , EAS.YYYY /* 개설년도 */
                     , EASU.TT_GET_SCO /* 취득점수 */
                     , EASU.USERID	
                     , (SELECT FUN_DATE_FORMAT(EAS.EDU_STIME, 1) FROM DUAL) EDU_STIME
                     , (SELECT FUN_DATE_FORMAT(EAS.EDU_ETIME, 1) FROM DUAL) EDU_ETIME
                     , NULL AS EDU_DAYS /* 교육일수 */
                     , NVL(EAS.EDU_HOUR_H,0) EDU_HOUR_H /* 교육시간 : 시 */
                     , NVL(EAS.EDU_HOUR_M,0) EDU_HOUR_M /* 교육시간 : 분 */
                     , NVL(EAS.RECOG_TIME_H,0) RECOG_TIME_H /* 인정시간 : 시 */
                     , NVL(EAS.RECOG_TIME_M,0) RECOG_TIME_M /* 인정시간 : 분 */
                     , EAS.EDU_CONT AS COURSE_CONTENTS /* 내용 */
                     , EAS.EDU_CONT
                     , SUBSTR(EAS.ALW_STD_CD, 1, 1) AS ALW_STD_CD1 /* 상시학습종류 1단계 */
                     , SUBSTR(EAS.ALW_STD_CD, 1, 4) AS ALW_STD_CD2 /* 상시학습종류 2단계 */
                     , (SELECT CD_VALUE3 FROM TB_BA_COMMONCODE BC WHERE BC.COMPANYID = EAS.COMPANYID AND BC.STANDARDCODE = 'BA08' AND BC.COMMONCODE = EAS.ALW_STD_CD) ALW_STD_CD3
                     , (SELECT CD_VALUE5 FROM TB_BA_COMMONCODE BC WHERE BC.COMPANYID = EAS.COMPANYID AND BC.STANDARDCODE = 'BA08' AND BC.COMMONCODE = EAS.ALW_STD_CD) ALW_STD_CD4
                     , EAS.ALW_STD_CD AS ALW_STD_CD /* 상시학습종류 3단계 */
                     , NVL(EAS.DEPT_DESIGNATION_YN,'N') DEPT_DESIGNATION_YN /* 부처지정유무 */
                     , EAS.DEPT_DESIGNATION_CD /* 지정학습구분 */
                     , EAS.OFFICETIME_CD /* 업무시간구분 */
                     , EAS.EDUINS_DIV_CD /* 교육기관구분 */
                     , EAS.INSTITUTE_NAME /* 교육기관 */
                     , EAS.INSTITUTE_CODE /* 교육기관코드 */
                     , EAS.PERF_ASSE_SBJ_CD /* 기관성과평가 */
                     , NVL(EAS.REQUIRED_YN,'N') REQUIRED_YN /* 필수구분 */
                     , EAS.REQ_NUM /* 결재번호 */
                     , EAS.REQ_STS_CD /* 승인상태코드 */
                     , CASE WHEN EAS.REQ_STS_CD IN ('1') AND EASU.USERID = EASU.CREATER THEN 'DTL'
                            WHEN EAS.REQ_STS_CD = '0' AND EASU.USERID = EASU.CREATER THEN 'MOD'
                            ELSE ''
                        END ALW_STS /* 상태 */
                     , EAS.ALW_STD_SEQ AS OBJECTID /* 첨부파일번호 */
                     , EASU.GRADE_NUM /* 인정직급 */
                     , EASU.DIVISIONID /* 당시소속 */
                     , EASU.JOB /* 당시직무 */
                     , EASU.LEADERSHIP /* 당시계급 */                    
                     , EAS.CMPNUMBER /* 학습역량 */
                     , (SELECT CMPNAME FROM TB_CM_COMPETENCY WHERE COMPANYID = EAS.COMPANYID AND CMPNUMBER = EAS.CMPNUMBER) CMPNAME
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA03', EAS.TRAINING_CD) TRAINING_STRING
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', EAS.ALW_STD_CD) ALW_STD_NM
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', SUBSTR(EAS.ALW_STD_CD, 1, 1)) ALW_STD_NM1
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', SUBSTR(EAS.ALW_STD_CD, 1, 4)) ALW_STD_NM2                     
                     , DECODE(EAS.DEPT_DESIGNATION_YN, 'Y', '예', '아니오') DEPT_DESIGNATION_NM
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA04', EAS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA11', EAS.PERF_ASSE_SBJ_CD)  PERF_ASSE_SBJ_NM
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA07', EAS.OFFICETIME_CD) OFFICETIME_NM 
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA05', EAS.EDUINS_DIV_CD) EDUINS_DIV_NM
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA13', EAS.REQ_STS_CD) REQ_STS_NM                     
                  FROM TB_EM_ALW_STD_USER EASU,
                          TB_EM_ALW_STD EAS
                 WHERE EASU.COMPANYID = ?                   
                   AND EASU.ALW_STD_SEQ = ?
                   AND EASU.USEFLAG = 'Y'
                   AND EASU.COMPANYID = EAS.COMPANYID
                   AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                   AND EAS.USEFLAG = 'Y'
                   AND EAS.DEL_YN = 'N'
              ) A
	    ]]></sql-query>
	
	
    <sql-query name="GET_EDU_RECOMM_APPR_LIST" description="교육추천승인 목록 조회"><![CDATA[
            -- BA_SUBJECT : GET_EDU_RECOMM_APPR_LIST
        
    SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
    FROM(
        SELECT DVS_NAME, DVS_FULLNAME, NAME, GRADE_NM, BS.SUBJECT_NUM, BS.COMPANYID, BS.OPEN_NUM, BS.YYYY, BS.CHASU, BS.SUBJECT_NAME, FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CODE) TRAINING_NM, 
            TO_CHAR(BS.EDU_STIME, 'YYYY-MM-DD') ||'~'|| TO_CHAR(BS.EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD, DECODE(BS.DEPT_DESIGNATION_YN, 'Y', '예', '아니오') DEPT_DESIGNATION_YN_NM, NVL(BS.RECOG_TIME_H, 0)||'시간'||NVL(BS.RECOG_TIME_M, 0)||'분' RECOG_TIME,
            BR.REQ_NUM, BR.LAST_REQ_STS_CD, BR.REQ_LINE_SEQ, BR.REQ_STS_CD, FUN_COMMON_CODE(BS.COMPANYID, 'BA13', BR.REQ_STS_CD) REQ_STS_NM, BR.REQ_USERID, BR.LAST_REQ_LINE_SEQ, REQ_DTIME, DECODE(BR.REQ_STS_CD, '1', 1, 2) STS_SORT,
            BS.INSTITUTE_NAME,
            (
            SELECT COUNT(*)
            FROM TB_BA_SBJCT_OPEN_CLASS
            WHERE COMPANYID = BS.COMPANYID AND OPEN_NUM = BS.OPEN_NUM
                AND ATTEND_STATE_CODE = '1'
                AND REQ_STS_CD = '2'
                AND USEFLAG = 'Y' AND DEL_YN = 'N'
            ) APPLY_NUMB
        FROM TB_BA_SBJCT_OPEN BS,
            (
            SELECT AR.COMPANYID, AR.REQ_NUM, AR.LAST_REQ_STS_CD, AL.REQ_LINE_SEQ, AL.REQ_STS_CD, AR.REQ_USERID, AR.LAST_REQ_LINE_SEQ, AR.REQ_DTIME
            FROM TB_BA_APPR_REQ AR, TB_BA_APPR_REQ_LINE AL
            WHERE AR.COMPANYID = AL.COMPANYID AND AR.REQ_NUM = AL.REQ_NUM
                AND AR.USEFLAG = 'Y' AND AL.USEFLAG = 'Y'
                AND AR.LAST_REQ_STS_CD !='0' -- 요청취소가 아닌
                AND AR.REQ_TYPE_CD = '6' -- 교육추천승인에 대한 승인요청.
                AND AL.APPR_USERID = ?
                AND TO_CHAR(AR.REQ_DTIME, 'YYYY') = ?
                AND (
                    AL.REQ_LINE_SEQ = 1 OR -- 첫번째 승인자 이거나 이전 승인자가 승인한 경우 
                    (SELECT REQ_STS_CD FROM TB_BA_APPR_REQ_LINE WHERE COMPANYID = AR.COMPANYID AND REQ_NUM = AR.REQ_NUM AND REQ_LINE_SEQ = AL.REQ_LINE_SEQ -1 AND AL.USEFLAG = 'Y') = '2' 
                    )
            ) BR, TB_BA_USER BU, TB_BA_DIVISION BD
        WHERE BS.COMPANYID = BR.COMPANYID AND BS.REQ_NUM = BR.REQ_NUM
            AND BR.REQ_USERID = BU.USERID
            AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
            AND BS.USEFLAG = 'Y' AND BS.DEL_YN = 'N' AND NVL(BS.CLOSING_YN, 'N') = 'N'
            AND BS.COMPANYID = ?
        ) A
    WHERE 1=1
    ]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
    ]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
    ]]></sql-query>
    
	<sql-query name="GET_EDU_APPR_LIST" description="교육승인 목록 조회"><![CDATA[
	        -- BA_SUBJECT : GET_EDU_APPR_LIST
	    
	SELECT /*+ all_rows */ A.*, COUNT(*) OVER() TOTALITEMCOUNT
	FROM(
	    SELECT 'S' EDU_DIV, '교육신청' EDU_DIV_NM, DVS_NAME, DVS_FULLNAME, NAME, GRADE_NM, BS.SUBJECT_NUM, BS.COMPANYID, BS.OPEN_NUM, BS.YYYY, BS.CHASU, BS.SUBJECT_NAME, FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CODE) TRAINING_NM, 
	        TO_CHAR(BS.EDU_STIME, 'YYYY-MM-DD') ||'~'|| TO_CHAR(BS.EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD, DECODE(BS.DEPT_DESIGNATION_YN, 'Y', '예', '아니오') DEPT_DESIGNATION_YN_NM, NVL(BS.RECOG_TIME_H, 0)||'시간'||NVL(BS.RECOG_TIME_M, 0)||'분' RECOG_TIME,
	        BR.REQ_NUM, BR.LAST_REQ_STS_CD, BR.REQ_LINE_SEQ, BR.REQ_STS_CD, FUN_COMMON_CODE(BS.COMPANYID, 'BA13', BR.REQ_STS_CD) REQ_STS_NM, BR.REQ_USERID, BR.LAST_REQ_LINE_SEQ, REQ_DTIME, BC.USERID, DECODE(BR.REQ_STS_CD, '1', 1, 2) STS_SORT
	    FROM TB_BA_SBJCT_OPEN BS, TB_BA_SBJCT_OPEN_CLASS BC, 
	        (
	        SELECT AR.COMPANYID, AR.REQ_NUM, AR.LAST_REQ_STS_CD, AL.REQ_LINE_SEQ, AL.REQ_STS_CD, AR.REQ_USERID, AR.LAST_REQ_LINE_SEQ, AR.REQ_DTIME
	        FROM TB_BA_APPR_REQ AR, TB_BA_APPR_REQ_LINE AL
	        WHERE AR.COMPANYID = AL.COMPANYID AND AR.REQ_NUM = AL.REQ_NUM
	            AND AR.USEFLAG = 'Y' AND AL.USEFLAG = 'Y'
	            AND AR.LAST_REQ_STS_CD !='0' -- 요청취소가 아닌
	            AND AR.REQ_TYPE_CD = '2' -- 교육신청에 대한 승인요청.
	            AND AL.APPR_USERID = ?
	            AND TO_CHAR(AR.REQ_DTIME, 'YYYY') = ?
	            AND (
	                AL.REQ_LINE_SEQ = 1 OR -- 첫번째 승인자 이거나 이전 승인자가 승인한 경우 
	                (SELECT REQ_STS_CD FROM TB_BA_APPR_REQ_LINE WHERE COMPANYID = AR.COMPANYID AND REQ_NUM = AR.REQ_NUM AND REQ_LINE_SEQ = AL.REQ_LINE_SEQ -1 AND AL.USEFLAG = 'Y') = '2' 
	                )
	        ) BR, TB_BA_USER BU, TB_BA_DIVISION BD
	    WHERE BS.COMPANYID = BC.COMPANYID AND BS.OPEN_NUM = BC.OPEN_NUM 
	        AND BC.COMPANYID = BR.COMPANYID AND BC.REQ_NUM = BR.REQ_NUM
	        AND BR.REQ_USERID = BU.USERID
	        AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
	        AND BS.USEFLAG = 'Y' AND BS.DEL_YN = 'N' AND NVL(BS.CLOSING_YN, 'N') = 'N'
	        AND BC.USEFLAG = 'Y' AND BC.DEL_YN  = 'N' AND BC.ATTEND_STATE_CODE != '3' --취소가 아닌.
	        AND BS.COMPANYID = ?
	    UNION ALL
	    SELECT 'A' EDU_DIV, '상시학습' EDU_DIV_NM, DVS_NAME, DVS_FULLNAME, NAME, GRADE_NM, NULL SUBJECT_NUM, ES.COMPANYID, ES.ALW_STD_SEQ OPEN_NUM, ES.YYYY, NULL CHASU, ES.SUBJECT_NM,FUN_COMMON_CODE(ES.COMPANYID, 'BA03', ES.TRAINING_CD) TRAINING_NM, 
	        TO_CHAR(ES.EDU_STIME, 'YYYY-MM-DD') ||'~'|| TO_CHAR(ES.EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD, DECODE(ES.DEPT_DESIGNATION_YN, 'Y', '예', '아니오') DEPT_DESIGNATION_YN_NM, NVL(ES.RECOG_TIME_H, 0)||'시간'||NVL(ES.RECOG_TIME_M, 0)||'분' RECOG_TIME,
	        BR.REQ_NUM, BR.LAST_REQ_STS_CD, BR.REQ_LINE_SEQ, BR.REQ_STS_CD, FUN_COMMON_CODE(ES.COMPANYID, 'BA13', BR.REQ_STS_CD) REQ_STS_NM, BR.REQ_USERID, BR.LAST_REQ_LINE_SEQ, REQ_DTIME, NULL USERID, DECODE(BR.REQ_STS_CD, '1', 1, 2) STS_SORT
	    FROM TB_EM_ALW_STD ES,
	        (
	        SELECT AR.COMPANYID, AR.REQ_NUM, AR.LAST_REQ_STS_CD, AL.REQ_LINE_SEQ, AL.REQ_STS_CD, AR.REQ_USERID, AR.LAST_REQ_LINE_SEQ, AR.REQ_DTIME
	        FROM TB_BA_APPR_REQ AR, TB_BA_APPR_REQ_LINE AL
	        WHERE AR.COMPANYID = AL.COMPANYID AND AR.REQ_NUM = AL.REQ_NUM
	            AND AR.USEFLAG = 'Y' AND AL.USEFLAG = 'Y'
	            AND AR.LAST_REQ_STS_CD !='0' -- 요청취소가 아닌
	            AND AR.REQ_TYPE_CD = '3' -- 상시학습신청에 대한 승인요청.
	            AND AL.APPR_USERID = ?
	            AND TO_CHAR(AR.REQ_DTIME, 'YYYY') = ?
	            AND (
	                AL.REQ_LINE_SEQ = 1 OR -- 첫번째 승인자 이거나 이전 승인자가 승인한 경우 
	                (SELECT REQ_STS_CD FROM TB_BA_APPR_REQ_LINE WHERE COMPANYID = AR.COMPANYID AND REQ_NUM = AR.REQ_NUM AND REQ_LINE_SEQ = AL.REQ_LINE_SEQ -1 AND AL.USEFLAG = 'Y') = '2' 
	                )
	        ) BR, TB_BA_USER BU, TB_BA_DIVISION BD
	    WHERE ES.COMPANYID = BR.COMPANYID AND ES.REQ_NUM = BR.REQ_NUM
	        AND BR.REQ_USERID = BU.USERID
	        AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
	        AND ES.USEFLAG = 'Y' AND ES.DEL_YN = 'N'
	        AND ES.COMPANYID = ?
	    ) A
	WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
	<sql-query name="MERGEE_TB_EM_USER_EDU_CMP_TIME" description="연간 사용자별 교육이수시간 저장"><![CDATA[
	        -- BA_SUBJECT : "MERGEE_TB_EM_USER_EDU_CMP_TIME"
	    
	MERGE INTO TB_EM_USER_EDU_CMP_TIME A
	USING(
	    SELECT 
	        ? YYYY, 
	        ? USERID, 
	        ? TT_CMP_TIME_H, 
	        ? TT_CMP_TIME_M, 
	        SYSDATE CREATETIME, 
	        ? CREATER
	    FROM DUAL
	) B
	ON ( A.USERID = B.USERID AND A.YYYY = B.YYYY )
	WHEN NOT MATCHED THEN
	    INSERT(A.USERID, A.YYYY, A.TT_CMP_TIME_H, A.TT_CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.USERID, B.YYYY, B.TT_CMP_TIME_H, B.TT_CMP_TIME_M, 'Y', B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.TT_CMP_TIME_H = B.TT_CMP_TIME_H,
	        A.TT_CMP_TIME_M = B.TT_CMP_TIME_M,
	        A.USEFLAG = 'Y',
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER
	    ]]></sql-query>
	
	<sql-query name="MERGE_TB_EM_USER_DEPT_DESI_TIME" description="사용자별 지정학습구분 교육이수시간 저장"><![CDATA[
	        -- BA_SUBJECT : "MERGE_TB_EM_USER_DEPT_DESI_TIME"
	    
	MERGE INTO TB_EM_USER_DEPT_DESI_TIME A
	USING(
	    SELECT 
	        ? YYYY, 
	        ? USERID, 
	        ? DEPT_DESIGNATION_CD, 
	        (SELECT CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = ? AND STANDARDCODE = 'BA04' AND COMMONCODE = ?) DEPT_DESIGNATION_NM, 
	        ? CMP_TIME_H, 
	        ? CMP_TIME_M, 
	        SYSDATE CREATETIME, 
	        ? CREATER
	    FROM DUAL
	) B
	ON ( A.USERID = B.USERID AND A.YYYY = B.YYYY AND A.DEPT_DESIGNATION_CD = B.DEPT_DESIGNATION_CD )
	WHEN NOT MATCHED THEN
	    INSERT(A.USERID, A.YYYY, A.DEPT_DESIGNATION_CD, A.DEPT_DESIGNATION_NM, A.CMP_TIME_H, A.CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.USERID, B.YYYY, B.DEPT_DESIGNATION_CD, B.DEPT_DESIGNATION_NM, B.CMP_TIME_H, B.CMP_TIME_M, 'Y', B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.DEPT_DESIGNATION_NM = B.DEPT_DESIGNATION_NM,
	        A.CMP_TIME_H = B.CMP_TIME_H,
	        A.CMP_TIME_M = B.CMP_TIME_M,
	        A.USEFLAG = 'Y',
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER
	    ]]></sql-query>
	
	<sql-query name="MERGE_TB_EM_USER_PERF_ASSE_TIME" description="사용자별 기관성과평가 교육이수시간 저장"><![CDATA[
	        -- BA_SUBJECT : "MERGE_TB_EM_USER_PERF_ASSE_TIME"
	    
	MERGE INTO TB_EM_USER_PERF_ASSE_TIME A
	USING(
	    SELECT 
	        ? YYYY, 
	        ? USERID, 
	        ? PERF_ASSE_SBJ_CD, 
	        (SELECT CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = ? AND STANDARDCODE = 'BA11' AND COMMONCODE = ?) PERF_ASSE_SBJ_NM, 
	        ? CMP_TIME_H, 
	        ? CMP_TIME_M, 
	        SYSDATE CREATETIME, 
	        ? CREATER
	    FROM DUAL
	) B
	ON ( A.USERID = B.USERID AND A.YYYY = B.YYYY AND A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD )
	WHEN NOT MATCHED THEN
	    INSERT(A.USERID, A.YYYY, A.PERF_ASSE_SBJ_CD, A.PERF_ASSE_SBJ_NM, A.CMP_TIME_H, A.CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.USERID, B.YYYY, B.PERF_ASSE_SBJ_CD, B.PERF_ASSE_SBJ_NM, B.CMP_TIME_H, B.CMP_TIME_M, 'Y', B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.PERF_ASSE_SBJ_NM = B.PERF_ASSE_SBJ_NM,
	        A.CMP_TIME_H = B.CMP_TIME_H,
	        A.CMP_TIME_M = B.CMP_TIME_M,
	        A.USEFLAG = 'Y',
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER
	    ]]></sql-query>
	
	<sql-query name="SAVE_ALL_USER_YEAR_RECOG_TIME" description="연간 교육이수시간 저장"><![CDATA[
	        -- BA_SUBJECT : "SAVE_ALL_USER_YEAR_RECOG_TIME"
	
	BEGIN
	
	UPDATE TB_EM_USER_EDU_CMP_TIME
	SET USEFLAG = 'N',
	    MODIFYTIME =  SYSDATE,
	    MODIFIER = ?
	WHERE YYYY = ?;
	
	MERGE INTO TB_EM_USER_EDU_CMP_TIME A
	USING(
	    SELECT ? YYYY, BU.USERID, TT_CMP_TIME_H, TT_CMP_TIME_M, SYSDATE CREATETIME, ? CREATER
	    FROM TB_BA_USER BU, TB_EM_GRADE_CMP_TIME EC
	    WHERE BU.COMPANYID = EC.COMPANYID AND BU.GRADE_NUM = EC.GRADE_CD
	        AND BU.USEFLAG = 'Y' AND EC.USEFLAG = 'Y' AND EMP_STS_CD = '10'
	) B
	ON ( A.USERID = B.USERID AND A.YYYY = B.YYYY )
	WHEN NOT MATCHED THEN
	    INSERT(A.USERID, A.YYYY, A.TT_CMP_TIME_H, A.TT_CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.USERID, B.YYYY, B.TT_CMP_TIME_H, B.TT_CMP_TIME_M, 'Y', B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.TT_CMP_TIME_H = B.TT_CMP_TIME_H,
	        A.TT_CMP_TIME_M = B.TT_CMP_TIME_M,
	        A.USEFLAG = 'Y',
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER;
	        
	UPDATE TB_EM_USER_DEPT_DESI_TIME
	SET USEFLAG = 'N',
	    MODIFYTIME =  SYSDATE,
	    MODIFIER = ?
	WHERE YYYY = ?;
	
	MERGE INTO TB_EM_USER_DEPT_DESI_TIME A
	USING(
	    SELECT ? YYYY, USERID, ECD.DEPT_DESIGNATION_CD, ECD.CMM_CODENAME DEPT_DESIGNATION_NM, ECD.CMP_TIME_H, ECD.CMP_TIME_M, SYSDATE CREATETIME, ? CREATER
	    FROM TB_BA_USER BU,
	        (
	        SELECT EC.COMPANYID, ED.GRADE_CD, ED.DEPT_DESIGNATION_CD, BC.CMM_CODENAME, CMP_TIME_H, CMP_TIME_M
	        FROM TB_EM_GRADE_CMP_TIME EC, TB_EM_GRADE_DEPT_DESI_TIME ED, TB_BA_COMMONCODE BC
	        WHERE EC.COMPANYID = ED.COMPANYID AND EC.GRADE_CD = ED.GRADE_CD
	            AND ED.COMPANYID = BC.COMPANYID AND ED.DEPT_DESIGNATION_CD = BC.COMMONCODE AND BC.STANDARDCODE = 'BA04'
	            AND EC.USEFLAG = 'Y' AND ED.USEFLAG = 'Y' AND BC.USEFLAG = 'Y'
	        ) ECD
	    WHERE BU.COMPANYID = ECD.COMPANYID AND BU.GRADE_NUM = ECD.GRADE_CD
	        AND BU.USEFLAG = 'Y' AND EMP_STS_CD = '10'
	) B
	ON ( A.USERID = B.USERID AND A.YYYY = B.YYYY AND A.DEPT_DESIGNATION_CD = B.DEPT_DESIGNATION_CD )
	WHEN NOT MATCHED THEN
	    INSERT(A.USERID, A.YYYY, A.DEPT_DESIGNATION_CD, A.DEPT_DESIGNATION_NM, A.CMP_TIME_H, A.CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.USERID, B.YYYY, B.DEPT_DESIGNATION_CD, B.DEPT_DESIGNATION_NM, B.CMP_TIME_H, B.CMP_TIME_M, 'Y', B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.DEPT_DESIGNATION_NM = B.DEPT_DESIGNATION_NM,
	        A.CMP_TIME_H = B.CMP_TIME_H,
	        A.CMP_TIME_M = B.CMP_TIME_M,
	        A.USEFLAG = 'Y',
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER;
	        
	UPDATE TB_EM_USER_PERF_ASSE_TIME
	SET USEFLAG = 'N',
	    MODIFYTIME =  SYSDATE,
	    MODIFIER = ?
	WHERE YYYY = ?;
	
	MERGE INTO TB_EM_USER_PERF_ASSE_TIME A
	USING(
	    SELECT ? YYYY, BU.USERID, EP.PERF_ASSE_SBJ_CD, BC.CMM_CODENAME PERF_ASSE_SBJ_NM, EP.CMP_TIME_H, EP.CMP_TIME_M, SYSDATE CREATETIME, ? CREATER
	    FROM(
	        SELECT BU.COMPANYID, BU.USERID, BU.DIVISIONID
	        FROM TB_BA_USER BU, TB_EM_GRADE_CMP_TIME EC
	        WHERE BU.COMPANYID = EC.COMPANYID AND BU.GRADE_NUM = EC.GRADE_CD
	            AND BU.USEFLAG = 'Y' AND EC.USEFLAG = 'Y' AND EMP_STS_CD = '10'
	        ) BU, TB_BA_DIVISION BD, TB_EM_DEPT_PERF_ASSE_TIME EP, TB_BA_COMMONCODE BC
	    WHERE BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
	        AND BD.COMPANYID = EP.COMPANYID AND BD.DEPT_STND_CD = EP.DEPT_STND_CD
	        AND EP.COMPANYID = BC.COMPANYID AND EP.PERF_ASSE_SBJ_CD = BC.COMMONCODE AND BC.STANDARDCODE = 'BA11'
	        AND EP.USEFLAG = 'Y' AND BC.USEFLAG = 'Y'
	) B
	ON ( A.USERID = B.USERID AND A.YYYY = B.YYYY AND A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD )
	WHEN NOT MATCHED THEN
	    INSERT(A.USERID, A.YYYY, A.PERF_ASSE_SBJ_CD, A.PERF_ASSE_SBJ_NM, A.CMP_TIME_H, A.CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.USERID, B.YYYY, B.PERF_ASSE_SBJ_CD, B.PERF_ASSE_SBJ_NM, B.CMP_TIME_H, B.CMP_TIME_M, 'Y', B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.PERF_ASSE_SBJ_NM = B.PERF_ASSE_SBJ_NM,
	        A.CMP_TIME_H = B.CMP_TIME_H,
	        A.CMP_TIME_M = B.CMP_TIME_M,
	        A.USEFLAG = 'Y',
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER;
	        
	END;
	    ]]></sql-query>
	
	<sql-query name="SELECT_USER_RECOG_TIME_LIST" description="연간 부서원 이수시간 조회"><![CDATA[
	        -- BA_SUBJECT : SELECT_USER_RECOG_TIME_LIST
	SELECT AA.*, COUNT(*) OVER() TOTALITEMCOUNT
	FROM(
		SELECT DD. USERID, NAME, EMPNO, DVS_NAME, FUN_COMMON_CODE(COMPANYID, 'BA15', GRADE_NUM) GRADE_NM, GRADE_DIV_NM, TT_CMP_TIME_H, TT_CMP_TIME_M
		]]><dynamic><![CDATA[ ${ SELECT_TO_STR } ]]></dynamic><![CDATA[
	FROM(
	    SELECT COMPANYID, USERID, NAME, EMPNO, DVS_NAME, GRADE_NUM, GRADE_DIV_NM, TT_CMP_TIME_H, TT_CMP_TIME_M
	]]><dynamic><![CDATA[ ${ SELECT_MAX_DD_STR } ]]></dynamic><![CDATA[
	FROM(
	    SELECT BU.COMPANYID, BU.USERID, NAME, EMPNO, DVS_NAME, BU.GRADE_NUM, BC.CD_VALUE1 GRADE_DIV_NM, TT_CMP_TIME_H, TT_CMP_TIME_M
	]]><dynamic><![CDATA[ ${ SELECT_DECODE_DD_STR } ]]></dynamic><![CDATA[
	    FROM TB_BA_USER BU, TB_BA_DIVISION BD, 
	           ( 
	           SELECT EC.USERID, EC.YYYY, TT_CMP_TIME_H, TT_CMP_TIME_M, DEPT_DESIGNATION_CD, DEPT_DESIGNATION_NM, CMP_TIME_H, CMP_TIME_M 
	           FROM TB_EM_USER_EDU_CMP_TIME EC, TB_EM_USER_DEPT_DESI_TIME ED 
	           WHERE EC.USERID = ED.USERID AND EC.YYYY = ED.YYYY 
	               AND EC.USEFLAG = 'Y' AND ED.USEFLAG = 'Y' 
	               AND EC.YYYY = ?
	           ) ECD , TB_BA_COMMONCODE BC
	       WHERE BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
               AND BU.COMPANYID = BC.COMPANYID(+) AND BU.GRADE_NUM = BC.COMMONCODE(+) AND BC.STANDARDCODE(+) = 'BA15'
	           AND BU.USERID = ECD.USERID(+) 
	           AND BU.USEFLAG = 'Y' AND EMP_STS_CD = '10'  
	    )
	GROUP BY COMPANYID, USERID, NAME, EMPNO, DVS_NAME, GRADE_NUM, GRADE_DIV_NM, TT_CMP_TIME_H, TT_CMP_TIME_M
	) DD,
	(
	SELECT USERID
	]]><dynamic><![CDATA[ ${ SELECT_MAX_PD_STR } ]]></dynamic><![CDATA[
	FROM(
	    SELECT BU.USERID
	]]><dynamic><![CDATA[ ${ SELECT_DECODE_PD_STR } ]]></dynamic><![CDATA[
		        FROM TB_BA_USER BU, TB_EM_USER_PERF_ASSE_TIME EP
	            WHERE  BU.USEFLAG = 'Y' AND EMP_STS_CD = '10' AND EP.USEFLAG(+) = 'Y'
	                AND BU.USERID = EP.USERID(+)
	                AND EP.YYYY = ?
		        )
		    GROUP BY USERID
		    ) PD
		WHERE DD.USERID = PD.USERID(+)
		) AA
	WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic>
	</sql-query>
	
	<sql-query name="SELECT_PERF_ASSE_CODE_LIST" description="년간 사용된 기관성과평가 필수교육 코드 목록"><![CDATA[
	        -- BA_SUBJECT : SELECT_PERF_ASSE_CODE_LIST
	
	SELECT PERF_ASSE_SBJ_CD VALUE, PERF_ASSE_SBJ_NM TEXT
	FROM TB_EM_USER_PERF_ASSE_TIME
	WHERE USEFLAG = 'Y'
	    AND YYYY = ?
	GROUP BY PERF_ASSE_SBJ_CD, PERF_ASSE_SBJ_NM
	ORDER BY PERF_ASSE_SBJ_CD
	    ]]></sql-query>
	
	<sql-query name="SELECT_DEPT_DESIGNATION_CODE_LIST" description="년간 사용된 부처지정구분 코드 목록"><![CDATA[
	        -- BA_SUBJECT : SELECT_DEPT_DESIGNATION_CODE_LIST
	    
	SELECT DEPT_DESIGNATION_CD VALUE, DEPT_DESIGNATION_NM TEXT
	FROM TB_EM_USER_DEPT_DESI_TIME
	WHERE USEFLAG = 'Y'
	    AND YYYY = ?
	GROUP BY DEPT_DESIGNATION_CD, DEPT_DESIGNATION_NM
	ORDER BY DEPT_DESIGNATION_CD
	    ]]></sql-query>
	
	<sql-query name="MERGE_TB_EM_DEPT_PERF_ASSE_TIME" description="기관성과평가 필수과정 이수시간 머지"><![CDATA[
	        -- BA_SUBJECT : MERGE_TB_EM_DEPT_PERF_ASSE_TIME
	    
	MERGE INTO TB_EM_DEPT_PERF_ASSE_TIME A
	USING (
	    SELECT
	        ? COMPANYID,
	        ? DEPT_STND_CD, 
	        ? PERF_ASSE_SBJ_CD, 
	        ? CMP_TIME_H, 
	        ? CMP_TIME_M, 
	        'Y' USEFLAG, 
	        SYSDATE CREATETIME, 
	        ? CREATER
	    FROM DUAL
	) B
	ON ( A.COMPANYID = B.COMPANYID AND A.DEPT_STND_CD = B.DEPT_STND_CD AND A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD )
	WHEN NOT MATCHED THEN
	    INSERT(A.COMPANYID, A.DEPT_STND_CD, A.PERF_ASSE_SBJ_CD, A.CMP_TIME_H, A.CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.COMPANYID, B.DEPT_STND_CD, B.PERF_ASSE_SBJ_CD, B.CMP_TIME_H, B.CMP_TIME_M, B.USEFLAG, B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.CMP_TIME_H = B.CMP_TIME_H,
	        A.CMP_TIME_M = B.CMP_TIME_M,
	        A.USEFLAG = B.USEFLAG,
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER
	    ]]></sql-query>
	
	<sql-query name="INIT_TB_EM_DEPT_PERF_ASSE_TIME" description="기관성과평가 필수과정 이수시간 초기화"><![CDATA[
	        -- BA_SUBJECT : INIT_TB_EM_DEPT_PERF_ASSE_TIME
	    
	UPDATE TB_EM_DEPT_PERF_ASSE_TIME
	SET USEFLAG = 'N'
	WHERE COMPANYID = ?
	    ]]></sql-query>
	
	<sql-query name="SELECT_PERF_ASSE_RECOG_BASE_TIME" description="기관성과평가 필수과정 기준 이수시간 검색"><![CDATA[
	        -- BA_SUBJECT : SELECT_PERF_ASSE_RECOG_BASE_TIME
	    
	SELECT '' CHECKED, BC.COMMONCODE DEPT_STND_CD, BC.CMM_CODENAME DEPT_STND_NM
	]]><dynamic><![CDATA[ ${ SELECT_O_STR } ]]></dynamic><![CDATA[
	FROM TB_BA_COMMONCODE BC,
	    (
	    SELECT ED.COMPANYID, ED.DEPT_STND_CD
	]]><dynamic><![CDATA[ ${ SELECT_T_STR } ]]></dynamic><![CDATA[
	    FROM TB_EM_DEPT_PERF_ASSE_TIME ED
	    WHERE ED.USEFLAG = 'Y' 
	        AND ED.COMPANYID = ?
	    GROUP BY ED.COMPANYID, ED.DEPT_STND_CD
	    ) PC
	WHERE BC.COMPANYID = PC.COMPANYID(+) AND BC.COMMONCODE = PC.DEPT_STND_CD(+)
	    AND BC.STANDARDCODE='BA20' AND BC.USEFLAG = 'Y'
	        AND BC.COMPANYID = ?
	ORDER BY TO_NUMBER(BC.COMMONCODE)
	    ]]></sql-query>
	
	<sql-query name="SELECT_GRADE_RECOG_BASE_TIME" description="직급별 기준 이수시간 검색"><![CDATA[
	        -- BA_SUBJECT : SELECT_GRADE_RECOG_BASE_TIME
	    
	SELECT '' CHECKED, BC.COMMONCODE GRADE_CD, BC.CMM_CODENAME GRADE_NM, BC.CD_VALUE1, TT_CMP_TIME_H, TT_CMP_TIME_M
	]]><dynamic><![CDATA[ ${ SELECT_O_STR } ]]></dynamic><![CDATA[
	FROM TB_BA_COMMONCODE BC,
	    (
	    SELECT EC.COMPANYID, EC.GRADE_CD
	        , EC.TT_CMP_TIME_H, EC.TT_CMP_TIME_M
	]]><dynamic><![CDATA[ ${ SELECT_T_STR } ]]></dynamic><![CDATA[
	    FROM TB_EM_GRADE_CMP_TIME EC, TB_EM_GRADE_DEPT_DESI_TIME ED
	    WHERE EC.COMPANYID = ED.COMPANYID(+) AND EC.GRADE_CD = ED.GRADE_CD(+)
	        AND EC.USEFLAG = 'Y' AND ED.USEFLAG(+) = 'Y'
	        AND EC.COMPANYID = ?
	    GROUP BY EC.COMPANYID, EC.GRADE_CD, EC.TT_CMP_TIME_H, EC.TT_CMP_TIME_M
	    ) GC
	WHERE BC.COMPANYID = GC.COMPANYID(+) AND BC.COMMONCODE = GC.GRADE_CD(+)
	    AND BC.STANDARDCODE='BA15' AND BC.USEFLAG = 'Y'
	    AND BC.COMPANYID = ?
	ORDER BY BC.CMM_CODENAME
	    ]]></sql-query>
	
	<sql-query name="INIT_GRADE_CMP_TIME" description="직급별 기준 이수시간 초기화"><![CDATA[
	        -- BA_SUBJECT : INIT_GRADE_CMP_TIME
	    
	BEGIN
	
	    UPDATE TB_EM_GRADE_CMP_TIME
	    SET USEFLAG = 'N'
	    WHERE COMPANYID = ?;
	    
	    UPDATE TB_EM_GRADE_DEPT_DESI_TIME
	    SET USEFLAG = 'N'
	    WHERE COMPANYID = ?;
	
	END;
	    ]]></sql-query>
	
	<sql-query name="MERGE_TB_EM_GRADE_CMP_TIME" description="직급별 기준 이수시간 저장 1"><![CDATA[
	        -- BA_SUBJECT : MERGE_TB_EM_GRADE_CMP_TIME
	    
	MERGE INTO TB_EM_GRADE_CMP_TIME A
	USING(
	    SELECT
	        ? COMPANYID,
	        ? GRADE_CD,
	        ? TT_CMP_TIME_H,
	        ? TT_CMP_TIME_M,
	        'Y' USEFLAG,
	        SYSDATE CREATETIME,
	        ? CREATER
	    FROM DUAL
	) B
	ON ( A.COMPANYID = B.COMPANYID AND A.GRADE_CD = B.GRADE_CD )
	WHEN NOT MATCHED THEN
	    INSERT(A.COMPANYID, A.GRADE_CD, A.TT_CMP_TIME_H, A.TT_CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.COMPANYID, B.GRADE_CD, B.TT_CMP_TIME_H, B.TT_CMP_TIME_M, B.USEFLAG, B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.TT_CMP_TIME_H = B.TT_CMP_TIME_H, 
	        A.TT_CMP_TIME_M = B.TT_CMP_TIME_M,
	        A.USEFLAG = B.USEFLAG,
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER
	    ]]></sql-query>
	
	<sql-query name="MERGE_TB_EM_GRADE_DEPT_DESI_TIME" description="직급별 기준 이수시간 저장 2"><![CDATA[
	        -- BA_SUBJECT : MERGE_TB_EM_GRADE_DEPT_DESI_TIME
	    
	MERGE INTO TB_EM_GRADE_DEPT_DESI_TIME A
	USING(
	    SELECT 
	        ? COMPANYID, 
	        ? GRADE_CD,  
	        ? DEPT_DESIGNATION_CD,  
	        ? CMP_TIME_H,  
	        ? CMP_TIME_M,  
	        'Y' USEFLAG,  
	        SYSDATE CREATETIME,  
	        ? CREATER
	    FROM DUAL
	) B
	ON ( A.COMPANYID = B.COMPANYID AND A.GRADE_CD = B.GRADE_CD AND A.DEPT_DESIGNATION_CD = B.DEPT_DESIGNATION_CD)
	WHEN NOT MATCHED THEN
	    INSERT(A.COMPANYID, A.GRADE_CD, A.DEPT_DESIGNATION_CD, A.CMP_TIME_H, A.CMP_TIME_M, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.COMPANYID, B.GRADE_CD, B.DEPT_DESIGNATION_CD, B.CMP_TIME_H, B.CMP_TIME_M, B.USEFLAG, B.CREATETIME, B.CREATER)
	WHEN MATCHED THEN
	    UPDATE SET
	        A.CMP_TIME_H = B.CMP_TIME_H, 
	        A.CMP_TIME_M = B.CMP_TIME_M,
	        A.USEFLAG = B.USEFLAG,
	        A.MODIFYTIME = B.CREATETIME,
	        A.MODIFIER = B.CREATER
	    ]]></sql-query>
	
	<sql-query name="SAVE_EDU_CMPLT" description="운영관리 수료처리"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : SAVE_EDU_CMPLT
	
	MERGE INTO TB_BA_SBJCT_OPEN_CLASS A
	USING(
	    SELECT COMPANYID, ? OPEN_NUM, USERID, ? ATTEND_STATE_CODE, ? ATTEND_SCO, 
	        ? PRAC_SCO, ? ANNO_SCO, ? CHALL_SCO, ? ETC_SCO, ? DISCU_SCO, 
	        ? TT_GET_SCO, DECODE(?, '5', ?)  RECOG_TIME_H, DECODE(?, '5', ?) RECOG_TIME_M, DIVISIONID, JOB TIME_JOB, 
	        LEADERSHIP TIME_LEADERSHIP, GRADE_NUM TIME_GRADE_NUM, ? MODIFIER,
	        DECODE(?, '5', (?||'-'||LTRIM(TO_CHAR(?, '00000'))||'-'||
	        LTRIM(TO_CHAR((
	        SELECT NVL(MAX(TO_NUMBER(SUBSTR(CMPLT_NUM, 12))), 0) + 1
	        FROM TB_BA_SBJCT_OPEN A, TB_BA_SBJCT_OPEN_CLASS B
	        WHERE A.COMPANYID = B.COMPANYID AND A.OPEN_NUM = B.OPEN_NUM 
	            AND A.SUBJECT_NUM = ?
	            AND A.YYYY = ?), '0000')        
	        ))) CMPLT_NUM
	    FROM TB_BA_USER
	    WHERE USERID = ?
	) B
	ON ( A.COMPANYID = B.COMPANYID AND A.OPEN_NUM = B.OPEN_NUM AND A.USERID = B.USERID )
	WHEN MATCHED THEN 
	UPDATE SET
	    A.ATTEND_STATE_CODE = B.ATTEND_STATE_CODE,
	    A.ATTEND_SCO = B.ATTEND_SCO,
	    A.PRAC_SCO = B.PRAC_SCO,
	    A.ANNO_SCO = B.ANNO_SCO,
	    A.CHALL_SCO = B.CHALL_SCO,
	    A.ETC_SCO = B.ETC_SCO,
	    A.DISCU_SCO = B.DISCU_SCO,
	    A.TT_GET_SCO = B.TT_GET_SCO,
	    A.RECOG_TIME_H = B.RECOG_TIME_H,
	    A.RECOG_TIME_M = B.RECOG_TIME_M,
	    A.DIVISIONID = B.DIVISIONID,
	    A.TIME_JOB = B.TIME_JOB, 
	    A.TIME_LEADERSHIP = B.TIME_LEADERSHIP,
	    A.TIME_GRADE_NUM = B.TIME_GRADE_NUM,
	    A.MODIFYTIME = SYSDATE,
	    A.MODIFIER = B.MODIFIER,
	    A.CMPLT_NUM = CASE WHEN ? = '5' AND A.CMPLT_NUM IS NULL THEN B.CMPLT_NUM
	                       WHEN ? IN ('2', '6', '7', '9', '10') THEN ''
	                  ELSE A.CMPLT_NUM
	                  END,
	    A.DATA_STS_CD = CASE WHEN A.DATA_STS_CD ='C' AND A.ATTEND_STATE_CODE = '5' AND ? IN ('2', '6', '7', '9', '10') THEN 'D' -- 수료에서 미수료로 변경될경우..
	                         WHEN A.DATA_STS_CD ='C' AND A.ATTEND_STATE_CODE IN ('2', '6', '7', '9', '10') AND ? = '5' THEN 'I' -- 미수료에서 수료로 변경될경우..
	                         WHEN A.DATA_STS_CD ='D' AND ? = '5' THEN 'C' -- 수료를 미수료로 변경했다가 다시 수료처리한경우..
	                    ELSE A.DATA_STS_CD
	                    END,
	    A.W_DIV_CD = '2'
	                    
	    ]]></sql-query>
	
	<sql-query name="SELECT_BA_DOWN_ATTACHMENTS" description="운영관리 수료자 증빙자료다운로드"><![CDATA[
		SELECT ATTACHMENT_ID, FILE_NAME, FILE_SIZE
		FROM V2_ATTACHMENT
		WHERE OBJECT_ID = ?
			AND OBJECT_TYPE = ?
	
	    ]]></sql-query>
	
	<sql-query name="SELECT_EDU_TARGET_CMPT_RESULT_LIST_EXCEL" description="운영관리 교육확정 목록에 해당하는 직원의 역량진단결과 엑셀다운로드"><![CDATA[
        --sql_file : ba-subject-sqlset.xml
        --sql_name : SELECT_EDU_TARGET_CMPT_RESULT_LIST_EXCEL
    
SELECT NAME, DVS_FULLNAME, GRADE_NM, EMPNO, 
    CASE WHEN CMPGROUP_NM IS NOT NULL THEN CMPGROUP_NM||' '||CMPNAME
    ELSE '최근진단결과 없음'
    END CMPNAME, 
    CASE WHEN SCORE_NUMB IS NOT NULL THEN SCORE_NUMB||'점'
    ELSE '-'
    END SCORE_NUMB
FROM
    (
    SELECT A.USERID, NAME, C.DVS_FULLNAME, B.EMPNO, FUN_COMMON_CODE(A.COMPANYID, 'BA15', B.GRADE_NUM) GRADE_NM
    FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B, TB_BA_DIVISION C
    WHERE A.COMPANYID = B.COMPANYID AND A.USERID = B.USERID
        AND A.COMPANYID = C.COMPANYID AND A.DIVISIONID = C.DIVISIONID
        AND A.COMPANYID = ?
        AND SUBJECT_NUM = ? 
        AND OPEN_NUM = ?
        AND A.ATTEND_STATE_CODE = '1'
        AND A.REQ_STS_CD = '2'
        AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N'
    ) SO,
    (
    SELECT *
    FROM(
        SELECT ROW_NUMBER() OVER(PARTITION BY BU.USERID ORDER BY CR.RUN_NUM DESC) RNUM,
            CR.RUN_NUM, CE.CMPNUMBER, CC.CMPGROUP, FUN_COMMON_CODE(CC.COMPANYID, 'C102', CC.CMPGROUP) CMPGROUP_NM, CC.CMPNAME, CR.COMPANYID, 
            CR.USERID, ROUND(CE.SCORE*20) SCORE_NUMB,
            CJ.JOBLDR_NAME JOB_NAME, CL.JOBLDR_NAME LEADERSHIP_NAME
        FROM TB_BA_USER BU, TB_CAM_RUNTARGET_I CR, TB_CAR_EXED_CMPT_SCORE CE, TB_CM_COMPETENCY CC, TB_BA_DIVISION BD, TB_CM_JOB_LDR_I CJ, TB_CM_JOB_LDR_I CL,
            (
            SELECT BS.COMPANYID, CS.CMPNUMBER
            FROM TB_BA_SBJCT BS, TB_CM_SUBJECT_MAP CS
            WHERE BS.COMPANYID = CS.COMPANYID AND BS.SUBJECT_NUM = CS.SUBJECT_NUM
                AND BS.COMPANYID =  ?
                AND BS.SUBJECT_NUM = ?
                AND CS.USEFLAG = 'Y'
            ) BS
        WHERE BU.USERID = CR.USERID 
            AND CR.COMPANYID = CE.COMPANYID AND CR.RUN_NUM = CE.RUN_NUM AND CR.USERID = CE.USERID_EXED
            AND CE.COMPANYID = CC.COMPANYID AND CE.CMPNUMBER = CC.CMPNUMBER
            AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
            AND BU.COMPANYID = CJ.COMPANYID(+) AND BU.JOB = CJ.JOBLDR_NUM(+) AND CJ.JOBLDR_FLAG(+) = 'J'
            AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L'
            AND CE.COMPANYID = BS.COMPANYID AND CE.CMPNUMBER = BS.CMPNUMBER
            AND CR.COMPANYID = ? 
            AND CR.USEFLAG = 'Y' AND CE.USEFLAG = 'Y' AND CC.USEFLAG = 'Y'
        )
    WHERE RNUM = 1
    ) TR
WHERE SO.USERID = TR.USERID(+)
ORDER BY CMPNAME, SCORE_NUMB DESC
    ]]></sql-query>
	
	
	<sql-query name="SELECT_EDU_TARGET_LIST_EXCEL" description="운영관리 교육확정자 엑셀다운로드"><![CDATA[
	    --sql_file : ba-subject-sqlset.xml
	    --sql_name : SELECT_EDU_TARGET_LIST_EXCEL
	
	SELECT A.COMPANYID, SUBJECT_NUM, OPEN_NUM, A.USERID, NAME, C.DVS_NAME, B.EMPNO, B.GRADE_NUM,
	FUN_COMMON_CODE(A.COMPANYID, 'BA15', B.GRADE_NUM) GRADE_NM,
		FUN_COMMON_CODE(A.COMPANYID, 'BA15', A.TIME_GRADE_NUM) TIME_GRADE_NM,
	    ATTEND_STATE_CODE,
	    FUN_COMMON_CODE(A.COMPANYID, 'BA01', A.ATTEND_STATE_CODE) ATTEND_STATE_NM,
	    TO_CHAR(APL_DTIME, 'YYYY-MM-DD') APL_DTIME,
	    APL_DIV_CD, FUN_COMMON_CODE(A.COMPANYID, 'BA02', A.APL_DIV_CD) APL_DIV_NM,
	    NVL(ATTEND_SCO,0) ATTEND_SCO,
	    NVL(PRAC_SCO,0) PRAC_SCO,
	    NVL(ANNO_SCO,0) ANNO_SCO,
	    NVL(CHALL_SCO,0) CHALL_SCO,
	    NVL(ETC_SCO,0) ETC_SCO,
	    NVL(DISCU_SCO,0) DISCU_SCO,
	    NVL(TT_GET_SCO,0) TT_GET_SCO,
	    ROW_NUMBER() OVER(ORDER BY B.NAME) RNUM
	FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B, TB_BA_DIVISION C
	WHERE A.COMPANYID = B.COMPANYID AND A.USERID = B.USERID
	    AND A.COMPANYID = C.COMPANYID AND A.DIVISIONID = C.DIVISIONID
	    AND A.COMPANYID = ?
	    AND SUBJECT_NUM = ? 
	    AND OPEN_NUM = ?
	    AND A.ATTEND_STATE_CODE IN ('2','5','6','7','9','10')
	    AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N'
	]]></sql-query>

    <sql-query name="SELECT_EDU_TARGET_EXCEL_UPLOAD" description="운영관리 교육확정자 수강생엑셀업로드 전에 이전에 존재하는지 체크 "><![CDATA[
            --sql_file : ba-subject-sqlset.xml
            --sql_name : SELECT_EDU_TARGET_EXCEL_UPLOAD
    
SELECT COUNT(*) CNT
FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B
WHERE A.USERID = B.USERID
    AND A.COMPANYID = ?
    AND A.OPEN_NUM = ?
    AND B.EMPNO = ?
    AND B.EMP_STS_CD IN ( '10' )
    AND A.DEL_YN = 'N'
    AND B.USEFLAG = 'Y' AND B.DEL_YN = 'N'
    ]]></sql-query>
    
	<sql-query name="INSERT_EDU_TARGET_EXCEL_UPLOAD" description="운영관리 교육확정자 수강생엑셀업로드"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : INSERT_EDU_TARGET_EXCEL_UPLOAD
	    
	MERGE INTO  TB_BA_SBJCT_OPEN_CLASS A
	USING(
	    SELECT USERID, ? SUBJECT_NUM, COMPANYID, ? OPEN_NUM, '2' APL_DIV_CD, 
	        DIVISIONID, JOB, LEADERSHIP, GRADE_NUM, '2' ATTEND_STATE_CODE,
	        '교육담당자에 의한 신청' GOAL, SYSDATE APL_DTIME, SYSDATE TARGET_CFM_DTIME, 'Y' USEFLAG, SYSDATE CREATETIME, ? CREATER,
	        '2' REQ_STS_CD
	    FROM TB_BA_USER
	    WHERE USEFLAG = 'Y' AND DEL_YN = 'N'
	        AND EMP_STS_CD IN ( '10' ) -- 재직상태
	        AND COMPANYID = ?
	        AND EMPNO = ?
	) B
	ON ( A.COMPANYID = B.COMPANYID AND A.OPEN_NUM = B.OPEN_NUM AND A.USERID = B.USERID )
	WHEN NOT MATCHED THEN 
	INSERT(
	    A.COMPANYID, A.OPEN_NUM, A.USERID, A.SUBJECT_NUM, A.APL_DIV_CD, 
	    A.DIVISIONID, A.TIME_JOB, A.TIME_LEADERSHIP, A.TIME_GRADE_NUM, A.ATTEND_STATE_CODE,
	    A.GOAL, A.APL_DTIME, A.TARGET_CFM_DTIME, A.USEFLAG, A.CREATETIME, A.CREATER, A.REQ_STS_CD
	)
	VALUES(
	    B.COMPANYID, B.OPEN_NUM, B.USERID, B.SUBJECT_NUM, B.APL_DIV_CD, 
	    B.DIVISIONID, B.JOB, B.LEADERSHIP, B.GRADE_NUM, B.ATTEND_STATE_CODE,
	    B.GOAL, B.APL_DTIME, B.TARGET_CFM_DTIME, B.USEFLAG, B.CREATETIME, B.CREATER, B.REQ_STS_CD
	)
	WHEN MATCHED THEN
	   UPDATE SET
	       A.DEL_YN = 'N',
	       A.USEFLAG = B.USEFLAG,
	       A.APL_DIV_CD = B.APL_DIV_CD,
	       A.ATTEND_STATE_CODE = B.ATTEND_STATE_CODE,
	       A.GOAL = B.GOAL,
	       A.APL_DTIME = B.APL_DTIME,
	       A.TARGET_CFM_DTIME = B.TARGET_CFM_DTIME
	    ]]></sql-query>

    <sql-query name="UPDATE_TB_BA_SBJCT_OPEN_RECOMM_REQ" description="운영관리 대상확정 추천순위 요청 정보 수정"><![CDATA[
            --sql_file : ba-subject-sqlset.xml
            --sql_name : UPDATE_TB_BA_SBJCT_OPEN_RECOMM_REQ

UPDATE TB_BA_SBJCT_OPEN
SET REQ_NUM = ?,
    REQ_STS_CD = ?
WHERE COMPANYID = ? AND OPEN_NUM = ?
        ]]></sql-query>

    <sql-query name="UPDATE_EDU_TARGET_RECOMM_RANKING_CONFIRM" description="운영관리 대상확정 추천순위 저장"><![CDATA[
            --sql_file : ba-subject-sqlset.xml
            --sql_name : UPDATE_EDU_TARGET_RECOMM_RANKING_CONFIRM
    
    UPDATE TB_BA_SBJCT_OPEN_CLASS
    SET RECOMM_RANKING = ?,
        MODIFYTIME = SYSDATE,
        MODIFIER = ?
    WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?
        ]]></sql-query>
        	
	<sql-query name="UPDATE_EDU_TARGET_CONFIRM" description="운영관리 대상확정"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : UPDATE_EDU_TARGET_CONFIRM
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	SET ATTEND_STATE_CODE = ?,
	    TARGET_CFM_DTIME = DECODE(?, '2', SYSDATE, TARGET_CFM_DTIME),
	    FAIL_REASON = DECODE(?, '8', ?, FAIL_REASON),
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?
	    ]]></sql-query>
	
	<sql-query name="SELECT_EDU_TARGET_LIST" description="운영관리 대상확정 목록조회"><![CDATA[
	    --sql_file : ba-subject-sqlset.xml
	    --sql_name : SELECT_EDU_TARGET_LIST
	
	SELECT A.COMPANYID, 
		SUBJECT_NUM, OPEN_NUM, A.USERID, NAME, C.DVS_NAME, B.EMPNO, B.GRADE_NUM,
		FUN_COMMON_CODE(A.COMPANYID, 'BA15', B.GRADE_NUM) GRADE_NM, A.TIME_GRADE_NUM,
	    FUN_COMMON_CODE(A.COMPANYID, 'BA15', A.TIME_GRADE_NUM) TIME_GRADE_NM,
	    ATTEND_STATE_CODE,
		FUN_COMMON_CODE(A.COMPANYID, 'BA01', A.ATTEND_STATE_CODE) ATTEND_STATE_NM,
		TO_CHAR(APL_DTIME, 'YYYY-MM-DD') APL_DTIME,
	    APL_DIV_CD,
		FUN_COMMON_CODE(A.COMPANYID, 'BA02', A.APL_DIV_CD) APL_DIV_NM,
	    ATTEND_SCO, PRAC_SCO, ANNO_SCO, CHALL_SCO, ETC_SCO, DISCU_SCO, TT_GET_SCO,
        NVL(FILE_CNT, 0) FILE_CNT,
	    ROW_NUMBER() OVER(ORDER BY B.NAME) RNUM,
        NVL(RECOG_TIME_H, 0) RECOG_TIME_H,
        NVL(RECOG_TIME_M, 0) RECOG_TIME_M
	FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B, TB_BA_DIVISION C,
        (
        SELECT OBJECT_ID, COUNT(*) FILE_CNT
        FROM V2_ATTACHMENT
        WHERE OBJECT_TYPE = 7
        GROUP BY OBJECT_ID
        ) D
	WHERE A.COMPANYID = B.COMPANYID AND A.USERID = B.USERID
	    AND A.COMPANYID = C.COMPANYID AND A.DIVISIONID = C.DIVISIONID
        AND A.USERID||A.OPEN_NUM = D.OBJECT_ID(+)
	    AND A.COMPANYID = ?
	    AND SUBJECT_NUM = ? 
	    AND OPEN_NUM = ?
	    AND A.ATTEND_STATE_CODE IN ('2','5','6','7','9','10')
	    AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N'
	]]></sql-query>
	
	<sql-query name="SELECT_CONFIRM_THE_TARGET_LIST" description="운영관리 대상확정이 필요한 신청자 목록조회"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : SELECT_CONFIRM_THE_TARGET_LIST
	
	SELECT A.COMPANYID, SUBJECT_NUM, OPEN_NUM, A.USERID, NAME, C.DVS_NAME, B.EMPNO, B.GRADE_NUM, FUN_COMMON_CODE(A.COMPANYID, 'BA15', B.GRADE_NUM) GRADE_NM,
	    ATTEND_STATE_CODE, FUN_COMMON_CODE(A.COMPANYID, 'BA01', A.ATTEND_STATE_CODE) ATTEND_STATE_NM, TO_CHAR(APL_DTIME, 'YYYY-MM-DD HH24:MM:DI') APL_DTIME, RECOMM_RANKING, C.DVS_FULLNAME,
	    ROW_NUMBER() OVER(ORDER BY APL_DTIME) RNUM, FAIL_REASON
	FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B, TB_BA_DIVISION C
	WHERE A.COMPANYID = B.COMPANYID AND A.USERID = B.USERID
	    AND A.COMPANYID = C.COMPANYID AND A.DIVISIONID = C.DIVISIONID
	    AND A.COMPANYID = ?
	    AND SUBJECT_NUM = ? 
	    AND OPEN_NUM = ?
	    AND A.ATTEND_STATE_CODE = '1'
	    AND A.REQ_STS_CD = '2'
	    AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N'
	    ]]></sql-query>
	
	<sql-query name="CHANGE_USER_CHASU" description="운영관리 차수변경 처리"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : CHANGE_USER_CHASU
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	SET OPEN_NUM = ?
	WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?
	    ]]></sql-query>
	    
	<sql-query name="CHANGE_USER_GRADE" description="운영관리 인정직급변경 처리"><![CDATA[
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	SET TIME_GRADE_NUM = ?
	WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?
	    ]]></sql-query>
	
    <sql-query name="CHANGE_USER_GRADE" description="운영관리  메모 저장"><![CDATA[
    
    UPDATE TB_BA_SBJCT_OPEN
    SET EDU_MEMO = ?
    WHERE COMPANYID = ? AND OPEN_NUM = ?
    ]]></sql-query>
        
	<sql-query name="SELECT_SAME_SUBJECT_CHASU_LIST" description="운영관리 동일년도의 다른 차수 목록 조회"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : SELECT_SAME_SUBJECT_CHASU_LIST
	
	SELECT A.SUBJECT_NUM, B.OPEN_NUM, B.SUBJECT_NAME, B.CHASU, TO_CHAR(EDU_STIME, 'YYYY-MM-DD')||'~'||TO_CHAR(EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD, 
	    YYYY 
	FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B
	WHERE A.COMPANYID = B.COMPANYID AND A.SUBJECT_NUM = B.SUBJECT_NUM
	    AND A.DEL_YN = 'N' AND B.DEL_YN = 'N' AND NVL(B.CLOSING_YN, 'N') = 'N' 
	    AND A.COMPANYID = ?
	    AND A.SUBJECT_NUM = ?
	    AND B.YYYY = ?
	    AND CHASU != ?
	ORDER BY CHASU
	    ]]></sql-query>
	
	<sql-query name="CHANGE_ATTEND_STATE_CODE" description="운영관리 수강자 수강상태 강제변경"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : CHANGE_ATTEND_STATE_CODE
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	SET ATTEND_STATE_CODE = ?,
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?
	    ]]></sql-query>
	
	<sql-query name="DEL_TB_BA_SBJCT_OPEN_CLASS" description="운영관리 수강자 삭제"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : DEL_TB_BA_SBJCT_OPEN_CLASS
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	SET DEL_YN = 'Y', USEFLAG = 'N',
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND OPEN_NUM = ? AND USERID = ?
	    ]]></sql-query>
	
	<sql-query name="SELECT_SUBJECT_OPEN_RUN_ATTEND_LIST" description="운영관리 운영현황 목록 조회"><![CDATA[
	    --sql_file : ba-subject-sqlset.xml
	    --sql_name : SELECT_SUBJECT_OPEN_RUN_ATTEND_LIST
	    
	SELECT A.COMPANYID, SUBJECT_NUM, OPEN_NUM, A.USERID, NAME, C.DVS_NAME, B.EMPNO, B.GRADE_NUM, FUN_COMMON_CODE(A.COMPANYID, 'BA15', B.GRADE_NUM) GRADE_NM,
	    ATTEND_STATE_CODE, FUN_COMMON_CODE(A.COMPANYID, 'BA01', A.ATTEND_STATE_CODE) ATTEND_STATE_NM, TO_CHAR(APL_DTIME, 'YYYY-MM-DD HH24:MM:DI') APL_DTIME,
	    FAIL_REASON,
	    ROW_NUMBER() OVER(ORDER BY APL_DTIME) RNUM
	FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B, TB_BA_DIVISION C
	WHERE A.COMPANYID = B.COMPANYID AND A.USERID = B.USERID
	    AND A.COMPANYID = C.COMPANYID AND A.DIVISIONID = C.DIVISIONID
	    AND A.COMPANYID = ?
	    AND SUBJECT_NUM = ? 
	    AND OPEN_NUM = ?
	    AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N'
	]]></sql-query>
	
	<sql-query name="SELECT_SUBJECT_OPEN_RUN_ATTEND_CUR" description="운영관리 운영현황조회"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : SELECT_SUBJECT_OPEN_RUN_ATTEND_CUR
	        
	SELECT COUNT(*) T_CNT, NVL(SUM(ONE_S), 0) ONE_S, NVL(SUM(TWO_S), 0) TWO_S, NVL(SUM(THREE_S), 0) THREE_S, NVL(SUM(FIVE_S), 0) FIVE_S, 
	    NVL(SUM(SIX_S), 0) SIX_S, NVL(SUM(SEVEN_S), 0) SEVEN_S, NVL(SUM(EIGHT_S), 0) EIGHT_S, NVL(SUM(NINE_S), 0) NINE_S, NVL(SUM(TEN_S), 0) TEN_S
	FROM(
	    SELECT COMPANYID, SUBJECT_NUM, OPEN_NUM, USERID,
	        DECODE(ATTEND_STATE_CODE, '1', 1, 0) ONE_S,
	        DECODE(ATTEND_STATE_CODE, '2', 1, 0) TWO_S,
	        DECODE(ATTEND_STATE_CODE, '3', 1, 0) THREE_S,
	        DECODE(ATTEND_STATE_CODE, '5', 1, 0) FIVE_S,
	        DECODE(ATTEND_STATE_CODE, '6', 1, 0) SIX_S,
	        DECODE(ATTEND_STATE_CODE, '7', 1, 0) SEVEN_S,
	        DECODE(ATTEND_STATE_CODE, '8', 1, 0) EIGHT_S,
	        DECODE(ATTEND_STATE_CODE, '9', 1, 0) NINE_S,
	        DECODE(ATTEND_STATE_CODE, '10', 1, 0) TEN_S
	    FROM TB_BA_SBJCT_OPEN_CLASS
	    WHERE COMPANYID = ?
	        AND SUBJECT_NUM = ? 
	        AND OPEN_NUM = ?
	        AND USEFLAG = 'Y' AND DEL_YN = 'N'
	    )
	    ]]></sql-query>
	
	<sql-query name="SELECT_SUBJECT_OPEN_RUN_LIST" description="운영관리 개설목록 조회"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : SELECT_SUBJECT_OPEN_RUN_LIST
	
	SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
	FROM(
		SELECT A.SUBJECT_NUM, A.SUBJECT_NUM SUBJECT_NUM_NUMB, B.OPEN_NUM, B.OPEN_NUM OPEN_NUM_NUMB, B.SUBJECT_NAME, B.CHASU, TO_CHAR(EDU_STIME, 'YYYY-MM-DD')||'~'||TO_CHAR(EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD, 
		    TO_CHAR(APPLY_STIME, 'YYYY-MM-DD')||'~'||TO_CHAR(APPLY_ETIME, 'YYYY-MM-DD') APPLY_PERIOD,
		    YYYY, 
		    B.ALW_STD_CD,
		    NVL(B.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN,
		    NVL(B.RECOG_TIME_H, 0) RECOG_TIME_H,
		    NVL(B.RECOG_TIME_M, 0) RECOG_TIME_M,
		    NVL(B.VETER_ASSE_REQ_YN, 'N') VETER_ASSE_REQ_YN,
		    B.DEPT_DESIGNATION_CD, FUN_COMMON_CODE(A.COMPANYID, 'BA04', B.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING, 
		    A.USEFLAG, NVL(B.CLOSING_YN, 'N') CLOSING_YN,
		    FUN_COMMON_CODE(B.COMPANYID, 'BA03', B.TRAINING_CODE) TRAINING_STRING,
		    NVL(CNT, 0) CNT,
            NVL(CONFIRM_CNT, 0) CONFIRM_CNT, --대상자 선정 처리해야할 사용자
            NVL(CMPL_CNT, 0) CMPL_CNT, -- 수강상태에 증빙자료 올린 사용자 (수료처리대상자)
            B.REQ_STS_CD, -- 교육추천승인요청상태코드
            CASE WHEN B.REQ_STS_CD = '1' THEN '승인대기'
                    WHEN B.REQ_STS_CD = '2' THEN '승인'
                    WHEN B.REQ_STS_CD = '3' THEN '미승인'
            ELSE '요청안함'
            END REQ_STS_NM,  -- 교육추천승인요청상태                    
		    ROW_NUMBER() OVER(ORDER BY B.SUBJECT_NAME, B.CHASU DESC) RNUM
		FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B,
		    (
            SELECT COMPANYID, SUBJECT_NUM, OPEN_NUM, COUNT(*) CNT
            FROM TB_BA_SBJCT_OPEN_CLASS
            WHERE ATTEND_STATE_CODE IN ( '1', '2', '3', '5', '6', '7', '8', '9', '10') -- 수강, 수료, 미수료
                AND USEFLAG = 'Y' AND DEL_YN = 'N'
            GROUP BY COMPANYID, SUBJECT_NUM, OPEN_NUM
            ) C,
            (
            SELECT COMPANYID, SUBJECT_NUM, OPEN_NUM, COUNT(*) CONFIRM_CNT
            FROM TB_BA_SBJCT_OPEN_CLASS
            WHERE ATTEND_STATE_CODE = '1'
                AND REQ_STS_CD = '2'
                AND USEFLAG = 'Y' AND DEL_YN = 'N'
            GROUP BY COMPANYID, SUBJECT_NUM, OPEN_NUM
            ) D,
            (
            SELECT COMPANYID, SUBJECT_NUM, OPEN_NUM, COUNT(*) CMPL_CNT
            FROM TB_BA_SBJCT_OPEN_CLASS A, 
                (
                SELECT OBJECT_ID
                FROM V2_ATTACHMENT
                WHERE OBJECT_TYPE = 7
                GROUP BY OBJECT_ID
                ) B
            WHERE A.USERID||A.OPEN_NUM = B.OBJECT_ID
                AND ATTEND_STATE_CODE = '2'
                AND USEFLAG = 'Y' AND DEL_YN = 'N'
            GROUP BY COMPANYID, SUBJECT_NUM, OPEN_NUM
            ) E
		WHERE A.COMPANYID = B.COMPANYID AND A.SUBJECT_NUM = B.SUBJECT_NUM
		    AND B.COMPANYID = C.COMPANYID(+) AND B.SUBJECT_NUM = C.SUBJECT_NUM(+) AND B.OPEN_NUM = C.OPEN_NUM(+)
            AND B.COMPANYID = D.COMPANYID(+) AND B.SUBJECT_NUM = D.SUBJECT_NUM(+) AND B.OPEN_NUM = D.OPEN_NUM(+)
            AND B.COMPANYID = E.COMPANYID(+) AND B.SUBJECT_NUM = E.SUBJECT_NUM(+) AND B.OPEN_NUM = E.OPEN_NUM(+)
		    AND A.DEL_YN = 'N' AND B.DEL_YN = 'N'
		    AND A.COMPANYID = ?
		    ]]><dynamic><![CDATA[ ${ SEARCHDIV } ]]></dynamic><![CDATA[
	    ) A
	WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	    
	<sql-query name="CLOSE_TB_BA_SBJCT_OPEN" description="차수정보 폐강"><![CDATA[
	        -- BA_SUBJECT : CLOSE_TB_BA_SBJCT_OPEN
	
	BEGIN
	
	UPDATE TB_BA_SBJCT_OPEN
	SET CLOSING_YN = ?,
	    CLOSING_DTIME = SYSDATE,
	    CLOSING_REASON = ?
	WHERE COMPANYID = ? AND SUBJECT_NUM = ? AND OPEN_NUM = ?;
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	SET ATTEND_STATE_CODE = '3',
	    CANCEL_STIME = SYSDATE,
	    FAIL_REASON = '폐강에 의한 취소'
	WHERE COMPANYID = ? AND SUBJECT_NUM = ? AND OPEN_NUM = ?
	    AND ATTEND_STATE_CODE IN ('1', '2')
	    AND USEFLAG = 'Y' AND DEL_YN = 'N' ;
	    
	END;
	    ]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_OPEN_INFO" description="과정정보 상세"><![CDATA[
	-- BA_SUBJECT : SELECT_SBJCT_OPEN_INFO
	
	 SELECT BO.SUBJECT_NUM, open_num
	     , BO.USEFLAG
	     , BO.SUBJECT_NAME
	     , BO.TRAINING_CODE
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA03', BO.TRAINING_CODE) TRAINING_STRING
	     , NVL(BO.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
	     , DECODE(NVL(BO.DEPT_DESIGNATION_YN, 'N'), 'Y', '예', '아니오') DEPT_DESIGNATION_NM
	     , BO.DEPT_DESIGNATION_CD
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA04', BO.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING
	     , BO.INSTITUTE_CODE
	     , BO.INSTITUTE_NAME
	     , NVL(BO.RECOG_TIME_H, 0) RECOG_TIME_H
	     , NVL(BO.RECOG_TIME_M, 0) RECOG_TIME_M
	     , BO.EDU_TARGET
	     , BO.COURSE_CONTENTS
	     , BO.EDU_OBJECT
	     , NVL(BO.VETER_ASSE_REQ_YN, 'N') VETER_ASSE_REQ_YN
	     , DECODE(NVL(BO.VETER_ASSE_REQ_YN, 'N'), 'Y', '예', '아니오') VETER_ASSE_REQ_NM
	     , NVL(BO.REQUIRED_YN, 'N') REQUIRED_YN
	     , DECODE(NVL(BO.REQUIRED_YN, 'N'), 'Y', '예', '아니오') REQUIRED_NM
	     , BO.ALW_STD_CD
	     , SUBSTR(BO.ALW_STD_CD, 1, 1) ALW_STD_CD1 
	     , SUBSTR(BO.ALW_STD_CD, 1, 4) ALW_STD_CD2
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA08', BO.ALW_STD_CD) ALW_STD_NM
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA08', SUBSTR(BO.ALW_STD_CD, 1, 1)) ALW_STD_NM1
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA08', SUBSTR(BO.ALW_STD_CD, 1, 4)) ALW_STD_NM2
	     , BO.OFFICETIME_CD
	     , BO.EDUINS_DIV_CD
	     , BO.EDU_APL_DIV_CD
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA07', BO.OFFICETIME_CD) OFFICETIME_NM
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA05', BO.EDUINS_DIV_CD) EDUINS_DIV_NM
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA10', BO.EDU_APL_DIV_CD) EDU_APL_DIV_NM
	     , BO.PERF_ASSE_SBJ_CD
	     , FUN_COMMON_CODE(BO.COMPANYID, 'BA11', BO.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_NM
	     , BO.YYYY
	     , BO.CHASU 
	     , TO_CHAR(BO.EDU_STIME, 'YYYY-MM-DD') EDU_STIME
	     , TO_CHAR(BO.EDU_ETIME, 'YYYY-MM-DD') EDU_ETIME
	     , TO_CHAR(BO.APPLY_STIME, 'YYYY-MM-DD') APPLY_STIME
	     , TO_CHAR(BO.APPLY_ETIME, 'YYYY-MM-DD') APPLY_ETIME  
	     , TO_CHAR(BO.CANCEL_ETIME, 'YYYY-MM-DD') CANCEL_ETIME 
	     , NVL(BO.APPLICANT, 0) APPLICANT
	     , NVL(BO.EDU_DAYS , 0) EDU_DAYS
	     , NVL(BO.EDU_HOUR_H, 0) EDU_HOUR_H
	     , NVL(BO.EDU_HOUR_M, 0) EDU_HOUR_M
	     , NVL(BO.CLOSING_YN, 'N') CLOSING_YN
	     , BO.REQ_NUM
	     , BO.REQ_STS_CD
	     , BO.EVL_CMPL
         , FUN_SUBJ_COMP_MAP(BS.COMPANYID, BS.SUBJECT_NUM) CMPNAMES
         , BO.EDU_MEMO
	  FROM TB_BA_SBJCT BS, TB_BA_SBJCT_OPEN BO
	 WHERE BS.COMPANYID = BO.COMPANYID AND BS.SUBJECT_NUM = BO.SUBJECT_NUM
	 AND BO.SUBJECT_NUM = ?
	 AND BO.OPEN_NUM = ?
	 AND BO.COMPANYID = ?
	]]></sql-query>

    <sql-query name="GET_EDU_APPLY_USER_LIST" description="운영관리 - 교육추천순위 승인요청 대상 "><![CDATA[
            -- BA_SUBJECT: GET_EDU_APPLY_USER_LIST
    
    SELECT A.USERID, NAME, C.DVS_FULLNAME, B.EMPNO, FUN_COMMON_CODE(A.COMPANYID, 'BA15', B.GRADE_NUM) GRADE_NM, RECOMM_RANKING
    FROM TB_BA_SBJCT_OPEN_CLASS A, TB_BA_USER B, TB_BA_DIVISION C
    WHERE A.COMPANYID = B.COMPANYID AND A.USERID = B.USERID
        AND A.COMPANYID = C.COMPANYID AND A.DIVISIONID = C.DIVISIONID
        AND A.COMPANYID = ?
        AND SUBJECT_NUM = ?
        AND OPEN_NUM = ?
        AND A.ATTEND_STATE_CODE = '1'
        AND A.REQ_STS_CD = '2'
        AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N'
    ORDER BY RECOMM_RANKING
    ]]></sql-query>
    
	<sql-query name="CHASU_COUNT_CHECK" description="차수번호 유효성 검사를 위한 COUNT 조회"><![CDATA[
	        -- BA_SUBJECT: CHASU_COUNT_CHECK
	        
	SELECT COUNT(*) CNT
	FROM TB_BA_SBJCT_OPEN
	WHERE COMPANYID = ?
	    AND SUBJECT_NUM = ?
	    AND YYYY = ?
	    AND CHASU = ?
	    AND DEL_YN = 'N'
	    AND NVL(CLOSING_YN, 'N') = 'N'
	    ]]></sql-query>
	
	<sql-query name="UPDATE_V2_ATTACHMENT" description="개설번호 조회"><![CDATA[
	        -- BA_SUBJECT: UPDATE_V2_ATTACHMENT
	        
	UPDATE V2_ATTACHMENT
	SET OBJECT_ID = ?
	WHERE OBJECT_TYPE = ? AND OBJECT_ID = ?
	
	    ]]></sql-query>
	
	<sql-query name="MERGE_SBJCT_OPEN_INFO" description="개설정보 저장"><![CDATA[
	        -- BA_SUBJECT: MERGE_SBJCT_OPEN_INFO
	        
	MERGE INTO TB_BA_SBJCT_OPEN A
	USING(
	    SELECT
	      ? COMPANYID,
	      ? SUBJECT_NUM,
	      ? TRAINING_CODE,
	      ? SUBJECT_NAME,
	      ? RECOG_TIME_H,
	      ? RECOG_TIME_M,     
	      ? EDU_TARGET,
	      ? EDU_OBJECT,
	      ? COURSE_CONTENTS,
	      ? ALW_STD_CD,
	      ? INSTITUTE_CODE,
	      ? INSTITUTE_NAME,
	      ? DEPT_DESIGNATION_YN,
	      ? OFFICETIME_CD,
	      ? EDUINS_DIV_CD,
	      ? USEFLAG,
	      SYSDATE CREATETIME,
	      ? CREATER,
	      ? PERF_ASSE_SBJ_CD,
	      ? OPEN_NUM,
	      ? YYYY,
	      ? CHASU,
	      ? EDU_STIME,
	      ? EDU_ETIME,
	      ? APPLY_STIME,
	      ? APPLY_ETIME,
	      ? CANCEL_ETIME,
	      ? APPLICANT,
	      ? EDU_DAYS,
	      ? EDU_HOUR_H,
	      ? EDU_HOUR_M,
	      ? EVL_CMPL
	    FROM DUAL
	)B 
	ON ( A.COMPANYID = B.COMPANYID AND A.SUBJECT_NUM = B.SUBJECT_NUM AND A.OPEN_NUM = B.OPEN_NUM )
	WHEN MATCHED THEN
	UPDATE        
	SET 
	    A.SUBJECT_NAME = B.SUBJECT_NAME,
	    A.TRAINING_CODE = B.TRAINING_CODE,
	    A.RECOG_TIME_H = B.RECOG_TIME_H,
	    A.RECOG_TIME_M = B.RECOG_TIME_M,
	    A.EDU_TARGET = B.EDU_TARGET,
	    A.EDU_OBJECT = B.EDU_OBJECT,
	    A.COURSE_CONTENTS = B.COURSE_CONTENTS,
	    A.ALW_STD_CD = B.ALW_STD_CD,
	    A.INSTITUTE_CODE = B.INSTITUTE_CODE,
	    A.INSTITUTE_NAME = B.INSTITUTE_NAME,
	    A.DEPT_DESIGNATION_YN = B.DEPT_DESIGNATION_YN,
	    A.OFFICETIME_CD = B.OFFICETIME_CD,
	    A.EDUINS_DIV_CD = B.EDUINS_DIV_CD,
	    A.USEFLAG = B.USEFLAG,
	    A.MODIFYTIME = B.CREATETIME,
	    A.MODIFIER = B.CREATER,
	    A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD,
	    A.YYYY = B.YYYY,
	    A.CHASU = B.CHASU,
	    A.EDU_STIME = B.EDU_STIME,
	    A.EDU_ETIME = B.EDU_ETIME,
	    A.APPLY_STIME = B.APPLY_STIME,
	    A.APPLY_ETIME = B.APPLY_ETIME,
	    A.CANCEL_ETIME = B.CANCEL_ETIME,
	    A.APPLICANT = B.APPLICANT,
	    A.EDU_DAYS = B.EDU_DAYS,
	    A.EDU_HOUR_H = B.EDU_HOUR_H,
	    A.EDU_HOUR_M = B.EDU_HOUR_M,
	    A.EVL_CMPL = B.EVL_CMPL
	WHEN NOT MATCHED THEN 
	INSERT(
	    A.COMPANYID, A.SUBJECT_NUM, A.OPEN_NUM, A.SUBJECT_NAME, A.TRAINING_CODE,
	    A.RECOG_TIME_H, A.RECOG_TIME_M, A.EDU_TARGET, A.EDU_OBJECT, A.COURSE_CONTENTS,
	    A.INSTITUTE_CODE, A.INSTITUTE_NAME, A.ALW_STD_CD, A.DEPT_DESIGNATION_YN, A.OFFICETIME_CD,
	    A.EDUINS_DIV_CD, A.USEFLAG, A.CREATETIME, A.CREATER, A.PERF_ASSE_SBJ_CD,
	    A.YYYY, A.CHASU, A.EDU_STIME, A.EDU_ETIME, A.APPLY_STIME, A.APPLY_ETIME,
	    A.CANCEL_ETIME, A.APPLICANT, A.EDU_DAYS, A.EDU_HOUR_H, A.EDU_HOUR_M, A.EVL_CMPL
	    ) 
	VALUES(
	    B.COMPANYID, B.SUBJECT_NUM, B.OPEN_NUM, B.SUBJECT_NAME, B.TRAINING_CODE,
	    B.RECOG_TIME_H, B.RECOG_TIME_M, B.EDU_TARGET, B.EDU_OBJECT, B.COURSE_CONTENTS,
	    B.INSTITUTE_CODE, B.INSTITUTE_NAME, B.ALW_STD_CD, B.DEPT_DESIGNATION_YN, B.OFFICETIME_CD,
	    B.EDUINS_DIV_CD, B.USEFLAG, B.CREATETIME, B.CREATER, B.PERF_ASSE_SBJ_CD,
	    B.YYYY, B.CHASU, B.EDU_STIME, B.EDU_ETIME, B.APPLY_STIME,B.APPLY_ETIME,
	    B.CANCEL_ETIME, B.APPLICANT, B.EDU_DAYS, B.EDU_HOUR_H, B.EDU_HOUR_M, B.EVL_CMPL
	    )
	    ]]></sql-query>
	
	<sql-query name="SELECT_SEQ_OPEN_NUM" description="개설번호 조회"><![CDATA[
	 -- SELECT_SEQ_OPEN_NUM
	 
	SELECT SEQ_OPEN_NUM.NEXTVAL FROM DUAL
	]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_USE_LIST" description="사용하는 과정목록"><![CDATA[
	        -- SELECT_SBJCT_USE_LIST
	
	SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
	FROM(
	        SELECT BS.SUBJECT_NUM
	             , BS.USEFLAG
	             , BS.SUBJECT_NAME
	             , BS.TRAINING_CODE
	             , FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CODE) TRAINING_STRING
	             , NVL(BS.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
	             , BS.DEPT_DESIGNATION_CD
	             , FUN_COMMON_CODE(BS.COMPANYID, 'BA04', BS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING
	             , FUN_COMMON_CODE(BS.COMPANYID, 'BA11', BS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRI
	             , BS.INSTITUTE_CODE
	             , BS.INSTITUTE_NAME
	             , NVL(BS.RECOG_TIME_H, 0) RECOG_TIME_H
	             , NVL(BS.RECOG_TIME_M, 0) RECOG_TIME_M
	             , NVL(BS.RECOG_TIME_H, 0)||'시간 '||NVL(BS.RECOG_TIME_M, 0)||'분' RECOG_TIME 
	             , NVL(BS.VETER_ASSE_REQ_YN, 'N') VETER_ASSE_REQ_YN
	             , NVL(BS.REQUIRED_YN, 'N') REQUIRED_YN
	          FROM TB_BA_SBJCT BS
	         WHERE BS.COMPANYID = ?
	           AND BS.DEL_YN = 'N' 
	           AND BS.USEFLAG = 'Y'
	          ) A
	WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
	<sql-query name="SELECT_SUBJECT_OPEN_LIST" description="차수관리 개설목록 조회"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : SELECT_SUBJECT_OPEN_LIST
	
	SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
	FROM(
		SELECT A.SUBJECT_NUM, A.SUBJECT_NUM SUBJECT_NUM_NUMB, B.OPEN_NUM, B.OPEN_NUM OPEN_NUM_NUMB, B.SUBJECT_NAME, B.CHASU, B.CHASU CHASU_NUMB, TO_CHAR(EDU_STIME, 'YYYY-MM-DD')||'~'||TO_CHAR(EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD, YYYY, 
		    NVL(B.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN,
			NVL(B.RECOG_TIME_H, 0) RECOG_TIME_H,
			NVL(B.RECOG_TIME_M, 0) RECOG_TIME_M,
			NVL(B.VETER_ASSE_REQ_YN, 'N') VETER_ASSE_REQ_YN,
	        NVL(B.REQUIRED_YN, 'N') REQUIRED_YN,
		    B.DEPT_DESIGNATION_CD, FUN_COMMON_CODE(A.COMPANYID, 'BA04', B.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING,
		    B.INSTITUTE_CODE, B.INSTITUTE_NAME,
		    A.USEFLAG, NVL(B.CLOSING_YN, 'N') CLOSING_YN,
		    FUN_COMMON_CODE(B.COMPANYID, 'BA03', B.TRAINING_CODE) TRAINING_STRING,
		    ROW_NUMBER() OVER(ORDER BY B.SUBJECT_NAME, B.CHASU DESC) RNUM,
	        NVL(B.RECOG_TIME_H, 0)||'시간'||NVL(B.RECOG_TIME_M, 0)||'분' RECOG_TIME_NM,
	        B.DEL_YN
		FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B
		WHERE A.COMPANYID = B.COMPANYID AND A.SUBJECT_NUM = B.SUBJECT_NUM
		    AND A.DEL_YN = 'N' AND B.DEL_YN = 'N'
		    AND A.COMPANYID = ?
		    ]]><dynamic><![CDATA[ ${ SEARCHDIV } ]]></dynamic><![CDATA[
	    ) A
	WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
	<sql-query name="MERGE_TB_EM_CMPLT_STND" description="과정관리 - 과정 수료기준정보 머지"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : MERGE_TB_EM_CMPLT_STND
	        
	MERGE INTO TB_EM_CMPLT_STND A
	USING(
	    SELECT
	        ? COMPANYID,
	        ? SUBJECT_NUM,
	        ? CMPLT_STND_CD,
	        ? WEI, 
	        'Y' USEFLAG,
	        SYSDATE CREATETIME,
	        ? CREATER
	    FROM DUAL
	) B
	ON (A.COMPANYID = B.COMPANYID AND A.CMPLT_STND_CD = B.CMPLT_STND_CD AND A.SUBJECT_NUM = B.SUBJECT_NUM)
	WHEN MATCHED THEN
	UPDATE SET
	    A.WEI = B.WEI,
	    A.USEFLAG = B.USEFLAG,
	    A.MODIFYTIME = B.CREATETIME,
	    A.MODIFIER = B.CREATER
	WHEN NOT MATCHED THEN
	    INSERT(A.COMPANYID, A.CMPLT_STND_CD, A.SUBJECT_NUM, A.WEI, A.USEFLAG, A.CREATETIME, A.CREATER)
	    VALUES(B.COMPANYID, B.CMPLT_STND_CD, B.SUBJECT_NUM, B.WEI, B.USEFLAG, B.CREATETIME, B.CREATER)
	    ]]></sql-query>
	
	<sql-query name="UPDATE_TB_EM_CMPLT_STND" description="과정관리 - 과정 수료기준정보 수정"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : UPDATE_TB_EM_CMPLT_STND
	        
	UPDATE TB_EM_CMPLT_STND
	SET USEFLAG = 'N',
	    MODIFYTIME = SYSDATE,
	    MODIFIER = ?
	WHERE COMPANYID = ? AND SUBJECT_NUM = ?
	    ]]></sql-query>

    <sql-query name="SELECT_SUBEJCT_CMPNUMBER" description="과정관리 - 과정역량 매핑정보 존재하는 과정번호 역량번호인지 체크"><![CDATA[
            --sql_file : ba-subject-sqlset.xml
            --sql_name : SELECT_SUBEJCT_CMPNUMBER

        SELECT
        NVL((
        SELECT subject_num FROM tb_ba_sbjct
        WHERE COMPANYID = ? AND subject_num = ?
        ), 0) SUBJECT_NUM,
        NVL((
        SELECT CMPNUMBER FROM TB_CM_COMPETENCY
        WHERE COMPANYID = ? AND CMPNUMBER = ?
        ), 0) CMPNUMBER
        FROM DUAL
        ]]></sql-query>
    
    <sql-query name="SELECT_SUBEJCT_CMPNUMBER_MAPPING_CNT" description="과정관리 - 과정역량 매핑정보 건수 조회"><![CDATA[
            --sql_file : ba-subject-sqlset.xml
            --sql_name : SELECT_SUBEJCT_CMPNUMBER_MAPPING_CNT
    
        SELECT COUNT(*) CNT
        FROM TB_CM_SUBJECT_MAP
        WHERE USEFLAG = 'Y'
            AND COMPANYID = ? 
            AND SUBJECT_NUM = ?
            AND CMPNUMBER = ?
        ]]></sql-query>
            
	<sql-query name="MERGE_TB_CM_SUBJECT_MAP" description="과정관리 - 과정역량 매핑정보 머지"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : MERGE_TB_CM_SUBJECT_MAP
	        
	MERGE INTO TB_CM_SUBJECT_MAP A
	USING(
	    SELECT
	        ? COMPANYID,
	        ? CMPNUMBER,
	        ? SUBJECT_NUM,
	        'Y' USEFLAG
	    FROM DUAL
	) B
	ON (A.COMPANYID = B.COMPANYID AND A.CMPNUMBER = B.CMPNUMBER AND A.SUBJECT_NUM = B.SUBJECT_NUM)
	WHEN MATCHED THEN
	UPDATE SET 
	    A.USEFLAG = B.USEFLAG
	WHEN NOT MATCHED THEN
	    INSERT(A.COMPANYID, A.CMPNUMBER, A.SUBJECT_NUM, A.USEFLAG)
	    VALUES(B.COMPANYID, B.CMPNUMBER, B.SUBJECT_NUM, B.USEFLAG)
	    ]]></sql-query>
	
	<sql-query name="UPDATE_SBJCT_CM_MAPPING" description="과정관리 - 과정 역량매핑 정보 삭제"><![CDATA[
	        -- UPDATE_SBJCT_CM_MAPPING
	        
	UPDATE TB_CM_SUBJECT_MAP
	SET USEFLAG = 'N'
	WHERE COMPANYID = ? AND SUBJECT_NUM = ?
	    ]]></sql-query>
	
	<sql-query name="DEL_SBJCT_CM_MAPPING" description="과정관리 - 과정 역량매핑 정보 삭제"><![CDATA[
	        -- DEL_SBJCT_CM_MAPPING
	        
	UPDATE TB_CM_SUBJECT_MAP
	SET USEFLAG = 'N'
	WHERE COMPANYID = ? AND CMPNUMBER = ? AND SUBJECT_NUM = ? 
	    ]]></sql-query>
	
	<sql-query name="MERGE_SBJCT_INFO" description="과정관리 - 과정정보 머지"><![CDATA[
	        --sql_file : ba-subject-sqlset.xml
	        --sql_name : MERGE_SBJCT_INFO
	
	MERGE INTO TB_BA_SBJCT A
	USING(
	    SELECT
	      ? COMPANYID,
	      ? SUBJECT_NUM,
	      ? TRAINING_CODE,
	      ? SUBJECT_NAME,
	      ? EDU_HOUR_H,
	      ? EDU_HOUR_M,     
	      ? RECOG_TIME_H,
	      ? RECOG_TIME_M,     
	      ? EDU_TARGET,
	      ? EDU_OBJECT,
	      ? COURSE_CONTENTS,
	      ? ALW_STD_CD,
	      ? INSTITUTE_CODE,
	      ? INSTITUTE_NAME,
	      ? DEPT_DESIGNATION_YN,
	      ? OFFICETIME_CD,
	      ? EDUINS_DIV_CD,
	      ? REQUIRED_YN,
	      ? USEFLAG,
	      SYSDATE CREATETIME,
	      ? CREATER,
	      ? PERF_ASSE_SBJ_CD,
	      ? EVL_CMPL
	    FROM DUAL
	)B 
	ON ( A.COMPANYID = B.COMPANYID AND A.SUBJECT_NUM = B.SUBJECT_NUM )
	WHEN MATCHED THEN
	UPDATE        
	SET 
	    A.SUBJECT_NAME = B.SUBJECT_NAME,
	    A.TRAINING_CODE = B.TRAINING_CODE,
	    A.EDU_HOUR_H = B.EDU_HOUR_H,
	    A.EDU_HOUR_M = B.EDU_HOUR_M,
	    A.RECOG_TIME_H = B.RECOG_TIME_H,
	    A.RECOG_TIME_M = B.RECOG_TIME_M,
	    A.EDU_TARGET = B.EDU_TARGET,
	    A.EDU_OBJECT = B.EDU_OBJECT,
	    A.COURSE_CONTENTS = B.COURSE_CONTENTS,
	    A.ALW_STD_CD = B.ALW_STD_CD,
	    A.INSTITUTE_CODE = B.INSTITUTE_CODE,
	    A.INSTITUTE_NAME = B.INSTITUTE_NAME,
	    A.DEPT_DESIGNATION_YN = B.DEPT_DESIGNATION_YN,
	    A.OFFICETIME_CD = B.OFFICETIME_CD,
	    A.EDUINS_DIV_CD = B.EDUINS_DIV_CD,
	    A.REQUIRED_YN = B.REQUIRED_YN,
	    A.USEFLAG = B.USEFLAG,
	    A.MODIFYTIME = B.CREATETIME,
	    A.MODIFIER = B.CREATER,
	    A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD,
	    A.EVL_CMPL = B.EVL_CMPL
	WHEN NOT MATCHED THEN 
	INSERT(
	    A.COMPANYID, A.SUBJECT_NUM, A.SUBJECT_NAME, A.TRAINING_CODE, A.EDU_HOUR_H,
	    A.EDU_HOUR_M, A.RECOG_TIME_H, A.RECOG_TIME_M, A.EDU_TARGET, A.EDU_OBJECT,
	    A.COURSE_CONTENTS,A.INSTITUTE_CODE, A.INSTITUTE_NAME, A.ALW_STD_CD, A.DEPT_DESIGNATION_YN,
	    A.OFFICETIME_CD, A.EDUINS_DIV_CD, A.REQUIRED_YN, A.USEFLAG, A.CREATETIME,
	    A.CREATER, A.PERF_ASSE_SBJ_CD, A.EVL_CMPL
	) 
	VALUES(
	    B.COMPANYID, B.SUBJECT_NUM, B.SUBJECT_NAME, B.TRAINING_CODE, B.EDU_HOUR_H,
	    B.EDU_HOUR_M, B.RECOG_TIME_H, B.RECOG_TIME_M, B.EDU_TARGET, B.EDU_OBJECT,
	    B.COURSE_CONTENTS,B.INSTITUTE_CODE, B.INSTITUTE_NAME, B.ALW_STD_CD, B.DEPT_DESIGNATION_YN,
	    B.OFFICETIME_CD, B.EDUINS_DIV_CD, B.REQUIRED_YN, B.USEFLAG, B.CREATETIME,
	    B.CREATER, B.PERF_ASSE_SBJ_CD, B.EVL_CMPL
	)
	
	    ]]></sql-query>
	
	<sql-query name="SELECT_SEQ_SUBJECT_NUM" description="과정관리 - 과정번호 조회"><![CDATA[
	 -- SELECT_SEQ_SUBJECT_NUM
	 
	SELECT SEQ_SUBJECT_NUM.NEXTVAL FROM DUAL
	]]></sql-query>
	
	<sql-query name="SELECT_ALW_STD_CD_LIST1" description="과정관리 - 상시학습유형 목록"><![CDATA[
	 -- SELECT_ALW_STD_CD_LIST1
	 
	SELECT null VALUE, '=== 선택 ===' TEXT, NULL P_VALUE, 'Y' USEFLAG FROM DUAL UNION ALL  
	SELECT *
	FROM(
	    SELECT COMMONCODE VALUE, CMM_CODENAME TEXT, PARENT_COMMONCODE P_VALUE, USEFLAG
	    FROM TB_BA_COMMONCODE
	    WHERE STANDARDCODE = 'BA08'
	        AND USEFLAG = 'Y'
	        AND COMPANYID = ?
	        AND PARENT_COMMONCODE IS NULL
	    ORDER BY CMM_CODENAME
	)
	]]></sql-query>
	
	<sql-query name="SELECT_ALW_STD_CD_LIST2" description="과정관리 - 상시학습유형 목록"><![CDATA[
	 -- SELECT_ALW_STD_CD_LIST2
	 
	SELECT null VALUE, '=== 선택 ===' TEXT, NULL P_VALUE, 'Y' USEFLAG FROM DUAL UNION ALL  
	SELECT *
	FROM(
	    SELECT COMMONCODE VALUE, CMM_CODENAME TEXT, PARENT_COMMONCODE P_VALUE, USEFLAG
	    FROM TB_BA_COMMONCODE
	    WHERE STANDARDCODE = 'BA08'
	        AND USEFLAG = 'Y'
	        AND COMPANYID = ?
	        AND LENGTH(COMMONCODE) = 4
	    ORDER BY CMM_CODENAME
	)
	]]></sql-query>
	
	<sql-query name="SELECT_ALW_STD_CD_LIST" description="과정관리 - 상시학습유형 목록"><![CDATA[
	       -- SELECT_ALW_STD_CD_LIST
	
	SELECT	NULL VALUE, '=== 선택 ===' TEXT
				, NULL P_VALUE, 'Y' USEFLAG
				, NULL CD_VALUE1, NULL CD_VALUE2, NULL CD_VALUE3, NULL CD_VALUE4, NULL CD_VALUE5
	FROM DUAL
	UNION ALL
	SELECT *
	FROM(
		SELECT COMMONCODE VALUE, CMM_CODENAME TEXT, PARENT_COMMONCODE P_VALUE, USEFLAG,
		CD_VALUE1, CD_VALUE2, CD_VALUE3, CD_VALUE4, CD_VALUE5 
		FROM TB_BA_COMMONCODE
		WHERE STANDARDCODE = 'BA08'
			AND USEFLAG = 'Y'
			AND COMPANYID = ?
			AND PARENT_COMMONCODE IS NOT NULL AND LENGTH(COMMONCODE) > 4
		ORDER BY CMM_CODENAME
	)
	   ]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_CMPLT_STND_LIST" description="과정관리 - 수료기준 목록"><![CDATA[
	        -- SELECT_SBJCT_CMPLT_STND_LIST
	        
	SELECT COMMONCODE CODE, CMM_CODENAME LABEL, B.WEI
	FROM TB_BA_COMMONCODE A, TB_EM_CMPLT_STND B
	WHERE A.COMPANYID = B.COMPANYID(+) AND A.COMMONCODE = B.CMPLT_STND_CD(+)
	    AND STANDARDCODE = 'BA09'
	    AND A.USEFLAG = 'Y'
	    AND A.COMPANYID = ?
	    AND B.USEFLAG(+) = 'Y'
	    AND B.SUBJECT_NUM(+) = ?
	ORDER BY A.COMMONCODE
	    ]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_LIST" description="과정관리 - 과정목록"><![CDATA[
	        -- SELECT_SBJCT_LIST
	
	SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
	FROM(
	        SELECT BS.SUBJECT_NUM
	             , BS.SUBJECT_NUM SUBJECT_NUM_NUMB
	             , BS.USEFLAG
	             , BS.SUBJECT_NAME
	             , BS.TRAINING_CODE
	             , FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CODE) TRAINING_STRING
	             , NVL(BS.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
				 , FUN_COMMON_CODE(BS.COMPANYID, 'BA08', SUBSTR(BS.ALW_STD_CD, 1, 1)) ALW_STD_NM1
				 , FUN_COMMON_CODE(BS.COMPANYID, 'BA08', SUBSTR(BS.ALW_STD_CD, 1, 4)) ALW_STD_NM2
				 , (SELECT CD_VALUE3 FROM TB_BA_COMMONCODE BC WHERE BC.COMMONCODE = BS.ALW_STD_CD) ALW_STD_CD3
				 , (SELECT CD_VALUE5 FROM TB_BA_COMMONCODE BC WHERE BC.COMMONCODE = BS.ALW_STD_CD) ALW_STD_CD4
				 , FUN_COMMON_CODE(BS.COMPANYID, 'BA08', BS.ALW_STD_CD) ALW_STD_NM
	             , BS.INSTITUTE_CODE
	             , BS.INSTITUTE_NAME
	             , NVL(BS.EDU_HOUR_H, 0) EDU_HOUR_H
	             , NVL(BS.EDU_HOUR_M, 0) EDU_HOUR_M
	             , NVL(BS.RECOG_TIME_H, 0) RECOG_TIME_H
	             , NVL(BS.RECOG_TIME_M, 0) RECOG_TIME_M
	             , NVL(BS.VETER_ASSE_REQ_YN, 'N') VETER_ASSE_REQ_YN
	             , NVL(BS.REQUIRED_YN, 'N') REQUIRED_YN
	             , BS.PERF_ASSE_SBJ_CD
	             , FUN_COMMON_CODE(BS.COMPANYID, 'BA11', BS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
	             , NVL(BS.RECOG_TIME_H, 0)||'시간'||NVL(BS.RECOG_TIME_M, 0)||'분' RECOG_TIME_NM
	          FROM TB_BA_SBJCT BS
	         WHERE BS.COMPANYID = ?
	           AND BS.DEL_YN = 'N'
	    ) A
	WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_CM_MAPPING_LIST" description="과정관리 - 과정 역량매핑 목록"><![CDATA[
	-- SELECT_SBJCT_CM_MAPPING_LIST

      SELECT 
        FUN_COMMON_CODE(A.COMPANYID, 'C102', CMPGROUP) CMPGROUP_STRING,
        A.CMPNAME,
        A.CMPNUMBER,
        ROW_NUMBER() OVER(ORDER BY B.USEFLAG, A.CMPNAME ASC)-1 ROWNUMBER,
        DECODE(B.USEFLAG, 'Y', 'checked','') CHECKFLAG,
        JOBLDR_NAME     
    FROM TB_CM_COMPETENCY A,
        (
        SELECT CMPNUMBER, COMPANYID, USEFLAG
        FROM TB_CM_SUBJECT_MAP
        WHERE USEFLAG = 'Y'
            AND COMPANYID = ?
            AND SUBJECT_NUM = ?
        ) B,
        (
        SELECT CMPNUMBER, LTRIM(SUBSTR(MAX(SYS_CONNECT_BY_PATH( JOBLDR_NAME , ', ')), 2)) JOBLDR_NAME
        FROM(
            SELECT A.CMPNUMBER, REPLACE(C.JOBLDR_NAME, ',', '') JOBLDR_NAME,
                ROW_NUMBER() OVER(PARTITION BY A.CMPNUMBER ORDER BY C.JOBLDR_NAME) RN
            FROM TB_CM_COMPETENCY A, TB_CM_JOBLER_CMPT_R B, TB_CM_JOB_LDR_I C
            WHERE A.COMPANYID = B.COMPANYID AND A.CMPNUMBER = B.CMPNUMBER
                AND B.COMPANYID = C.COMPANYID AND B.JOBLDR_NUM = C.JOBLDR_NUM
                AND A.USEFLAG = 'Y' AND A.DEL_YN = 'N' AND B.USEFLAG = 'Y' AND C.USEFLAG = 'Y' AND C.DEL_YN = 'N'
            ) 
        START WITH RN = 1
        CONNECT BY PRIOR CMPNUMBER = CMPNUMBER AND PRIOR RN = RN-1
        GROUP BY CMPNUMBER
        ) C
    WHERE A.COMPANYID = B.COMPANYID(+) 
        AND A.CMPNUMBER = B.CMPNUMBER(+)
        AND A.CMPNUMBER = C.CMPNUMBER(+)
        AND A.USEFLAG = 'Y'
        AND A.COMPANYID = ?
    ORDER BY ROWNUMBER, B.CMPNUMBER, A.CMPGROUP, A.CMPNUMBER
	]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_INFO" description="과정관리 - 과정정보 상세"><![CDATA[
	-- SELECT_SBJCT_INFO
	
	 SELECT BS.SUBJECT_NUM
	     , BS.USEFLAG
	     , BS.SUBJECT_NAME
	     , BS.TRAINING_CODE
	     , FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CODE) TRAINING_STRING
	     , NVL(BS.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
	     , BS.DEPT_DESIGNATION_CD
	     , FUN_COMMON_CODE(BS.COMPANYID, 'BA04', BS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING
	     , BS.INSTITUTE_CODE
	     , BS.INSTITUTE_NAME
	     , BS.EDU_HOUR_H
	     , BS.EDU_HOUR_M
	     , BS.RECOG_TIME_H
	     , BS.RECOG_TIME_M
	     , BS.EDU_TARGET
	     , BS.COURSE_CONTENTS
	     , BS.EDU_OBJECT
	     , NVL(BS.REQUIRED_YN, 'N') REQUIRED_YN
	     , ALW_STD_CD
	     , SUBSTR(ALW_STD_CD, 1, 1) ALW_STD_CD1 
	     , SUBSTR(ALW_STD_CD, 1, 4) ALW_STD_CD2
	     , (SELECT CD_VALUE3 FROM TB_BA_COMMONCODE BC WHERE BC.COMMONCODE = BS.ALW_STD_CD) ALW_STD_CD3
	     , (SELECT CD_VALUE5 FROM TB_BA_COMMONCODE BC WHERE BC.COMMONCODE = BS.ALW_STD_CD) ALW_STD_CD4
	     , OFFICETIME_CD
	     , EDUINS_DIV_CD
	     , BS.PERF_ASSE_SBJ_CD
	     , FUN_COMMON_CODE(BS.COMPANYID, 'BA11', BS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
	     , EVL_CMPL
	 FROM TB_BA_SBJCT BS
	 WHERE BS.SUBJECT_NUM = ?
	 AND BS.COMPANYID = ?
	]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_LIST_EXCEL" description="과정관리 - 엑셀다운로드 용 과정목록"><![CDATA[
	        -- SELECT_SBJCT_LIST_EXCEL
	
	SELECT BS.SUBJECT_NUM
	    , BS.SUBJECT_NAME
	    , BS.TRAINING_CODE
	    , FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CODE) TRAINING_STRING
	    , NVL(BS.EDU_HOUR_H, 0) EDU_HOUR_H
	    , NVL(BS.EDU_HOUR_M, 0) EDU_HOUR_M
	    , NVL(BS.RECOG_TIME_H, 0) RECOG_TIME_H
	    , NVL(BS.RECOG_TIME_M, 0) RECOG_TIME_M
	    , EDU_OBJECT
	    , EDU_TARGET
	    , COURSE_CONTENTS
	    , ALW_STD_CD
	    , FUN_COMMON_CODE(BS.COMPANYID, 'BA08', BS.ALW_STD_CD) ALW_STD_STRING
	    , BS.INSTITUTE_CODE
	    , BS.INSTITUTE_NAME
	    , NVL(BS.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
	    , BS.PERF_ASSE_SBJ_CD
	    , FUN_COMMON_CODE(BS.COMPANYID, 'BA11', BS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
	    , OFFICETIME_CD
	    , FUN_COMMON_CODE(BS.COMPANYID, 'BA07', BS.OFFICETIME_CD) OFFICETIME_STRING
	    , EDUINS_DIV_CD
	    , FUN_COMMON_CODE(BS.COMPANYID, 'BA05', BS.EDUINS_DIV_CD) EDUINS_DIV_STRING
	    , BS.USEFLAG
	FROM TB_BA_SBJCT BS
	WHERE BS.COMPANYID = ?
	    AND BS.DEL_YN = 'N'
	    ]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_MAPP_EXCEL" description="엑셀다운로드 용 역량매핑목록"><![CDATA[
	        -- SELECT_SBJCT_MAPP_EXCEL
	        
	SELECT B.SUBJECT_NUM, C.SUBJECT_NAME, B.CMPNUMBER, A.CMPNAME, B.USEFLAG
	FROM TB_CM_COMPETENCY A, TB_CM_SUBJECT_MAP B, TB_BA_SBJCT C
	WHERE A.COMPANYID = B.COMPANYID AND A.CMPNUMBER = B.CMPNUMBER
	    AND B.COMPANYID = C.COMPANYID AND B.SUBJECT_NUM = C.SUBJECT_NUM
	    AND A.USEFLAG = 'Y' AND B.USEFLAG = 'Y' AND C.USEFLAG = 'Y'
	    AND A.DEL_YN = 'N' AND C.DEL_YN = 'N'
	    AND A.COMPANYID = ?
	ORDER BY C.SUBJECT_NAME, A.CMPNAME
	         
	    ]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_OPEN_LIST_EXCEL" description="차수관리 - 엑셀다운로드 "><![CDATA[
	        -- SELECT_SBJCT_OPEN_LIST_EXCEL
	SELECT B.SUBJECT_NUM
		, B.OPEN_NUM
		, B.SUBJECT_NAME
		, FUN_COMMON_CODE(B.COMPANYID, 'BA03', B.TRAINING_CODE) TRAINING_STRING
		, YYYY
		, B.CHASU
		, TO_CHAR(EDU_STIME, 'YYYY-MM-DD') EDU_STIME
		, TO_CHAR(EDU_ETIME, 'YYYY-MM-DD') EDU_ETIME
		, TO_CHAR(APPLY_STIME, 'YYYY-MM-DD') APPLY_STIME
		, TO_CHAR(APPLY_ETIME, 'YYYY-MM-DD') APPLY_ETIME
		, TO_CHAR(CANCEL_ETIME, 'YYYY-MM-DD') CANCEL_ETIME
		, NVL(B.EDU_HOUR_H, 0) EDU_HOUR_H
		, NVL(B.EDU_HOUR_M, 0) EDU_HOUR_M
		, NVL(B.RECOG_TIME_H, 0) RECOG_TIME_H
		, NVL(B.RECOG_TIME_M, 0) RECOG_TIME_M
		, B.APPLICANT
		, B.EDU_DAYS
		, B.EDU_OBJECT
		, B.EDU_TARGET
		, B.COURSE_CONTENTS
		, FUN_COMMON_CODE(B.COMPANYID, 'BA08', B.ALW_STD_CD) ALW_STD_STRING
		, B.INSTITUTE_NAME
		, NVL(B.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
		, FUN_COMMON_CODE(B.COMPANYID, 'BA11', B.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
		, FUN_COMMON_CODE(B.COMPANYID, 'BA07', B.OFFICETIME_CD) OFFICETIME_STRING
		, FUN_COMMON_CODE(B.COMPANYID, 'BA05', B.EDUINS_DIV_CD) EDUINS_DIV_STRING
		, DECODE(NVL(B.CLOSING_YN, 'N'), 'Y', '폐강', 'N') CLOSING_YN
	FROM TB_BA_SBJCT A, TB_BA_SBJCT_OPEN B
	WHERE A.COMPANYID = B.COMPANYID AND A.SUBJECT_NUM = B.SUBJECT_NUM
	    AND A.DEL_YN = 'N' AND B.DEL_YN = 'N' 
	    AND A.COMPANYID = ?
	    AND B.EDU_STIME BETWEEN ? AND ?
	    ]]></sql-query>
	
	<sql-query name="SELECT_SBJCT_YEAR_LIST" description="과정개설 년도목록"><![CDATA[
	-- SELECT_SBJCT_YEAR_LIST
	
	   SELECT YYYY||'년' as LABEL
	        , YYYY as DATA
	     FROM (
	           SELECT DISTINCT YYYY 
	             FROM TB_BA_SBJCT_OPEN
	            ORDER BY YYYY DESC
	          )
	  ]]></sql-query>
	
	<sql-query name="SELECT_ALW_ADMIN_LIST" description="상시학습관리 목록"><![CDATA[
	 -- SELECT_ALW_ADMIN_LIST
	 
	SELECT SL.*, COUNT(*) OVER() TOTALITEMCOUNT FROM(
	SELECT         BS.ALW_STD_SEQ
	          , BS.COMPANYID   
	          , BS.USEFLAG
	          , BS.SUBJECT_NM
	          , BS.TRAINING_CD
	          , FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CD) TRAINING_STRING
	          , ALW_STD_CD
	          , FUN_COMMON_CODE(BS.COMPANYID, 'BA08', BS.ALW_STD_CD) ALW_STD_STRING
	          , DECODE(NVL(BS.DEPT_DESIGNATION_YN, 'N'), 'Y', '예', '아니오') DEPT_DESIGNATION_YN
	          , BS.DEPT_DESIGNATION_CD
	          , FUN_COMMON_CODE(BS.COMPANYID, 'BA04', BS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING
	          , BS.INSTITUTE_NAME
	          , NVL(BS.RECOG_TIME_H, 0) RECOG_TIME_H
	          , NVL(BS.RECOG_TIME_M, 0) RECOG_TIME_M
	          , BS.PERF_ASSE_SBJ_CD
	          , FUN_COMMON_CODE(BS.COMPANYID, 'BA11', BS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
              , TO_CHAR(BS.EDU_STIME, 'YYYY-MM-DD') EDU_STIME
              , TO_CHAR(BS.EDU_ETIME, 'YYYY-MM-DD') EDU_ETIME
              , TO_CHAR(BS.EDU_STIME, 'YYYY-MM-DD')||'~'||TO_CHAR(BS.EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD
	          , NVL(BS.EDU_HOUR_H, 0) EDU_HOUR_H
	          , NVL(BS.EDU_HOUR_M, 0) EDU_HOUR_M
	          , BS.REQ_NUM
	          , BS.REQ_STS_CD
	          , BS.YYYY
	          , BS.CREATER
	          , BS.CREATETIME
	          , BS.REQUIRED_YN
	          , CASE WHEN REQ_STS_CD = 2 THEN '승인'
	                 WHEN REQ_STS_CD = 3 THEN '미승인'
	                 WHEN REQ_STS_CD = 0 THEN ''
	                 ELSE '승인중'
	                 END REQ_STS_NM
              , NAME
	          , NVL(BA.PER_CNT, 0) PER_CNT
              --, ROW_NUMBER() OVER(ORDER BY BS.ALW_STD_SEQ DESC) RNUM
	       FROM TB_EM_ALW_STD BS ,
	            (
                SELECT A.COMPANYID, ALW_STD_SEQ, MIN(NAME) NAME, COUNT(*)-1 PER_CNT 
                FROM TB_EM_ALW_STD_USER A, TB_BA_USER B
                WHERE A.USERID = B.USERID
                    AND A.USEFLAG = 'Y'  
                GROUP BY A.COMPANYID,ALW_STD_SEQ
	            ) BA
	      WHERE BS.ALW_STD_SEQ = BA.ALW_STD_SEQ
	      AND BS.DEL_YN = 'N'
	      AND BS.REQ_STS_CD <> 0
	      AND BS.YYYY = ? 
	  )SL
	  WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic></sql-query>  
	
	<sql-query name="SELECT_ALW_ADMIN_INFO" description="상시학습관리 상세 정보"><![CDATA[
	-- SELECT_ALW_ADMIN_INFO
	
	SELECT BS.ALW_STD_SEQ
	     , BS.COMPANYID
	     , BS.USEFLAG
	     , BS.SUBJECT_NM
	     , BS.TRAINING_CD
	     , FUN_COMMON_CODE(BS.COMPANYID, 'BA03', BS.TRAINING_CD) TRAINING_STRING
	     , NVL(BS.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
	     , BS.DEPT_DESIGNATION_CD
	     , FUN_COMMON_CODE(BS.COMPANYID, 'BA04', BS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_STRING
	     , BS.INSTITUTE_NAME
         , BS.INSTITUTE_CODE
	     , NVL(BS.RECOG_TIME_H, 0) RECOG_TIME_H
	     , NVL(BS.RECOG_TIME_M, 0) RECOG_TIME_M
	     , NVL(BS.EDU_HOUR_H, 0) EDU_HOUR_H
	     , NVL(BS.EDU_HOUR_M, 0) EDU_HOUR_M
	     , BS.EDU_STIME
	     , BS.EDU_ETIME
	     , BS.EDU_CONT
	     , ALW_STD_CD
	     , BS.REQ_NUM
	     , BS.REQ_STS_CD
         , FUN_COMMON_CODE(BS.COMPANYID, 'BA13', BS.REQ_STS_CD) REQ_STS_NM
	     , SUBSTR(ALW_STD_CD, 1, 1) ALW_STD_CD1 
	     , SUBSTR(ALW_STD_CD, 1, 4) ALW_STD_CD2
         , (SELECT CD_VALUE3 FROM TB_BA_COMMONCODE BC WHERE BC.COMPANYID = BS.COMPANYID AND BC.STANDARDCODE = 'BA08' AND BC.COMMONCODE = BS.ALW_STD_CD) ALW_STD_CD3
         , (SELECT CD_VALUE5 FROM TB_BA_COMMONCODE BC WHERE BC.COMPANYID = BS.COMPANYID AND BC.STANDARDCODE = 'BA08' AND BC.COMMONCODE = BS.ALW_STD_CD) ALW_STD_CD4
	     , OFFICETIME_CD
	     , EDUINS_DIV_CD
	     , BS.PERF_ASSE_SBJ_CD
	     , BS.REQUIRED_YN
	     , FUN_COMMON_CODE(BS.COMPANYID, 'BA11', BS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
	     , BS.YYYY
	     , BS.CREATER
	     , (SELECT A.REQ_STS_CD
	       FROM TB_BA_APPR_REQ_LINE A,
	       (SELECT MAX(REQ_LINE_SEQ) REQ_LINE_SEQ FROM TB_BA_APPR_REQ_LINE WHERE REQ_NUM = ?) B  
	       WHERE REQ_NUM = BS.REQ_NUM
	       AND A.REQ_LINE_SEQ = B.REQ_LINE_SEQ) LAST_REQ_STS 
	     , CMPNUMBER
	 FROM TB_EM_ALW_STD BS
	 WHERE BS.COMPANYID = ?  
	 AND BS.ALW_STD_SEQ = ?
	]]></sql-query>
	
	<sql-query name="SELECT_ALW_ADMIN_EMP_LIST" description="상시학습관리 부서원 정보"><![CDATA[
	      -- SELECT_ALW_ADMIN_EMP_LIST
	      
	   SELECT   TA.USERID
	       , TA.COMPANYID
	       , TU.NAME
	       , TA.ALW_STD_SEQ
	       , TA.DIVISIONID
	       , TA.JOB
	       , TA.LEADERSHIP
	       , TA.GRADE_NUM
           , FUN_COMMON_CODE(TA.COMPANYID, 'BA15', TA.GRADE_NUM) GRADE_NM
	       , TA.TT_GET_SCO
	       , TA.USEFLAG 
	FROM TB_EM_ALW_STD_USER TA ,TB_BA_USER TU
	WHERE TA.USERID = TU.USERID
	AND TA.COMPANYID = ?
	AND TA.ALW_STD_SEQ = ?
	AND TA.USEFLAG = 'Y'
	  
	  ]]></sql-query>
	
	<sql-query name="GET_ALW_YEAR_LIST" description="상시학습관리 년도 리스트"><![CDATA[
	--  GET_ALW_YEAR_LIST
	SELECT  DISTINCT(NVL(YYYY, TO_CHAR(SYSDATE, 'YYYY'))) YYYY  , NVL(YYYY, TO_CHAR(SYSDATE, 'YYYY'))||'년' TEXT
	      FROM TB_EM_ALW_STD
	      WHERE COMPANYID = ?
	      ORDER BY YYYY DESC
	  ]]></sql-query>
	
	<sql-query name="SELECT_SEQ_ALW_NUM" description="상시학습번호 조회"><![CDATA[
	 -- SELECT_SEQ_ALW_NUM
	 
	SELECT SEQ_ALW_STD_SEQ.NEXTVAL FROM DUAL
	]]></sql-query>
	
	<sql-query name="SELECT_SEQ_REQ_NUM" description="승인요청번호 SEQ 조회"><![CDATA[
	      -- MTR : SELECT_SEQ_REQ_NUM
	  
	SELECT SEQ_REQ_NUM.NEXTVAL FROM DUAL
	  ]]></sql-query>
	
	<sql-query name="MERGE_ALW_INFO" description="상시학습관리 머지"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : MERGE_ALW_INFO
	
	MERGE INTO TB_EM_ALW_STD A
	USING(
	    SELECT
	      ? COMPANYID,
	      ? ALW_STD_SEQ,
	      ? TRAINING_CD,
	      ? SUBJECT_NM,
	      ? RECOG_TIME_H,
	      ? RECOG_TIME_M,     
	      ? EDU_STIME,
	      ? EDU_ETIME,
	      ? EDU_CONT,
	      ? ALW_STD_CD,
	      ? INSTITUTE_NAME,
          ? INSTITUTE_CODE,
	      ? DEPT_DESIGNATION_YN,
	      ? DEPT_DESIGNATION_CD,
	      ? OFFICETIME_CD,
	      ? EDUINS_DIV_CD,
	      SYSDATE CREATETIME,
	      ? CREATER,
	      ? PERF_ASSE_SBJ_CD,
	      ? YYYY,
	      ? REQ_NUM,
	      ? REQ_STS_CD,
	      'Y' USEFLAG,
	      'N' DEL_YN,
	      ? EDU_HOUR_H,
	      ? EDU_HOUR_M,
	      ? REQUIRED_YN,
	      '2' W_DIV_CD
	    FROM DUAL
	)B 
	ON ( A.COMPANYID = B.COMPANYID AND A.ALW_STD_SEQ = B.ALW_STD_SEQ )
	WHEN MATCHED THEN
	UPDATE        
	SET 
	      A.TRAINING_CD = B.TRAINING_CD,
	      A.SUBJECT_NM = B.SUBJECT_NM,
	      A.RECOG_TIME_H = B.RECOG_TIME_H,
	      A.RECOG_TIME_M = B.RECOG_TIME_M,
	      A.EDU_STIME = B.EDU_STIME,
	      A.EDU_ETIME = B.EDU_ETIME,
	      A.EDU_CONT = B.EDU_CONT,
	      A.ALW_STD_CD = B.ALW_STD_CD,
	      A.INSTITUTE_NAME = B.INSTITUTE_NAME,
          A.INSTITUTE_CODE = B.INSTITUTE_CODE,
	      A.DEPT_DESIGNATION_YN = B.DEPT_DESIGNATION_YN,
	      A.DEPT_DESIGNATION_CD = B.DEPT_DESIGNATION_CD,
	      A.OFFICETIME_CD = B.OFFICETIME_CD,
	      A.EDUINS_DIV_CD = B.EDUINS_DIV_CD,
	      A.MODIFYTIME = SYSDATE,
	      A.MODIFIER = B.CREATER,
	      A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD,
	      A.YYYY = B.YYYY,
	      A.REQ_NUM = B.REQ_NUM,
	      A.REQ_STS_CD = B.REQ_STS_CD,
	      A.USEFLAG = B.USEFLAG,
	      A.DEL_YN = B.DEL_YN,
	      A.EDU_HOUR_H = B.EDU_HOUR_H,
	      A.EDU_HOUR_M = B.EDU_HOUR_M,
	      A.REQUIRED_YN = B.REQUIRED_YN
	WHEN NOT MATCHED THEN 
	INSERT(A.COMPANYID, A.ALW_STD_SEQ, A.SUBJECT_NM, A.TRAINING_CD, A.RECOG_TIME_H, A.RECOG_TIME_M, A.EDU_STIME, A.EDU_ETIME, A.EDU_CONT, A.INSTITUTE_NAME, A.INSTITUTE_CODE, A.ALW_STD_CD, A.DEPT_DESIGNATION_YN, A.DEPT_DESIGNATION_CD, A.OFFICETIME_CD, A.EDUINS_DIV_CD, A.CREATETIME, A.CREATER, A.PERF_ASSE_SBJ_CD, A.YYYY, A.REQ_NUM, A.REQ_STS_CD,A.USEFLAG,A.DEL_YN,A.EDU_HOUR_H,A.EDU_HOUR_M,A.REQUIRED_YN,A.W_DIV_CD,A.MODIFYTIME,A.MODIFIER) 
	VALUES(B.COMPANYID, B.ALW_STD_SEQ, B.SUBJECT_NM, B.TRAINING_CD, B.RECOG_TIME_H, B.RECOG_TIME_M, B.EDU_STIME, B.EDU_ETIME, B.EDU_CONT, B.INSTITUTE_NAME, B.INSTITUTE_CODE, B.ALW_STD_CD, B.DEPT_DESIGNATION_YN, B.DEPT_DESIGNATION_CD, B.OFFICETIME_CD, B.EDUINS_DIV_CD, B.CREATETIME, B.CREATER, B.PERF_ASSE_SBJ_CD, B.YYYY, B.REQ_NUM, B.REQ_STS_CD,B.USEFLAG,B.DEL_YN,B.EDU_HOUR_H,B.EDU_HOUR_M,B.REQUIRED_YN,B.W_DIV_CD,SYSDATE,B.CREATER)
	
	  ]]></sql-query>
	
	<sql-query name="MERGE_ALW_EMP_MAP" description="상시학습관리 부서원 머지"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : MERGE_ALW_EMP_MAP
	
	MERGE INTO TB_EM_ALW_STD_USER A
	      USING(
	          SELECT
	            ? COMPANYID,
	            ? ALW_STD_SEQ,
	            ? USERID,
	            ? DIVISIONID,
	            ? JOB,
	            ? LEADERSHIP,
	            ? GRADE_NUM,
	            ? TT_GET_SCO,     
	            'Y' USEFLAG,
	            SYSDATE CREATETIME,
	            ? CREATER
	          FROM DUAL
	      )B 
	      ON ( A.COMPANYID = B.COMPANYID AND A.ALW_STD_SEQ = B.ALW_STD_SEQ AND A.USERID = B.USERID  )
	      WHEN MATCHED THEN
	      UPDATE        
	      SET 
	            A.DIVISIONID = B.DIVISIONID,
	            A.JOB = B.JOB,
	            A.LEADERSHIP = B.LEADERSHIP,
	            A.GRADE_NUM = B.GRADE_NUM,   
	            A.TT_GET_SCO = B.TT_GET_SCO,
	            A.MODIFYTIME = B.CREATETIME,
	            A.MODIFIER = B.CREATER,
	            A.USEFLAG = B.USEFLAG
	      WHEN NOT MATCHED THEN 
	      INSERT(A.COMPANYID, A.ALW_STD_SEQ, A.USERID, A.DIVISIONID, A.JOB, A.LEADERSHIP, A.GRADE_NUM, A.TT_GET_SCO, A.CREATETIME, A.CREATER, A.USEFLAG, A.MODIFYTIME) 
	      VALUES(B.COMPANYID, B.ALW_STD_SEQ, B.USERID, B.DIVISIONID, B.JOB, B.LEADERSHIP, B.GRADE_NUM, B.TT_GET_SCO, B.CREATETIME, B.CREATER, B.USEFLAG, B.CREATETIME)
	  ]]></sql-query>
	
	<sql-query name="INSERT_TB_BA_APPR_REQ" description=" 상시학습관리 승인요청 저장"><![CDATA[
	      -- INSERT_TB_BA_APPR_REQ  
	       
	INSERT INTO TB_BA_APPR_REQ(
	    COMPANYID, REQ_NUM, REQ_TYPE_CD, REQ_USERID, REQ_DTIME, 
	    LAST_REQ_STS_CD, LAST_REQ_LINE_SEQ, USEFLAG, CREATETIME,  CREATER 
	)
	VALUES(
	    ?, ?, ?, ?, SYSDATE,
	    '1', ?, 'Y', SYSDATE, ?
	)
	  ]]></sql-query>
	
	<sql-query name="INSERT_TB_BA_APPR_REQ_LINE" description="상시학습관리 승인요청라인 저장"><![CDATA[
	     --  INSERT_TB_BA_APPR_REQ_LINE
	 
	INSERT INTO TB_BA_APPR_REQ_LINE(
	    COMPANYID, REQ_NUM, REQ_LINE_SEQ, APPR_USERID, APPR_DIV_CD, 
	    REQ_STS_CD, USEFLAG, CREATETIME, 
	    CREATER
	)
	VALUES(
	    ?, ?, ?, ?, ?,
	    ?, 'Y', SYSDATE, ?
	)
	 ]]></sql-query>
	 
	 <sql-query name="UPDATE_CLASS_RECOG_TIME" description="인정시간 재계산"><![CDATA[
          --sql_file : ba-subject-sqlset.xml
          --sql_name : UPDATE_CLASS_RECOG_TIME
	 
UPDATE TB_BA_SBJCT_OPEN_CLASS
SET RECOG_TIME_H = ?
    , RECOG_TIME_M = ?
WHERE COMPANYID = ?
    AND OPEN_NUM = ?
    AND USERID = ?
     ]]></sql-query>
    
	<sql-query name="UPDATE_ALW_INFO" description="상시학습관리 수정 저장"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_ALW_INFO

	MERGE INTO TB_EM_ALW_STD A
	          USING(
	              SELECT 
	                   ? ALW_STD_SEQ,
	                   ? COMPANYID,
	                   ? TRAINING_CD,
	                   ? SUBJECT_NM,
	                   ? RECOG_TIME_H,
	                   ? RECOG_TIME_M,     
	                   ? EDU_STIME,
	                   ? EDU_ETIME,
	                   ? EDU_CONT ,
	                   ? ALW_STD_CD,
	                   ? INSTITUTE_NAME,
                       ? INSTITUTE_CODE,
	                   ? DEPT_DESIGNATION_YN,
	                   ? DEPT_DESIGNATION_CD,
	                   ? OFFICETIME_CD,
	                   ? EDUINS_DIV_CD,
	                   SYSDATE MODIFYTIME,
	                   ? MODIFIER,
	                   ? PERF_ASSE_SBJ_CD,
	                   ? YYYY,
	                   ? EDU_HOUR_H,
	                   ? EDU_HOUR_M,
	                   ? REQ_STS_CD,
	                   ? REQ_NUM,
	                   ? REQUIRED_YN,
	                   SYSDATE CREATETIME,
	                   'Y' USEFLAG,
	                   'N' DEL_YN,
	                   '2' W_DIV_CD,
	                   ? CMPNUMBER
	              FROM DUAL
	             ) B ON (A.ALW_STD_SEQ = B.ALW_STD_SEQ AND A.COMPANYID = B.COMPANYID )
	             WHEN MATCHED THEN
	             UPDATE
	               SET
	                   A.TRAINING_CD = B.TRAINING_CD,
	                   A.SUBJECT_NM = B.SUBJECT_NM,
	                   A.RECOG_TIME_H = B.RECOG_TIME_H,
	                   A.RECOG_TIME_M = B.RECOG_TIME_M,
	                   A.EDU_STIME = B.EDU_STIME,
	                   A.EDU_ETIME = B.EDU_ETIME,
	                   A.EDU_CONT = B.EDU_CONT,
	                   A.ALW_STD_CD = B.ALW_STD_CD,
	                   A.INSTITUTE_NAME = B.INSTITUTE_NAME,
	                   A.INSTITUTE_CODE = B.INSTITUTE_CODE,
	                   A.DEPT_DESIGNATION_YN = B.DEPT_DESIGNATION_YN,
	                   A.DEPT_DESIGNATION_CD = B.DEPT_DESIGNATION_CD,
	                   A.OFFICETIME_CD = B.OFFICETIME_CD,
	                   A.EDUINS_DIV_CD = B.EDUINS_DIV_CD,
	                   A.MODIFYTIME = B.MODIFYTIME,
	                   A.MODIFIER = B.MODIFIER,
	                   A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD,
	                   A.YYYY = B.YYYY,
	                   A.EDU_HOUR_H = B.EDU_HOUR_H,
	                   A.EDU_HOUR_M = B.EDU_HOUR_M,
	                   A.REQUIRED_YN = B.REQUIRED_YN,
	                   A.CMPNUMBER = B.CMPNUMBER,
	                   A.DATA_STS_CD = CASE WHEN B.REQ_STS_CD = 2 AND A.DATA_STS_CD ='C' THEN 'M'
                                            ELSE A.DATA_STS_CD
                                       END
	             WHEN NOT MATCHED THEN
	             INSERT(A.ALW_STD_SEQ, A.COMPANYID,A.TRAINING_CD, A.SUBJECT_NM, A.RECOG_TIME_H, A.RECOG_TIME_M, A.EDU_STIME, A.EDU_ETIME, 
	             A.EDU_CONT, A.ALW_STD_CD, A.INSTITUTE_NAME, A.INSTITUTE_CODE, A.DEPT_DESIGNATION_YN, A.DEPT_DESIGNATION_CD, A.OFFICETIME_CD, A.EDUINS_DIV_CD, A.CREATER,A.PERF_ASSE_SBJ_CD,A.YYYY,A.EDU_HOUR_H,A.EDU_HOUR_M,A.REQ_STS_CD,A.CREATETIME,A.USEFLAG,A.DEL_YN,A.REQ_NUM,A.REQUIRED_YN,A.W_DIV_CD,A.MODIFYTIME,A.MODIFIER, A.CMPNUMBER, A.DATA_STS_CD) 
	             VALUES(B.ALW_STD_SEQ, B.COMPANYID,B.TRAINING_CD, B.SUBJECT_NM, B.RECOG_TIME_H, B.RECOG_TIME_M, B.EDU_STIME, B.EDU_ETIME, 
	             B.EDU_CONT, B.ALW_STD_CD, B.INSTITUTE_NAME, B.INSTITUTE_CODE, B.DEPT_DESIGNATION_YN, B.DEPT_DESIGNATION_CD, B.OFFICETIME_CD, B.EDUINS_DIV_CD, B.MODIFIER,B.PERF_ASSE_SBJ_CD,B.YYYY,B.EDU_HOUR_H,B.EDU_HOUR_M,B.REQ_STS_CD,B.CREATETIME,B.USEFLAG,B.DEL_YN,B.REQ_NUM,B.REQUIRED_YN,B.W_DIV_CD,SYSDATE,B.MODIFIER, B.CMPNUMBER, '') 
	             
	  ]]></sql-query>
	
	<sql-query name="UPDATE_ALW_EMP" description="상시학습관리 부서원 미사용처리"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_ALW_EMP
	UPDATE TB_EM_ALW_STD_USER
	SET   USEFLAG = 'N'
	WHERE COMPANYID = ?
	AND   ALW_STD_SEQ = ?
	  ]]></sql-query>
	  
	  <sql-query name="UPDATE_ALW_GRADENUM" description="상시학습관리 부서원 인정직급 수정"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_ALW_GRADENUM
	UPDATE TB_EM_ALW_STD_USER
	SET   GRADE_NUM = ?
	WHERE COMPANYID = ?
	AND   ALW_STD_SEQ = ?
	  ]]></sql-query>
	
	<sql-query name="UPDATE_CENCLE_ALW" description="상시학습관리 요청 취소"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_CENCLE_ALW
	UPDATE TB_EM_ALW_STD
	      SET   REQ_STS_CD = 0
	      WHERE COMPANYID = ?
	      AND   ALW_STD_SEQ = ?
	  ]]></sql-query>
	
	<sql-query name="UPDATE_CENCLE_APP_REQ" description="상시학습관리 결재요청 테이블 취소 처리"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_CENCLE_APP_REQ
	UPDATE TB_BA_APPR_REQ
	      SET   LAST_REQ_STS_CD = 0
	      WHERE COMPANYID = ?
	      AND   REQ_NUM = ?
	  ]]></sql-query>
	
	<sql-query name="UPDATE_DELETE_ALW" description="상시학습관리 삭제 처리"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_DELETE_ALW
	UPDATE TB_EM_ALW_STD
	      SET    USEFLAG ='N'
	           , DEL_YN ='Y'
	           , DATA_STS_CD = CASE WHEN REQ_STS_CD = 2 AND ( DATA_STS_CD ='C' OR DATA_STS_CD ='M') THEN 'D'
	                           ELSE DATA_STS_CD
	                           END
	           , MODIFYTIME = SYSDATE
	      WHERE COMPANYID = ?
	      AND   ALW_STD_SEQ = ?
	  ]]></sql-query>
	
	<sql-query name="UPDATE_TB_ALW_CLASS_DATA_STS" description="상시학습관리 처시상태 코드 업데이트"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPDATE_TB_ALW_CLASS_DATA_STS
	
	UPDATE TB_EM_ALW_STD
	      SET    DATA_STS_CD = 'M'
	      WHERE COMPANYID = ?
	      AND YYYY = ?
	      AND DATA_STS_CD = 'C'
	  ]]></sql-query>
	
	<sql-query name="SELECT_ALW_LIST_EXCEL" description="상시학습관리 엑셀 리스트"><![CDATA[
	SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT,ROW_NUMBER() OVER(ORDER BY DVS_NAME) RNUM
	      FROM(
	          SELECT    (SELECT DVS_NAME FROM TB_BA_DIVISION WHERE DIVISIONID = EAU.DIVISIONID) DVS_NAME
                      , EAU.DIVISIONID
                      , (SELECT DVS_FULLNAME FROM TB_BA_DIVISION WHERE DIVISIONID = EAU.DIVISIONID) DVS_FULLNAME
                      , BU.GRADE_NM
                      , BU.GRADE_NUM
                      , BU.NAME 
                      , EAU.GRADE_NUM AFTER_GRADE_NUM
                      , FUN_COMMON_CODE(EAS.COMPANYID, 'BA15', EAU.GRADE_NUM) AFTER_GRADE_NM
                      , DECODE(NVL(EAS.DEPT_DESIGNATION_YN, 'N'), 'Y', '예', '아니오') DEPT_DESIGNATION_NM
                      , (SELECT FUN_COMMON_CODE(EAS.COMPANYID, 'BA03', EAS.TRAINING_CD) FROM DUAL) TRAINING_NM
                      , TO_CHAR(EAS.EDU_STIME, 'YYYY-MM-DD') EDU_STIME
                      , TO_CHAR(EAS.EDU_ETIME, 'YYYY-MM-DD') EDU_ETIME
                      , EAS.SUBJECT_NM
                      , EAS.EDU_HOUR_H
                      , EAS.RECOG_TIME_H
                      , EAS.TRAINING_CD
                      , (SELECT FUN_COMMON_CODE(EAS.COMPANYID, 'BA07', EAS.OFFICETIME_CD) FROM DUAL) OFFICETIME_NM 
                      , (SELECT FUN_COMMON_CODE(EAS.COMPANYID, 'BA05', EAS.EDUINS_DIV_CD) FROM DUAL) EDUINS_DIV_NM
                      , EAS.INSTITUTE_NAME
                      , EAS.EDU_CONT
                      , EAU.TT_GET_SCO
                      , EAS.ALW_STD_CD
                      , FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', EAS.ALW_STD_CD) ALW_STD_STRING
                      , NVL(EAS.DEPT_DESIGNATION_YN, 'N') DEPT_DESIGNATION_YN
                      , NVL(EAS.RECOG_TIME_M, 0) RECOG_TIME_M
                      , EAS.PERF_ASSE_SBJ_CD
                      , FUN_COMMON_CODE(EAS.COMPANYID, 'BA11', EAS.PERF_ASSE_SBJ_CD) PERF_ASSE_SBJ_STRING
                      , TO_CHAR(EAS.EDU_STIME, 'YYYY-MM-DD')||'~'||TO_CHAR(EAS.EDU_ETIME, 'YYYY-MM-DD') EDU_PERIOD
                      , NVL(EAS.EDU_HOUR_M, 0) EDU_HOUR_M
                      , CASE WHEN REQ_STS_CD = 2 THEN '승인'
                             WHEN REQ_STS_CD = 3 THEN '미승인'
                             ELSE '승인중'
                             END REQ_STS_NM
	          FROM
	          TB_EM_ALW_STD EAS ,TB_EM_ALW_STD_USER EAU, TB_BA_USER BU
	          WHERE EAS.ALW_STD_SEQ = EAU.ALW_STD_SEQ
	          AND EAU.USERID = BU.USERID
	          AND EAU.USEFLAG = 'Y'
	          AND EAS.USEFLAG = 'Y'
	          AND EAS.DEL_YN = 'N'
	          AND EAS.YYYY = ?
	          AND EAS.COMPANYID = ?
	          AND EAS.REQ_STS_CD <> 0
	      ) A
	      ORDER BY A.SUBJECT_NM , A.EDU_STIME
	]]></sql-query>
	
	<sql-query name="UPLOAD_ALW_ADMIN_CLASS" description="상시학습관리 엑셀업로드"><![CDATA[
	      --sql_file : ba-subject-sqlset.xml
	      --sql_name : UPLOAD_ALW_ADMIN_CLASS
	MERGE INTO TB_EM_ALW_STD A
	          USING(
	              SELECT 
	                   ? ALW_STD_SEQ,
	                   ? COMPANYID,
	                   ? TRAINING_CD,
	                   ? SUBJECT_NM,
	                   ? RECOG_TIME_H,
	                   ? RECOG_TIME_M,     
	                   ? EDU_STIME,
	                   ? EDU_ETIME,
	                   ? EDU_CONT ,
	                   ? ALW_STD_CD,
	                   ? INSTITUTE_NAME,
                       ? INSTITUTE_CODE,
	                   ? DEPT_DESIGNATION_YN,
	                   ? DEPT_DESIGNATION_CD,
	                   ? OFFICETIME_CD,
	                   ? EDUINS_DIV_CD,
	                   SYSDATE MODIFYTIME,
	                   ? MODIFIER,
	                   ? PERF_ASSE_SBJ_CD,
	                   ? YYYY,
	                   ? EDU_HOUR_H,
	                   ? EDU_HOUR_M,
	                   ? REQ_STS_CD,
	                   ? REQUIRED_YN,
	                   SYSDATE CREATETIME,
	                   'Y' USEFLAG,
	                   'N' DEL_YN,
	                   'C' DATA_STS_CD,
	                   '2' W_DIV_CD,
	                   ? CMPNUMBER
	              FROM DUAL
	             ) B ON (A.ALW_STD_SEQ = B.ALW_STD_SEQ AND A.COMPANYID = B.COMPANYID )
	             WHEN MATCHED THEN
	             UPDATE
	               SET
	                   A.TRAINING_CD = B.TRAINING_CD,
	                   A.SUBJECT_NM = B.SUBJECT_NM,
	                   A.RECOG_TIME_H = B.RECOG_TIME_H,
	                   A.RECOG_TIME_M = B.RECOG_TIME_M,
	                   A.EDU_STIME = B.EDU_STIME,
	                   A.EDU_ETIME = B.EDU_ETIME,
	                   A.EDU_CONT = B.EDU_CONT,
	                   A.ALW_STD_CD = B.ALW_STD_CD,
	                   A.INSTITUTE_NAME = B.INSTITUTE_NAME,
	                   A.INSTITUTE_CODE = B.INSTITUTE_CODE,
	                   A.DEPT_DESIGNATION_YN = B.DEPT_DESIGNATION_YN,
	                   A.DEPT_DESIGNATION_CD = B.DEPT_DESIGNATION_CD,
	                   A.OFFICETIME_CD = B.OFFICETIME_CD,
	                   A.EDUINS_DIV_CD = B.EDUINS_DIV_CD,
	                   A.MODIFYTIME = B.MODIFYTIME,
	                   A.MODIFIER = B.MODIFIER,
	                   A.PERF_ASSE_SBJ_CD = B.PERF_ASSE_SBJ_CD,
	                   A.YYYY = B.YYYY,
	                   A.EDU_HOUR_H = B.EDU_HOUR_H,
	                   A.EDU_HOUR_M = B.EDU_HOUR_M,
	                   A.REQUIRED_YN = B.REQUIRED_YN,
	                   A.CMPNUMBER = B.CMPNUMBER
	             WHEN NOT MATCHED THEN
	             INSERT(A.ALW_STD_SEQ, A.COMPANYID,A.TRAINING_CD, A.SUBJECT_NM, A.RECOG_TIME_H, A.RECOG_TIME_M, A.EDU_STIME, A.EDU_ETIME, 
	             A.EDU_CONT, A.ALW_STD_CD, A.INSTITUTE_NAME, A.INSTITUTE_CODE, A.DEPT_DESIGNATION_YN, A.DEPT_DESIGNATION_CD, A.OFFICETIME_CD, A.EDUINS_DIV_CD, A.CREATER,A.PERF_ASSE_SBJ_CD,A.YYYY,A.EDU_HOUR_H,A.EDU_HOUR_M,A.REQ_STS_CD,A.CREATETIME,A.USEFLAG,A.DEL_YN,A.REQUIRED_YN,A.W_DIV_CD,A.MODIFYTIME,A.DATA_STS_CD, A.CMPNUMBER) 
	             VALUES(B.ALW_STD_SEQ, B.COMPANYID,B.TRAINING_CD, B.SUBJECT_NM, B.RECOG_TIME_H, B.RECOG_TIME_M, B.EDU_STIME, B.EDU_ETIME, 
	             B.EDU_CONT, B.ALW_STD_CD, B.INSTITUTE_NAME, B.INSTITUTE_CODE, B.DEPT_DESIGNATION_YN, B.DEPT_DESIGNATION_CD, B.OFFICETIME_CD, B.EDUINS_DIV_CD, B.MODIFIER,B.PERF_ASSE_SBJ_CD,B.YYYY,B.EDU_HOUR_H,B.EDU_HOUR_M,B.REQ_STS_CD,B.CREATETIME,B.USEFLAG,B.DEL_YN,B.REQUIRED_YN,B.W_DIV_CD,SYSDATE, B.DATA_STS_CD, B.CMPNUMBER) 
	             
	  ]]></sql-query>
	
	<sql-query name="SELECT_EDU_RES_LIST" description="부서원교육현황"><![CDATA[
        SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
          FROM (
                SELECT 1 AS EDU_TP
                     , BSO.SUBJECT_NUM /* 과정번호 */
                     , BSOC.OPEN_NUM /* 개설번호 */
                     , BSO.SUBJECT_NAME /* 과정명 */
                     , C3.CMM_CODENAME AS TRAINING_NM /* 학습유형 */
                     , BSO.YYYY /* 개설년도 */
                     , BSO.CHASU /* 기수 */
                     , (SELECT FUN_DATE_PERIOD(BSO.EDU_STIME, BSO.EDU_ETIME, 2) FROM DUAL) EDU_PERIOD /* 교육기간 */
                     , DECODE(BSO.DEPT_DESIGNATION_YN,'Y','예','아니오') DEPT_DESIGNATION_YN /* 부처지정유무 */
                     , FUN_COMMON_CODE(BSO.COMPANYID, 'BA04', BSO.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_NM
                     , BSOC.ATTEND_STATE_CODE AS AS_CD/* 수강상태 */
                     , C1.CMM_CODENAME AS ATTEND_STATE_NM
                     , BSOC.REQ_NUM /* 결재번호 */
                     , BSOC.REQ_STS_CD /* 승인상태코드 */
                     , C2.CMM_CODENAME AS REQ_STS_NM
                     , NVL(BSOC.RECOG_TIME_H,0)||'시간 '||NVL(BSOC.RECOG_TIME_M, 0)||'분' AS RECOG_TIME  /* 인정시간 : 시:분 */
                     , CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > TO_CHAR(BSO.CANCEL_ETIME,'YYYYMMDD') THEN 'N'
                            WHEN BSOC.ATTEND_STATE_CODE NOT IN ( '1' ) THEN 'N'
                            ELSE 'Y'
                        END CANCEL_YN /* 취소가능여부 */
                     , FUN_COMMON_CODE(BSO.COMPANYID, 'BA08', SUBSTR(BSO.ALW_STD_CD, 1, 1)) ||'-'||
                       FUN_COMMON_CODE(BSO.COMPANYID, 'BA08', SUBSTR(BSO.ALW_STD_CD, 1, 4)) ||'-'||
                       FUN_COMMON_CODE(BSO.COMPANYID, 'BA08', BSO.ALW_STD_CD) ALW_STD_NM /* 상시학습종류*/
                     , BU.NAME
                     , BD.DVS_NAME
                     , BD.DVS_FULLNAME 
                     , BU.GRADE_NM
                  FROM (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA03') C3, /* 학습유형 */
                       (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA13') C2, /* 결재상태 */
                       (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA01') C1, /* 수강상태 */
                       TB_BA_SBJCT BS,
                       TB_BA_SBJCT_OPEN BSO,
                       TB_BA_SBJCT_OPEN_CLASS BSOC,
                       TB_BA_USER BU,
                       TB_BA_DIVISION BD
                 WHERE BSOC.COMPANYID = ?
                   AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                   AND BSOC.COMPANYID = BSO.COMPANYID
                   AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                   AND BSO.COMPANYID = BS.COMPANYID
                   AND BU.USERID = BSOC.USERID
                   AND BU.COMPANYID = BD.COMPANYID
                   AND BU.DIVISIONID = BD.DIVISIONID
                   AND BS.USEFLAG = 'Y'
                   AND BS.DEL_YN = 'N'
                   AND BSO.USEFLAG = 'Y'
                   AND BSOC.USEFLAG = 'Y'
                   AND BSOC.DEL_YN = 'N'
                   AND BSOC.ATTEND_STATE_CODE != '3' -- 취소가 아닌 유효한 건.
                   AND BU.USEFLAG = 'Y'
                   AND C1.COMMONCODE = BSOC.ATTEND_STATE_CODE
                   AND C2.COMMONCODE(+) = BSOC.REQ_STS_CD
                   AND C3.COMMONCODE = BSO.TRAINING_CODE
                   AND EDU_STIME BETWEEN ? AND ?
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
                UNION ALL
                SELECT 2 AS EDU_TP
                     , NULL AS SUBJECT_NUM /* 과정번호 */
                     , EAS.ALW_STD_SEQ AS OPEN_NUM
                     , EAS.SUBJECT_NM /* 과정명 */
                     , C3.CMM_CODENAME AS TRAINING_NM /* 학습유형 */
                     , EAS.YYYY /* 개설년도 */
                     , NULL AS CHASU /* 기수 */
                     , (SELECT FUN_DATE_PERIOD(EAS.EDU_STIME, EAS.EDU_ETIME, 2) FROM DUAL) EDU_PERIOD /* 교육기간 */
                     , DECODE(EAS.DEPT_DESIGNATION_YN,'Y','예','아니오') DEPT_DESIGNATION_YN /* 부처지정유무 */
                     , FUN_COMMON_CODE(EASU.COMPANYID, 'BA04', EAS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_NM
                     , '5' AS ATTEND_STATE_CODE /* 수강상태 */
                     , '수료' AS ATTEND_STATE_NM
                     , EAS.REQ_NUM /* 결재번호 */
                     , EAS.REQ_STS_CD /* 승인상태코드 */
                     , C2.CMM_CODENAME AS REQ_STS_NM
                      , NVL(EAS.RECOG_TIME_H,0)||'시간 '||NVL(EAS.RECOG_TIME_M, 0)||'분' AS RECOG_TIME  /* 인정시간 : 시:분 */
                     , 'N' AS CANCEL_YN /* 취소가능여부 */
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', SUBSTR(EAS.ALW_STD_CD, 1, 1)) ||'-'||
                       FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', SUBSTR(EAS.ALW_STD_CD, 1, 4)) ||'-'||
                       FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', EAS.ALW_STD_CD) ALW_STD_NM /* 상시학습종류  */
                     , BU.NAME
                     , BD.DVS_NAME
                     , BD.DVS_FULLNAME 
                     , BU.GRADE_NM
                  FROM (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA03') C3, /* 학습유형 */
                       (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA13') C2, /* 결재상태 */
                       TB_EM_ALW_STD_USER EASU,
                       TB_EM_ALW_STD EAS,
                       TB_BA_USER BU,
                       TB_BA_DIVISION BD
                 WHERE EASU.COMPANYID = ?
                   AND EASU.USEFLAG = 'Y'
                   AND EASU.COMPANYID = EAS.COMPANYID
                   AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                   AND BU.USERID = EASU.USERID
                   AND BU.COMPANYID = BD.COMPANYID
                   AND BU.DIVISIONID = BD.DIVISIONID
                   AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                   AND EAS.USEFLAG = 'Y'
                   AND EAS.DEL_YN = 'N'
                   AND C2.COMMONCODE(+) = EAS.REQ_STS_CD
                   AND C3.COMMONCODE = EAS.TRAINING_CD
                   AND EDU_STIME BETWEEN ? AND ?
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
              ) A
          WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
	<sql-query name="SELECT_ALW_EDU_RES_LIST" description="부서원상시학습달성현황"><![CDATA[
SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
FROM(
    SELECT USERID, NAME, GRADE_NM, DVS_NAME, DVS_FULLNAME
        , TRUNC(MAX(DD0_REQ_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD0_REQ_TIME),60))||'분' DD0_REQ_TIME
        , TRUNC(MAX(DD0_TAKE_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD0_TAKE_TIME),60))||'분' DD0_TAKE_TIME
        , TRUNC(MAX(DD1_REQ_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD1_REQ_TIME),60))||'분' DD1_REQ_TIME
        , TRUNC(MAX(DD1_TAKE_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD1_TAKE_TIME),60))||'분' DD1_TAKE_TIME
        , CASE WHEN MAX(DD0_REQ_TIME) > 0 THEN 
            CASE WHEN MAX(DD0_REQ_TIME)<=MAX(DD0_TAKE_TIME) AND MAX(DD1_REQ_TIME)<=MAX(DD1_TAKE_TIME) THEN '충족'
            ELSE '미충족'
            END
          ELSE '-'
          END REVAL
    FROM(
        SELECT BU.USERID, BU.NAME, BU.GRADE_NM, BD.DVS_NAME, BD.DVS_FULLNAME
            , DECODE(A.DATA, '0', NVL(A.REQ_TIME, 0), 0) DD0_REQ_TIME
            , DECODE(A.DATA, '0', NVL(B.TAKE_TIME,0), 0) DD0_TAKE_TIME
            , DECODE(A.DATA, '001', NVL(A.REQ_TIME, 0), 0) DD1_REQ_TIME
            , DECODE(A.DATA, '001', NVL(B.TAKE_TIME,0), 0) DD1_TAKE_TIME
            , NVL(A.REQ_TIME, 0) REQ_TIME, NVL(B.TAKE_TIME,0) TAKE_TIME--NVL(MIN(CASE WHEN A.REQ_TIME > NVL(B.TAKE_TIME,0) THEN 'N' ELSE 'Y' END),'N') TAKE_YN
        FROM TB_BA_USER BU, TB_BA_DIVISION BD,
            (
            /* 사용자별 지정학습 기준시간 */
            SELECT USERID, DATA, LABEL, MAX(REQ_TIME) REQ_TIME
            FROM(
                SELECT UECT.USERID, '0' AS DATA
                    , '총시간' AS LABEL
                    , UECT.TT_CMP_TIME_H*60 + (NVL(UECT.TT_CMP_TIME_M,0)) AS REQ_TIME
                FROM TB_EM_USER_EDU_CMP_TIME UECT
                WHERE UECT.YYYY = ?
                    AND UECT.USEFLAG = 'Y'
                UNION ALL
                SELECT UDDT.USERID, UDDT.DEPT_DESIGNATION_CD AS DATA
                    , UDDT.DEPT_DESIGNATION_NM AS LABEL
                    , UDDT.CMP_TIME_H*60 + (NVL(UDDT.CMP_TIME_M,0)) AS REQ_TIME
                FROM TB_EM_USER_DEPT_DESI_TIME UDDT
                WHERE UDDT.YYYY = ?
                    AND UDDT.USEFLAG = 'Y'
                )
            GROUP BY USERID, DATA, LABEL
            ) A,
            (
            /* 필수 이수 = 교육 + 상시 */
            SELECT USERID
                , DEPT_DESIGNATION_CD AS DATA
                , SUM(RFCOG_TIME) TAKE_TIME
            FROM(
                SELECT /* 교육개설 수료정보 */
                    BSOC.USERID
                    , '0' AS DEPT_DESIGNATION_CD
                    , NVL(BSOC.RECOG_TIME_H,0)*60+(NVL(BSOC.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_BA_SBJCT BS,
                    TB_BA_SBJCT_OPEN BSO,
                    TB_BA_SBJCT_OPEN_CLASS BSOC
                WHERE BSOC.COMPANYID = 1
                    AND BSOC.ATTEND_STATE_CODE = '5' /* 수강상태 : 수료 */
                    AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                    AND BSOC.COMPANYID = BSO.COMPANYID
                    AND BSO.YYYY = ?
                    AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                    AND BSO.COMPANYID = BS.COMPANYID
                    AND BS.USEFLAG = 'Y'
                    AND BS.DEL_YN = 'N'
                    AND BSO.USEFLAG = 'Y'
                    AND BSOC.USEFLAG = 'Y'
                UNION ALL
                SELECT /* 교육개설 수료정보 : 부서지정학습 */
                    BSOC.USERID
                    , '001' DEPT_DESIGNATION_CD
                    , NVL(BSOC.RECOG_TIME_H,0)*60+(NVL(BSOC.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_BA_SBJCT BS,
                    TB_BA_SBJCT_OPEN BSO,
                    TB_BA_SBJCT_OPEN_CLASS BSOC
                WHERE BSOC.COMPANYID = 1
                    AND BSOC.ATTEND_STATE_CODE = '5' /* 수강상태 : 수료 */
                    AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                    AND BSOC.COMPANYID = BSO.COMPANYID
                    AND BSO.YYYY = ?
                    AND BSO.DEPT_DESIGNATION_YN = 'Y' /* 부처지정유무 */
                    AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                    AND BSO.COMPANYID = BS.COMPANYID
                    AND BS.USEFLAG = 'Y'
                    AND BS.DEL_YN = 'N'
                    AND BSO.USEFLAG = 'Y'
                    AND BSOC.USEFLAG = 'Y'
                UNION ALL
                SELECT /* 상시학습 : 총 */ 
                    EASU.USERID
                    , '0' AS DEPT_DESIGNATION_CD
                    , NVL(EAS.RECOG_TIME_H,0)*60+(NVL(EAS.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_EM_ALW_STD_USER EASU,
                    TB_EM_ALW_STD EAS
                WHERE EASU.COMPANYID = 1
                    AND EASU.USEFLAG = 'Y'
                    AND EASU.COMPANYID = EAS.COMPANYID
                    AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                    AND EAS.YYYY = ?
                    AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                    AND EAS.USEFLAG = 'Y'
                    AND EAS.DEL_YN = 'N'
                UNION ALL
                SELECT /* 상시학습 : 부처지정학습 */ 
                    EASU.USERID
                    , '001' AS DEPT_DESIGNATION_CD
                    , NVL(EAS.RECOG_TIME_H,0)*60+(NVL(EAS.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_EM_ALW_STD_USER EASU,
                    TB_EM_ALW_STD EAS
                WHERE EASU.COMPANYID = 1
                    AND EASU.USEFLAG = 'Y'
                    AND EASU.COMPANYID = EAS.COMPANYID
                    AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                    AND EAS.YYYY = ?
                    AND EAS.DEPT_DESIGNATION_YN = 'Y' /* 부처지정유무 */
                    AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                    AND EAS.USEFLAG = 'Y'
                    AND EAS.DEL_YN = 'N'
                )
            GROUP BY USERID, DEPT_DESIGNATION_CD
            ) B
        WHERE BU.COMPANYID = BD.COMPANYID(+) AND BU.DIVISIONID = BD.DIVISIONID(+)
            AND BU.USERID = A.USERID(+)
            AND A.USERID = B.USERID(+) AND A.DATA = B.DATA(+)
            AND BU.USEFLAG = 'Y' AND BU.DEL_YN = 'N' 
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[ 
        )
    GROUP BY USERID, NAME, GRADE_NM, DVS_NAME, DVS_FULLNAME
 )A
WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
    ]]></sql-query>
    
	<sql-query name="SELECT_ALW_EDU_RES_LIST_EXCEL" description="부서원상시학습달성현황"><![CDATA[
    SELECT USERID, NAME, GRADE_NM, DVS_NAME, DVS_FULLNAME
        , TRUNC(MAX(DD0_REQ_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD0_REQ_TIME),60))||'분' DD0_REQ_TIME
        , TRUNC(MAX(DD0_TAKE_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD0_TAKE_TIME),60))||'분' DD0_TAKE_TIME
        , TRUNC(MAX(DD1_REQ_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD1_REQ_TIME),60))||'분' DD1_REQ_TIME
        , TRUNC(MAX(DD1_TAKE_TIME)/60)||'시간 '||TRUNC(MOD(MAX(DD1_TAKE_TIME),60))||'분' DD1_TAKE_TIME
        , CASE WHEN MAX(DD0_REQ_TIME) > 0 THEN 
            CASE WHEN MAX(DD0_REQ_TIME)<=MAX(DD0_TAKE_TIME) AND MAX(DD1_REQ_TIME)<=MAX(DD1_TAKE_TIME) THEN '충족'
            ELSE '미충족'
            END
          ELSE '-'
          END REVAL
    FROM(
        SELECT BU.USERID, BU.NAME, BU.GRADE_NM, BD.DVS_NAME, BD.DVS_FULLNAME
            , DECODE(A.DATA, '0', NVL(A.REQ_TIME, 0), 0) DD0_REQ_TIME
            , DECODE(A.DATA, '0', NVL(B.TAKE_TIME,0), 0) DD0_TAKE_TIME
            , DECODE(A.DATA, '001', NVL(A.REQ_TIME, 0), 0) DD1_REQ_TIME
            , DECODE(A.DATA, '001', NVL(B.TAKE_TIME,0), 0) DD1_TAKE_TIME
            , NVL(A.REQ_TIME, 0) REQ_TIME, NVL(B.TAKE_TIME,0) TAKE_TIME--NVL(MIN(CASE WHEN A.REQ_TIME > NVL(B.TAKE_TIME,0) THEN 'N' ELSE 'Y' END),'N') TAKE_YN
        FROM TB_BA_USER BU, TB_BA_DIVISION BD,
            (
            /* 사용자별 지정학습 기준시간 */
            SELECT USERID, DATA, LABEL, MAX(REQ_TIME) REQ_TIME
            FROM(
                SELECT UECT.USERID, '0' AS DATA
                    , '총시간' AS LABEL
                    , UECT.TT_CMP_TIME_H*60 + (NVL(UECT.TT_CMP_TIME_M,0)) AS REQ_TIME
                FROM TB_EM_USER_EDU_CMP_TIME UECT
                WHERE UECT.YYYY = ?
                    AND UECT.USEFLAG = 'Y'
                UNION ALL
                SELECT UDDT.USERID, UDDT.DEPT_DESIGNATION_CD AS DATA
                    , UDDT.DEPT_DESIGNATION_NM AS LABEL
                    , UDDT.CMP_TIME_H*60 + (NVL(UDDT.CMP_TIME_M,0)) AS REQ_TIME
                FROM TB_EM_USER_DEPT_DESI_TIME UDDT
                WHERE UDDT.YYYY = ?
                    AND UDDT.USEFLAG = 'Y'
                )
            GROUP BY USERID, DATA, LABEL
            ) A,
            (
            /* 필수 이수 = 교육 + 상시 */
            SELECT USERID
                , DEPT_DESIGNATION_CD AS DATA
                , SUM(RFCOG_TIME) TAKE_TIME
            FROM(
                SELECT /* 교육개설 수료정보 */
                    BSOC.USERID
                    , '0' AS DEPT_DESIGNATION_CD
                    , NVL(BSOC.RECOG_TIME_H,0)*60+(NVL(BSOC.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_BA_SBJCT BS,
                    TB_BA_SBJCT_OPEN BSO,
                    TB_BA_SBJCT_OPEN_CLASS BSOC
                WHERE BSOC.COMPANYID = 1
                    AND BSOC.ATTEND_STATE_CODE = '5' /* 수강상태 : 수료 */
                    AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                    AND BSOC.COMPANYID = BSO.COMPANYID
                    AND BSO.YYYY = ?
                    AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                    AND BSO.COMPANYID = BS.COMPANYID
                    AND BS.USEFLAG = 'Y'
                    AND BS.DEL_YN = 'N'
                    AND BSO.USEFLAG = 'Y'
                    AND BSOC.USEFLAG = 'Y'
                UNION ALL
                SELECT /* 교육개설 수료정보 : 부서지정학습 */
                    BSOC.USERID
                    , '001' DEPT_DESIGNATION_CD
                    , NVL(BSOC.RECOG_TIME_H,0)*60+(NVL(BSOC.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_BA_SBJCT BS,
                    TB_BA_SBJCT_OPEN BSO,
                    TB_BA_SBJCT_OPEN_CLASS BSOC
                WHERE BSOC.COMPANYID = 1
                    AND BSOC.ATTEND_STATE_CODE = '5' /* 수강상태 : 수료 */
                    AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                    AND BSOC.COMPANYID = BSO.COMPANYID
                    AND BSO.YYYY = ?
                    AND BSO.DEPT_DESIGNATION_YN = 'Y' /* 부처지정유무 */
                    AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                    AND BSO.COMPANYID = BS.COMPANYID
                    AND BS.USEFLAG = 'Y'
                    AND BS.DEL_YN = 'N'
                    AND BSO.USEFLAG = 'Y'
                    AND BSOC.USEFLAG = 'Y'
                UNION ALL
                SELECT /* 상시학습 : 총 */ 
                    EASU.USERID
                    , '0' AS DEPT_DESIGNATION_CD
                    , NVL(EAS.RECOG_TIME_H,0)*60+(NVL(EAS.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_EM_ALW_STD_USER EASU,
                    TB_EM_ALW_STD EAS
                WHERE EASU.COMPANYID = 1
                    AND EASU.USEFLAG = 'Y'
                    AND EASU.COMPANYID = EAS.COMPANYID
                    AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                    AND EAS.YYYY = ?
                    AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                    AND EAS.USEFLAG = 'Y'
                    AND EAS.DEL_YN = 'N'
                UNION ALL
                SELECT /* 상시학습 : 부처지정학습 */ 
                    EASU.USERID
                    , '001' AS DEPT_DESIGNATION_CD
                    , NVL(EAS.RECOG_TIME_H,0)*60+(NVL(EAS.RECOG_TIME_M,0)) AS RFCOG_TIME
                FROM TB_EM_ALW_STD_USER EASU,
                    TB_EM_ALW_STD EAS
                WHERE EASU.COMPANYID = 1
                    AND EASU.USEFLAG = 'Y'
                    AND EASU.COMPANYID = EAS.COMPANYID
                    AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                    AND EAS.YYYY = ?
                    AND EAS.DEPT_DESIGNATION_YN = 'Y' /* 부처지정유무 */
                    AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                    AND EAS.USEFLAG = 'Y'
                    AND EAS.DEL_YN = 'N'
                )
            GROUP BY USERID, DEPT_DESIGNATION_CD
            ) B
        WHERE BU.COMPANYID = BD.COMPANYID(+) AND BU.DIVISIONID = BD.DIVISIONID(+)
            AND BU.USERID = A.USERID(+)
            AND A.USERID = B.USERID(+) AND A.DATA = B.DATA(+)
            AND BU.USEFLAG = 'Y' AND BU.DEL_YN = 'N' 
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[ 
        )
    GROUP BY USERID, NAME, GRADE_NM, DVS_NAME, DVS_FULLNAME
    ORDER BY NAME
	    ]]></sql-query>



    <sql-query name="SELECT_ALW_EDU_RES_LIST_DETAIL" description="부서원상시학습달성현황"><![CDATA[
    -- SELECT_ALW_EDU_RES_LIST_DETAIL
    
SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
FROM(
                SELECT 1 AS EDU_TP
                     , BSO.SUBJECT_NUM /* 과정번호 */
                     , BSOC.OPEN_NUM /* 개설번호 */
                     , BSO.SUBJECT_NAME /* 과정명 */
                     , C3.CMM_CODENAME AS TRAINING_NM /* 학습유형 */
                     , BSO.YYYY /* 개설년도 */
                     , BSO.CHASU /* 기수 */
                     , (SELECT FUN_DATE_PERIOD(BSO.EDU_STIME, BSO.EDU_ETIME, 2) FROM DUAL) EDU_PERIOD /* 교육기간 */
                     , DECODE(BSO.DEPT_DESIGNATION_YN,'Y','예','아니오') DEPT_DESIGNATION_YN /* 부처지정유무 */
                     , FUN_COMMON_CODE(BSO.COMPANYID, 'BA04', BSO.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_NM
                     , BSOC.ATTEND_STATE_CODE AS AS_CD/* 수강상태 */
                     , C1.CMM_CODENAME AS ATTEND_STATE_NM
                     , BSOC.REQ_NUM /* 결재번호 */
                     , BSOC.REQ_STS_CD /* 승인상태코드 */
                     , C2.CMM_CODENAME AS REQ_STS_NM
                     , NVL(BSOC.RECOG_TIME_H,0)||'시간 '||BSOC.RECOG_TIME_M||'분' AS RECOG_TIME  /* 인정시간 : 시:분 */
                     , CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > TO_CHAR(BSO.CANCEL_ETIME,'YYYYMMDD') THEN 'N'
                            WHEN BSOC.ATTEND_STATE_CODE NOT IN ( '1' ) THEN 'N'
                            ELSE 'Y'
                        END CANCEL_YN /* 취소가능여부 */
                     , FUN_COMMON_CODE(BSO.COMPANYID, 'BA08', SUBSTR(BSO.ALW_STD_CD, 1, 1)) ||'-'||
                       FUN_COMMON_CODE(BSO.COMPANYID, 'BA08', SUBSTR(BSO.ALW_STD_CD, 1, 4)) ||'-'||
                       FUN_COMMON_CODE(BSO.COMPANYID, 'BA08', BSO.ALW_STD_CD) ALW_STD_NM /* 상시학습종류*/
                  FROM (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA03') C3, /* 학습유형 */
                       (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA13') C2, /* 결재상태 */
                       (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA01') C1, /* 수강상태 */
                       TB_BA_SBJCT BS,
                       TB_BA_SBJCT_OPEN BSO,
                       TB_BA_SBJCT_OPEN_CLASS BSOC
                 WHERE BSOC.COMPANYID = ?
                   AND BSOC.USERID = ?
                   AND BSO.YYYY = ?
                   AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                   AND BSOC.COMPANYID = BSO.COMPANYID
                   AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                   AND BSO.COMPANYID = BS.COMPANYID
                   AND BS.USEFLAG = 'Y'
                   AND BS.DEL_YN = 'N'
                   AND BSO.USEFLAG = 'Y'
                   AND BSOC.USEFLAG = 'Y'
                   AND BSOC.DEL_YN = 'N'
                   AND BSOC.ATTEND_STATE_CODE = '5' -- 취소가 아닌 유효한 건.
                   AND C1.COMMONCODE = BSOC.ATTEND_STATE_CODE
                   AND C2.COMMONCODE(+) = BSOC.REQ_STS_CD
                   AND C3.COMMONCODE = BSO.TRAINING_CODE 
                UNION ALL
                SELECT 2 AS EDU_TP
                     , NULL AS SUBJECT_NUM /* 과정번호 */
                     , EAS.ALW_STD_SEQ AS OPEN_NUM
                     , EAS.SUBJECT_NM /* 과정명 */
                     , C3.CMM_CODENAME AS TRAINING_NM /* 학습유형 */
                     , EAS.YYYY /* 개설년도 */
                     , NULL AS CHASU /* 기수 */
                     , (SELECT FUN_DATE_PERIOD(EAS.EDU_STIME, EAS.EDU_ETIME, 2) FROM DUAL) EDU_PERIOD /* 교육기간 */
                     , DECODE(EAS.DEPT_DESIGNATION_YN,'Y','예','아니오') DEPT_DESIGNATION_YN /* 부처지정유무 */
                     , FUN_COMMON_CODE(EASU.COMPANYID, 'BA04', EAS.DEPT_DESIGNATION_CD) DEPT_DESIGNATION_NM
                     , '5' AS ATTEND_STATE_CODE /* 수강상태 */
                     , '수료' AS ATTEND_STATE_NM
                     , EAS.REQ_NUM /* 결재번호 */
                     , EAS.REQ_STS_CD /* 승인상태코드 */
                     , C2.CMM_CODENAME AS REQ_STS_NM
                      , NVL(EAS.RECOG_TIME_H,0)||'시간 '||EAS.RECOG_TIME_M||'분' AS RECOG_TIME  /* 인정시간 : 시:분 */
                     , 'N' AS CANCEL_YN /* 취소가능여부 */
                     , FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', SUBSTR(EAS.ALW_STD_CD, 1, 1)) ||'-'||
                       FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', SUBSTR(EAS.ALW_STD_CD, 1, 4)) ||'-'||
                       FUN_COMMON_CODE(EAS.COMPANYID, 'BA08', EAS.ALW_STD_CD) ALW_STD_NM /* 상시학습종류  */
                  FROM (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA03') C3, /* 학습유형 */
                       (SELECT COMMONCODE, CMM_CODENAME FROM TB_BA_COMMONCODE WHERE COMPANYID = 1 AND STANDARDCODE = 'BA13') C2, /* 결재상태 */
                       TB_EM_ALW_STD_USER EASU,
                       TB_EM_ALW_STD EAS
                 WHERE EASU.COMPANYID = ?
                   AND EASU.USERID = ?
                   AND EAS.YYYY = ?
                   AND EASU.USEFLAG = 'Y'
                   AND EASU.COMPANYID = EAS.COMPANYID
                   AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                   AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                   AND EAS.USEFLAG = 'Y'
                   AND EAS.DEL_YN = 'N'
                   AND C2.COMMONCODE(+) = EAS.REQ_STS_CD
                   AND C3.COMMONCODE = EAS.TRAINING_CD
 )A
WHERE 1=1
ORDER BY EDU_PERIOD DESC
    ]]></sql-query>
                   
	<!-- 이사람 연동용 -->
	<sql-query name="SELECT_SYNC_EDU_LIST" description="이사랑 연동 용 교육결과 목록 조회"><![CDATA[
	      -- BA_SUBJECT : SELECT_SYNC_EDU_LIST
	
    SELECT A.*
         , COUNT(1) OVER() TOTALITEMCOUNT
      FROM (
            /* 일반교육 */
            SELECT 'EDU' AS COL01 /* 공란 */
                 , D1.DVS_FULLNAME AS COL02 /* 현재소속 */
                 , U.GRADE_NUM AS COL03 /* 현재직급 코드 */
                 , U.NAME AS COL07 /* 성명 */
                 , SOC.TIME_GRADE_NUM AS COL08 /* 인정직급 코드 */
                 , NVL(SO.DEPT_DESIGNATION_YN,'N') AS COL09 /* 지정학습 유무 */
                 , NULL AS COL10 /* 지정학습종류 코드 */
                 , SO.ALW_STD_CD AS COL11 /* 학습종류 코드 */
                 , TO_CHAR(SO.EDU_STIME,'YYYYMMDD') AS COL12 /* 시작일자(YYYYMMDD) */
                 , TO_CHAR(SO.EDU_ETIME,'YYYYMMDD') AS COL13 /* 종료일자(YYYYMMDD) */
                 , SO.SUBJECT_NAME AS COL14 /* 제목 */
                 , SO.EDU_HOUR_H AS COL15 /* 실적시간 : 시간 */
                 , SO.EDU_HOUR_M AS COL16 /* 실적시간 : 분 */
                 , SOC.RECOG_TIME_H AS COL17 /* 인정시간 : 시간 */
                 , SOC.RECOG_TIME_M AS COL18 /* 인정시간 : 분 */
                 , NVL(SO.VETER_ASSE_REQ_YN, 'N') AS COL19 /* 필수여부 */
                 , SO.TRAINING_CODE AS COL20 /* 학습방법 코드 */
                 , SO.OFFICETIME_CD AS COL21 /* 교육시간구분(업무내외) */
                 , SO.EDUINS_DIV_CD AS COL22 /* 교육기관구분 */
                 , SO.INSTITUTE_CODE AS COL23 /* 교육기관 코드 */
                 , SO.INSTITUTE_NAME AS COL24 /* 교육기관명 */
                 , SO.COURSE_CONTENTS AS COL25 /* 내용 */
                 , SOC.TT_GET_SCO AS COL27 /* 평정점 */
                 , (SELECT NAME FROM TB_BA_USER WHERE USERID = SOC.CREATER) AS COL28 /* 입력자 */
                 , TO_CHAR(SOC.CREATETIME,'YYYYMMDD') AS COL29 /* 입력일시 */
                 , (SELECT NAME FROM TB_BA_USER WHERE USERID = SOC.MODIFIER) AS COL30 /* 수정자 */
                 , TO_CHAR(SOC.MODIFYTIME,'YYYYMMDD') AS COL31 /* 수정일시 */
                 , U.EMPNO AS COL32 /* 개인식별코드 */
                 , CASE WHEN SOC.DATA_STS_CD IS NULL THEN '신규' 
                        WHEN SOC.DATA_STS_CD = 'I' THEN '신규' 
                        WHEN SOC.DATA_STS_CD = 'M' THEN '변경'
                        WHEN SOC.DATA_STS_CD = 'D' THEN '삭제'
                        WHEN SOC.DATA_STS_CD = 'C' THEN '다운로드 완료'
                   ELSE ''
                   END AS COL33 /* 데이터상태 I/U/D */
                 , SOC.OPEN_NUM AS OPEN_NUM
                 , SOC.USERID AS USERID
                 , SOC.DATA_STS_CD
              FROM TB_BA_SBJCT S,
                   TB_BA_SBJCT_OPEN SO,
                   TB_BA_SBJCT_OPEN_CLASS SOC,
                   TB_BA_USER U,
                   TB_BA_DIVISION D1
             WHERE S.COMPANYID = ?
               AND S.SUBJECT_NUM = SO.SUBJECT_NUM
               AND SO.OPEN_NUM = SOC.OPEN_NUM
               AND SOC.USERID = U.USERID
               AND U.COMPANYID = D1.COMPANYID
               AND U.DIVISIONID = D1.DIVISIONID
               AND ( SOC.ATTEND_STATE_CODE = '5' OR SOC.DATA_STS_CD IN ('I','U','D','C') )
               AND TO_CHAR(SOC.MODIFYTIME,'YYYYMMDD') BETWEEN TO_CHAR(?,'YYYYMMDD') AND TO_CHAR(?,'YYYYMMDD') /* 검색조건 */
            UNION ALL
            /* 상시학습 */
            SELECT 'ALW' AS COL01 /* 공란 */
                 , D1.DVS_FULLNAME AS COL02 /* 현재소속 */
                 , U.GRADE_NUM AS COL03 /* 현재직급 코드 */
                 , U.NAME AS COL07 /* 성명 */
                 , EASU.GRADE_NUM AS COL08 /* 인정직급 코드 */
                 , NVL(EAS.DEPT_DESIGNATION_YN,'N') AS COL09 /* 지정학습 유무 */
                 , NULL AS COL10 /* 지정학습종류 코드 */
                 , EAS.ALW_STD_CD AS COL11 /* 학습종류 코드 */
                 , TO_CHAR(EAS.EDU_STIME,'YYYYMMDD') AS COL12 /* 시작일자(YYYYMMDD) */
                 , TO_CHAR(EAS.EDU_ETIME,'YYYYMMDD') AS COL13 /* 종료일자(YYYYMMDD) */
                 , EAS.SUBJECT_NM AS COL14 /* 제목 */
                 , EAS.EDU_HOUR_H AS COL15 /* 실적시간 : 시간 */
                 , EAS.EDU_HOUR_M AS COL16 /* 실적시간 : 분 */
                 , EAS.RECOG_TIME_H AS COL17 /* 인정시간 : 시간 */
                 , EAS.RECOG_TIME_M AS COL18 /* 인정시간 : 분 */
                 , NVL(EAS.REQUIRED_YN, 'N') AS COL19 /* 필수여부 */
                 , EAS.TRAINING_CD AS COL20 /* 학습방법 코드 */
                 , EAS.OFFICETIME_CD AS COL21 /* 교육시간구분(업무내외) */
                 , EAS.EDUINS_DIV_CD AS COL22 /* 교육기관구분 */
                 , EAS.INSTITUTE_CODE AS COL23 /* 교육기관 코드 */
                 , EAS.INSTITUTE_NAME AS COL24 /* 교육기관명 */
                 , EAS.EDU_CONT AS COL25 /* 내용 */
                 , EASU.TT_GET_SCO AS COL27 /* 평정점 */
                 , (SELECT NAME FROM TB_BA_USER WHERE USERID = EAS.CREATER) AS COL28 /* 입력자 */
                 , TO_CHAR(EAS.CREATETIME,'YYYYMMDD') AS COL29 /* 입력일시 */
                 , (SELECT NAME FROM TB_BA_USER WHERE USERID = EAS.MODIFIER) AS COL30 /* 수정자 */
                 , TO_CHAR(EAS.MODIFYTIME,'YYYYMMDD') AS COL31 /* 수정일시 */
                 , U.EMPNO AS COL32 /* 개인식별코드 */
                 , CASE WHEN EAS.DATA_STS_CD IS NULL THEN '신규' 
                        WHEN EAS.DATA_STS_CD = 'I' THEN '신규' 
                        WHEN EAS.DATA_STS_CD = 'M' THEN '변경'
                        WHEN EAS.DATA_STS_CD = 'D' THEN '삭제'
                        WHEN EAS.DATA_STS_CD = 'C' THEN '다운로드 완료'
                   ELSE ''
                   END AS COL33 /* 데이터상태 I/U/D */
                 , EAS.ALW_STD_SEQ AS OPEN_NUM
                 , EASU.USERID AS USERID
                 , EAS.DATA_STS_CD
              FROM TB_EM_ALW_STD EAS,
                   TB_EM_ALW_STD_USER EASU,
                   TB_BA_USER U,
                   TB_BA_DIVISION D1
             WHERE EAS.COMPANYID = ?
               AND EAS.COMPANYID = EASU.COMPANYID
               AND EAS.ALW_STD_SEQ = EASU.ALW_STD_SEQ
               AND EASU.USERID = U.USERID
               AND U.COMPANYID = D1.COMPANYID
               AND U.DIVISIONID = D1.DIVISIONID
               AND ( EAS.REQ_STS_CD = '2' OR EAS.DATA_STS_CD IN ('I','U','D','C') )
               AND TO_CHAR(EAS.MODIFYTIME, 'YYYYMMDD') BETWEEN TO_CHAR(?,'YYYYMMDD') AND TO_CHAR(?,'YYYYMMDD') /* 검색조건 */
           ) A
     WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
	<sql-query name="UPDATE_EDU_DOWN_STATE" description="다운로드 된 교육이력 상태 변경"><![CDATA[
	      -- BA_SUBJECT : UPDATE_EDU_DOWN_STATE
	
	UPDATE TB_BA_SBJCT_OPEN_CLASS
	   SET DATA_STS_CD = 'C' /* 다운 */
	 WHERE COMPANYID = ?
	   AND OPEN_NUM = ?
	   AND USERID = ?
	  ]]></sql-query>
	
	<sql-query name="UPDATE_ALW_DOWN_STATE" description="다운로드된 상시학습이력 상태 변경"><![CDATA[
	      -- BA_SUBJECT : UPDATE_ALW_DOWN_STATE
	
	UPDATE TB_EM_ALW_STD
	   SET DATA_STS_CD = 'C' /* 다운 */
	 WHERE COMPANYID = ?
	   AND ALW_STD_SEQ = ?
	  ]]></sql-query>
	
	<sql-query name="SELECT_GRADE_LIST" description="직급 목록"><![CDATA[
		SELECT null VALUE, '=== 선택 ===' TEXT FROM DUAL UNION ALL  
		SELECT A.*
		FROM(
			SELECT COMMONCODE VALUE, CMM_CODENAME TEXT
			FROM TB_BA_COMMONCODE 
			WHERE COMPANYID = ?
				AND STANDARDCODE = 'BA15'
				AND USEFLAG = 'Y'
				AND DEL_YN = 'N'
				ORDER BY CMM_CODENAME
		) A
	]]></sql-query>

	<!-- 이사랑 연동용 -->
	
	
	
	<sql-query name="SELECT_DEPT_PRMTN_EDU_LIST" description="부서원 승진교육이수현황 목록 조회"><![CDATA[
		-- ba-subject SELECT_DEPT_PRMTN_EDU_LIST
		 
		SELECT A.*
		     , COUNT(1) OVER() TOTALITEMCOUNT
		  FROM (
                SELECT USERID, EMPNO, NAME, DVS_NAME, DVS_FULLNAME, GRADE_NM
                     , CASE WHEN VETER_ASSE_REQ_TIME > 0  THEN TRUNC(VETER_ASSE_REQ_TIME/60)||'시간 '||TRUNC(MOD(VETER_ASSE_REQ_TIME,60))||'분'
                             ELSE '-'
                        END VA_REQ_TIME /* 승진교육 필수시간 */
                     , CASE WHEN VETER_ASSE_TAKE_TIME > 0 THEN TRUNC(VETER_ASSE_TAKE_TIME/60)||'시간 '||TRUNC(MOD(VETER_ASSE_TAKE_TIME,60))||'분'
                            ELSE '-'
                        END VA_TAKE_TIME /* 승진교육 이수시간 */
                     , CASE WHEN VETER_ASSE_TAKE_TIME > 0 AND (VETER_ASSE_REQ_TIME - VETER_ASSE_TAKE_TIME <= 0) THEN '충족'
                            ELSE '미충족'
                        END CHK
                   FROM ( 
                         SELECT A.USERID
                              , A.EMPNO
                              , A.NAME
                              , B.DVS_NAME
                              , B.DVS_FULLNAME
                              , A.GRADE_NM
                              , CASE WHEN NOW_GRADE_APIT_DT IS NOT NULL 
                                     THEN (
                                           -- 승진한첫 달 15일 이상 근무여부 체크 
                                           CASE WHEN LAST_DAY(TO_DATE(A.NOW_GRADE_APIT_DT,'YYYYMMDD'))-(TO_DATE(A.NOW_GRADE_APIT_DT,'YYYYMMDD')-1) >= 15 THEN 1
                                                ELSE 0
                                            END +
                                            -- 승진한 다음달 부터 SYSDATE기준으로 지난달까지의 개월수
                                           TRUNC(
                                              MONTHS_BETWEEN(
                                                  TO_DATE(TO_CHAR(LAST_DAY(ADD_MONTHS(  DECODE( ?, NULL, SYSDATE, TO_DATE( ?, 'YYYYMMDD')  ), -1)), 'YYYYMMDD'),'YYYYMMDD')+1, 
                                                  TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(A.NOW_GRADE_APIT_DT,'YYYYMMDD'), 1), 'YYYYMM')||'01', 'YYYYMMDD')
                                              )
                                           )  + 
                                           -- 금번달
                                           CASE WHEN TRUNC(DECODE( ?, NULL, SYSDATE, TO_DATE( ?, 'YYYYMMDD')) - (TO_DATE(TO_CHAR(  DECODE( ?, NULL, SYSDATE, TO_DATE( ?, 'YYYYMMDD')), 'YYYYMM')||'01', 'YYYYMMDD' )-1 ) ) >= 15 THEN 1
                                                 ELSE 0
                                            END
                                           ) / 12 * (80*60)                                               
                                     ELSE 0
                                END AS VETER_ASSE_REQ_TIME
                              , NVL(VETER_ASSE_TAKE_TIME,0) AS VETER_ASSE_TAKE_TIME
                          FROM TB_BA_USER A,
                               (
                                SELECT DIVISIONID, DVS_NAME, DVS_FULLNAME
                                  FROM TB_BA_DIVISION
                                 WHERE COMPANYID = ?
                                    AND DEL_YN = 'N' AND USEFLAG = 'Y'
	]]><dynamic><![CDATA[ ${ WHERE_DIVISION } ]]></dynamic><![CDATA[
                               ) B,
                               (
                               /* 교육 + 상시 */
                                SELECT USERID, SUM(RFCOG_TIME)  AS VETER_ASSE_TAKE_TIME
                                  FROM (
                                        SELECT /* 교육개설 수료정보 : 부서지정학습 */
                                               BSOC.USERID
                                             , NVL(BSOC.RECOG_TIME_H,0)*60+(NVL(BSOC.RECOG_TIME_M,0)) AS RFCOG_TIME
                                          FROM TB_BA_SBJCT BS,
                                               TB_BA_SBJCT_OPEN BSO,
                                               TB_BA_SBJCT_OPEN_CLASS BSOC,
                                               TB_BA_USER BU
                                         WHERE BSOC.COMPANYID = ?
                                           AND BSOC.ATTEND_STATE_CODE = '5' /* 수강상태 : 수료 */
                                           AND BSOC.OPEN_NUM = BSO.OPEN_NUM
                                           AND BSOC.COMPANYID = BSO.COMPANYID
                                           AND BSO.SUBJECT_NUM = BS.SUBJECT_NUM
                                           AND BSO.COMPANYID = BS.COMPANYID
                                           AND BU.USERID = BSOC.USERID
                                           AND BU.GRADE_NUM = BSOC.TIME_GRADE_NUM /* 현직급 동일 */
                                           AND BS.USEFLAG = 'Y'
                                           AND BS.DEL_YN = 'N'
                                           AND BSO.USEFLAG = 'Y'
                                           AND BSOC.USEFLAG = 'Y'
                                        UNION ALL
                                        SELECT /* 상시학습 */ 
                                               EASU.USERID
                                             , NVL(EAS.RECOG_TIME_H,0)*60+(NVL(EAS.RECOG_TIME_M,0)) AS RFCOG_TIME
                                          FROM TB_EM_ALW_STD_USER EASU,
                                               TB_EM_ALW_STD EAS,
                                               TB_BA_USER BU
                                         WHERE EASU.COMPANYID = ?
                                           AND BU.USERID = EASU.USERID
                                           AND BU.GRADE_NUM = EASU.GRADE_NUM /* 현직급 동일 */
                                           AND EASU.USEFLAG = 'Y'
                                           AND EASU.COMPANYID = EAS.COMPANYID
                                           AND EASU.ALW_STD_SEQ = EAS.ALW_STD_SEQ
                                           AND EAS.REQ_STS_CD = '2' /* 승인건만 */
                                           AND EAS.USEFLAG = 'Y'
                                           AND EAS.DEL_YN = 'N'
                                       )
                                 GROUP BY USERID
                               ) C
	                     WHERE A.DIVISIONID = B.DIVISIONID
	                       AND A.USERID = C.USERID(+)
	                       AND USEFLAG = 'Y'
	                       AND DEL_YN = 'N'
	                 )  
	     	)  A
	  WHERE 1=1
	]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
	]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
	]]></sql-query>
	
    <sql-query name="CANCEL_EDU_RECOMM_APPR_REQ" description="운영관리 추천순위 승인요청 취소처리"><![CDATA[
        -- CDP : CANCEL_EDU_RECOMM_APPR_REQ
    
UPDATE TB_BA_SBJCT_OPEN
SET REQ_STS_CD = 0
WHERE COMPANYID = ? AND REQ_NUM = ?
    ]]></sql-query>
    
    
</sqlset>