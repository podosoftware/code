<?xml version="1.0" encoding="UTF-8"?>
<sqlset>
    <name>CAR</name>
    <version>2.0</version>
    <description>역량진단결과 모듈을 위한 쿼리</description>
    
    <sql-query name="GET_RUN_YYYY" description="역량진단 년도 리스트"><![CDATA[
-- sql_file : car-sqlset.xml
-- sql_name : GET_ASSM_YYYY

SELECT YYYY , YYYY||'년' YYYY_TEXT
FROM TB_CAM_RUN_L CR
WHERE COMPANYID = ?
    AND EVL_TYPE_CD = '1'
    AND USEFLAG = 'Y'
GROUP BY YYYY
ORDER BY YYYY DESC
    ]]></sql-query>

    <sql-query name="GET_RUN_HISTORY_LIST" description="역량진단 이력 리스트"><![CDATA[
-- sql_file : car-sqlset.xml
-- sql_name : GET_RUN_HISTORY_LIST

--역량진단 이력
SELECT RUN_NUM, RUN_NAME, YYYY,
    CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') < TO_CHAR(RUN_START, 'YYYYMMDD') THEN 'B'
         WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(RUN_START, 'YYYYMMDD') AND TO_CHAR(RUN_END, 'YYYYMMDD') THEN 'I'
    ELSE 'A'
    END PERIOD_FLAG
FROM TB_CAM_RUN_L
WHERE COMPANYID = ? AND EVL_TYPE_CD = '1' 
    AND USEFLAG = 'Y' AND DEL_YN = 'N'
ORDER BY RUN_END DESC
    ]]></sql-query>

    <sql-query name="GET_RUN_STS_LIST" description="역량진단 실시현황 리스트"><![CDATA[
-- sql_file : car-sqlset.xml
-- sql_name : GET_RUN_STS_LIST

SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
FROM(
	SELECT CT.RUN_NUM, '' CHECKFLAG, CT.COMPANYID, 
	    RI.USERID, BU.NAME, BU.EMPNO, BD.DVS_NAME, CL.JOBLDR_NAME LEADERSHIP_NAME, CJ.JOBLDR_NAME JOB_NAME,
	    FUN_COMMON_CODE(CT.COMPANYID, 'BA15', BU.GRADE_NUM) GRADE_NM,
	    CASE WHEN COUNT(*) = SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)) THEN '완료'
	    ELSE '미완료'
	    END STATE,
	    COUNT(*) T_CNT, SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)) C_CNT
	FROM TB_CAM_RUNTARGET_I CT, TB_CAM_RUNDIRECTION_I RI, TB_BA_USER BU, TB_BA_DIVISION BD, TB_CM_JOB_LDR_I CL, TB_CM_JOB_LDR_I CJ
	WHERE CT.COMPANYID = RI.COMPANYID AND CT.RUN_NUM = RI.RUN_NUM AND CT.USERID = RI.USERID_EXED
	    AND RI.COMPANYID = BU.COMPANYID AND RI.USERID = BU.USERID
	    AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
	    AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L'
	    AND BU.COMPANYID = CJ.COMPANYID(+) AND BU.JOB = CJ.JOBLDR_NUM(+) AND CJ.JOBLDR_FLAG(+) = 'J'
	    AND CT.USEFLAG = 'Y'
	    AND RI.USEFLAG = 'Y'
	    AND CT.COMPANYID = ?
	    AND RI.RUN_NUM = ?
	    ]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
	    GROUP BY CT.RUN_NUM, CT.COMPANYID, RI.USERID, BU.NAME, BU.EMPNO, BU.GRADE_NUM, BD.DVS_NAME, CL.JOBLDR_NAME, CJ.JOBLDR_NAME
          ) A
WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
    ]]></sql-query>
    
    <sql-query name="GET_SEND_INFO_LIST" description="발송정보 가져오기" ><![CDATA[
        --sql_file : car-sqlset.xml
        --sql_name : GET_SEND_INFO_LIST
        
		SELECT *
		  FROM (
                SELECT NAME AS FROM_NAME
                     , EMAIL AS FROM_EMAIL
                     , REPLACE(CELLPHONE,'-','') AS FROM_PHONE
                  FROM TB_BA_USER
                 WHERE COMPANYID = ?
                   AND USERID = ?
	           ) A,
	           (
		        SELECT NAME as TO_NAME
		             , EMAIL as TO_EMAIL
		             , REPLACE(CELLPHONE,'-','') AS TO_PHONE
		             , ID AS TO_EMPNO
		          FROM TB_BA_USER
		         WHERE COMPANYID = ? 
		           AND USERID = ?
	           ) B
    ]]></sql-query>
    
    <sql-query name="GET_RUN_INFO" description="실시정보 가져오기" ><![CDATA[
        --sql_file : car-sqlset.xml
        --sql_name : GET_RUN_INFO
        
		SELECT RUN_NUM, RUN_NAME
		     , TO_CHAR(RUN_START,'YYYY.MM.DD')||' ~ '||TO_CHAR(RUN_END,'YYYY.MM.DD') AS RUN_DATE  
		  FROM TB_CAM_RUN_L
		 WHERE COMPANYID = ?
		   AND RUN_NUM = ?
    ]]></sql-query>
    
    <sql-query name="GET_CAR_DIVISION_CMPLT_LIST" description="소속별 응답현황" ><![CDATA[

        --sql_file : car-sqlset.xml
        --sql_name : GET_CAR_DIVISION_CMPLT_LIST
    
SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
FROM(
	SELECT DVS_NAME, DVS_FULLNAME, MANAGER_NAME, NVL(TCNT, 0) TCNT_NUMB, NVL(YCNT, 0) YCNT_NUMB, NVL(NCNT, 0) NCNT_NUMB, DECODE(NVL(TCNT, 0), 0, 0, ROUND(YCNT/TCNT*100, 2)) YRATE_NUMB
	FROM(
        SELECT DIVISIONID, DVS_NAME, DVS_FULLNAME, HIGH_DVSID, MANAGER_NAME
        FROM(
            SELECT BD.COMPANYID, BD.DIVISIONID, BD.DVS_NAME, BD.DVS_MANAGER, BD.DVS_FULLNAME, BU.NAME MANAGER_NAME, HIGH_DVSID
              FROM TB_BA_DIVISION BD, 
                (
                SELECT NAME, USERID
                FROM TB_BA_USER A, V2_GROUP_MEMBERS B
                WHERE A.USERID = B.USER_ID
                    AND B.GROUP_ID = 3
                ) BU
             WHERE BD.DVS_MANAGER = BU.USERID(+)
                AND BD.COMPANYID = ?
                AND BD.USEFLAG = 'Y'
                AND BD.DEL_YN = 'N'
             ) A
         WHERE HIGH_DVSID IS NOT NULL
         START WITH ]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
         CONNECT BY PRIOR DIVISIONID = HIGH_DVSID
	     ) A,
	     (
	    SELECT DIVISION, COUNT(USERID) TCNT, SUM(Y_CNT) YCNT, SUM(N_CNT) NCNT
	    FROM(
	        SELECT CT.COMPANYID, CT.RUN_NUM, RI.USERID, CT.DIVISION,
	            DECODE( COUNT(*), SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)), 1, 0) Y_CNT,
	            DECODE( COUNT(*), SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)), 0, 1) N_CNT
	        FROM TB_CAM_RUNTARGET_I CT, TB_CAM_RUNDIRECTION_I RI, TB_BA_USER BU
	        WHERE CT.COMPANYID = RI.COMPANYID AND CT.RUN_NUM = RI.RUN_NUM AND CT.USERID = RI.USERID_EXED
	            AND RI.COMPANYID = BU.COMPANYID AND RI.USERID = BU.USERID
	            AND CT.USEFLAG = 'Y'
	            AND RI.USEFLAG = 'Y'
	            AND CT.COMPANYID = ?
	            AND RI.RUN_NUM = ?
	        GROUP BY CT.RUN_NUM, CT.COMPANYID, RI.USERID, CT.DIVISION
	        )
	    GROUP BY DIVISION
	    ) B
	WHERE A.DIVISIONID = B.DIVISION(+)
          ) A
WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
    ]]></sql-query>


    <sql-query name="GET_CAR_JOB_CMPLT_LIST" description="직무별 응답현황" ><![CDATA[

        --sql_file : car-sqlset.xml
        --sql_name : GET_CAR_JOB_CMPLT_LIST
    
SELECT JOBLDR_NAME
    , NVL(TCNT, 0) TCNT, NVL(YCNT, 0) YCNT, NVL(NCNT, 0) NCNT, DECODE(NVL(TCNT, 0), 0, 0, ROUND(YCNT/TCNT*100, 2)) YRATE
FROM(
    SELECT JOBLDR_NUM, JOBLDR_NAME FROM TB_CM_JOB_LDR_I
    WHERE JOBLDR_FLAG = 'J' AND USEFLAG = 'Y' AND DEL_YN = 'N'
        AND COMPANYID = ?
    ) A,
    (
    SELECT JOB, COUNT(USERID) TCNT, SUM(Y_CNT) YCNT, SUM(N_CNT) NCNT
    FROM(
        SELECT CT.COMPANYID, CT.RUN_NUM, RI.USERID, CT.JOB,
            DECODE( COUNT(*), SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)), 1, 0) Y_CNT,
            DECODE( COUNT(*), SUM(DECODE(CMPL_FLAG, 'Y', 1, 0)), 0, 1) N_CNT
        FROM TB_CAM_RUNTARGET_I CT, TB_CAM_RUNDIRECTION_I RI, TB_BA_USER BU
        WHERE CT.COMPANYID = RI.COMPANYID AND CT.RUN_NUM = RI.RUN_NUM AND CT.USERID = RI.USERID_EXED
            AND RI.COMPANYID = BU.COMPANYID AND RI.USERID = BU.USERID
            AND CT.USEFLAG = 'Y'
            AND RI.USEFLAG = 'Y'
            AND CT.COMPANYID = ?
            AND RI.RUN_NUM = ?
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
        GROUP BY CT.RUN_NUM, CT.COMPANYID, RI.USERID, CT.JOB
        )
    GROUP BY JOB
    ) B
WHERE A.JOBLDR_NUM = B.JOB
ORDER BY JOBLDR_NAME
    ]]></sql-query>

    <sql-query name="GET_JOB_LEADERSHIP_PROFILE_LIST" description="직무 계급목록 조회"><![CDATA[
-- CDP : GET_JOB_LEADERSHIP_PROFILE_LIST

SELECT NULL JOBLDR_NUM, '=== 전체 ===' JOBLDR_NAME
FROM DUAL UNION ALL
SELECT *
FROM(
    SELECT JOBLDR_NUM,JOBLDR_NAME
    FROM TB_CM_JOB_LDR_I
    WHERE COMPANYID = ?
    AND JOBLDR_FLAG = ?
    AND USEFLAG = 'Y'
    AND DEL_YN = 'N'
    ORDER BY JOBLDR_NAME
    )
    ]]></sql-query>
    
    <sql-query name="GET_CAR_CMPT_JOB_LEADERSHIP_SCO_LIST" description="역량별 직무계급 점수" ><![CDATA[

        --sql_file : car-sqlset.xml
        --sql_name : GET_CAR_CMPT_JOB_LEADERSHIP_SCO_LIST
    
SELECT 
    NVL((SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = A.JOB), '전체') JOB_NM, 
    NVL((SELECT JOBLDR_NAME FROM TB_CM_JOB_LDR_I WHERE COMPANYID = A.COMPANYID AND JOBLDR_NUM = A.LEADERSHIP), '전체') LEADERSHIP_NM, 
    A.CMPNUMBER, CMPNAME, FUN_COMMON_CODE(A.COMPANYID, 'C102', CMPGROUP) CMPGROUP_NM, ROUND(SCORE*20) SCORE
FROM(
    SELECT COMPANYID, JOB, NULL LEADERSHIP, CMPNUMBER, AVG(SCORE) SCORE
    FROM(
        SELECT CR.COMPANYID, CR.USERID, CR.JOB, CR.LEADERSHIP, CE.CMPNUMBER, CE.SCORE
        FROM TB_CAM_RUNTARGET_I CR, TB_CAR_EXED_CMPT_SCORE CE, TB_BA_USER BU
        WHERE CR.COMPANYID = CE.COMPANYID AND CR.RUN_NUM = CE.RUN_NUM AND CR.USERID = CE.USERID_EXED
            AND CR.COMPANYID = BU.COMPANYID AND CR.USERID = BU.USERID
            AND CR.COMPANYID = ? AND CR.RUN_NUM = ? 
            AND CR.USEFLAG = 'Y' AND CE.USEFLAG = 'Y'
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
        )
    GROUP BY COMPANYID, JOB, CMPNUMBER
    UNION ALL
    SELECT COMPANYID, NULL JOB, LEADERSHIP, CMPNUMBER, AVG(SCORE) SCORE
    FROM(
        SELECT CR.COMPANYID, CR.USERID, CR.JOB, CR.LEADERSHIP, CE.CMPNUMBER, CE.SCORE
        FROM TB_CAM_RUNTARGET_I CR, TB_CAR_EXED_CMPT_SCORE CE, TB_BA_USER BU
        WHERE CR.COMPANYID = CE.COMPANYID AND CR.RUN_NUM = CE.RUN_NUM AND CR.USERID = CE.USERID_EXED
            AND CR.COMPANYID = BU.COMPANYID AND CR.USERID = BU.USERID
            AND CR.COMPANYID = ? AND CR.RUN_NUM = ? 
            AND CR.USEFLAG = 'Y' AND CE.USEFLAG = 'Y'
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
        )
    GROUP BY COMPANYID, LEADERSHIP, CMPNUMBER
    UNION ALL
    SELECT COMPANYID, JOB, LEADERSHIP, CMPNUMBER, AVG(SCORE) SCORE
    FROM(
        SELECT CR.COMPANYID, CR.USERID, CR.JOB, CR.LEADERSHIP, CE.CMPNUMBER, CE.SCORE
        FROM TB_CAM_RUNTARGET_I CR, TB_CAR_EXED_CMPT_SCORE CE, TB_BA_USER BU
        WHERE CR.COMPANYID = CE.COMPANYID AND CR.RUN_NUM = CE.RUN_NUM AND CR.USERID = CE.USERID_EXED
            AND CR.COMPANYID = BU.COMPANYID AND CR.USERID = BU.USERID
            AND CR.COMPANYID = ? AND CR.RUN_NUM = ? 
            AND CR.USEFLAG = 'Y' AND CE.USEFLAG = 'Y'
]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
        )
    GROUP BY COMPANYID, JOB, LEADERSHIP, CMPNUMBER
    ) A, TB_CM_COMPETENCY CC
WHERE A.COMPANYID = CC.COMPANYID AND A.CMPNUMBER = CC.CMPNUMBER
]]><dynamic><![CDATA[ ${ WHERE_STR } ]]></dynamic><![CDATA[
ORDER BY JOB_NM, LEADERSHIP_NM, CMPNAME
    ]]></sql-query>
    
    <sql-query name="GET_CAR_CMPT_USER_SCO_LIST" description="역량별 점수" ><![CDATA[

        --sql_file : car-sqlset.xml
        --sql_name : GET_CAR_CMPT_USER_SCO_LIST
    
SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
FROM(
    SELECT CE.CMPNUMBER, CC.CMPGROUP, FUN_COMMON_CODE(CC.COMPANYID, 'C102', CC.CMPGROUP) CMPGROUP_NM, CC.CMPNAME, BD.DVS_NAME, CR.COMPANYID, 
	    CR.USERID, BU.NAME, BU.EMPNO, CR.JOB, CR.LEADERSHIP, ROUND(CE.SCORE*20) SCORE_NUMB,
	    FUN_COMMON_CODE(BU.COMPANYID, 'BA15', BU.GRADE_NUM) GRADE_NM,
	    CJ.JOBLDR_NAME JOB_NAME, CL.JOBLDR_NAME LEADERSHIP_NAME
	FROM TB_BA_USER BU, TB_CAM_RUNTARGET_I CR, TB_CAR_EXED_CMPT_SCORE CE, TB_CM_COMPETENCY CC, TB_BA_DIVISION BD, TB_CM_JOB_LDR_I CJ, TB_CM_JOB_LDR_I CL
	WHERE BU.USERID = CR.USERID 
	    AND CR.COMPANYID = CE.COMPANYID AND CR.RUN_NUM = CE.RUN_NUM AND CR.USERID = CE.USERID_EXED
	    AND CE.COMPANYID = CC.COMPANYID AND CE.CMPNUMBER = CC.CMPNUMBER
	    AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
	    AND BU.COMPANYID = CJ.COMPANYID(+) AND BU.JOB = CJ.JOBLDR_NUM(+) AND CJ.JOBLDR_FLAG(+) = 'J'
	    AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L'
	    AND CR.COMPANYID = ? AND CR.RUN_NUM = ? 
	    AND CR.USEFLAG = 'Y' AND CE.USEFLAG = 'Y' AND CC.USEFLAG = 'Y'
	]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
          ) A
WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
    ]]></sql-query>

    <sql-query name="GET_CAR_CMPT_USER_TOTAL_SCORE_LIST" description="사용자별 종합진단결과" ><![CDATA[

        --sql_file : car-sqlset.xml
        --sql_name : GET_CAR_CMPT_USER_TOTAL_SCORE_LIST
    
SELECT A.*, COUNT(*) OVER() TOTALITEMCOUNT
FROM(
	SELECT CR.RUN_NUM, BD.DVS_NAME, CR.COMPANYID, 
	    CR.USERID, BU.NAME, BU.EMPNO, CR.JOB, CR.LEADERSHIP, ROUND(CR.EVL_TOTAL_SCORE*20) EVL_TOTAL_SCORE, ROUND(CR.EVL_TOTAL_SCORE*20) EVL_TOTAL_SCORE_NUMB,
	    FUN_COMMON_CODE(BU.COMPANYID, 'BA15', BU.GRADE_NUM) GRADE_NM,
	    CJ.JOBLDR_NAME JOB_NAME, CL.JOBLDR_NAME LEADERSHIP_NAME
	FROM TB_BA_USER BU, TB_CAM_RUNTARGET_I CR, TB_BA_DIVISION BD, TB_CM_JOB_LDR_I CJ, TB_CM_JOB_LDR_I CL
	WHERE BU.USERID = CR.USERID 
	    AND BU.COMPANYID = BD.COMPANYID AND BU.DIVISIONID = BD.DIVISIONID
	    AND BU.COMPANYID = CJ.COMPANYID(+) AND BU.JOB = CJ.JOBLDR_NUM(+) AND CJ.JOBLDR_FLAG(+) = 'J'
	    AND BU.COMPANYID = CL.COMPANYID(+) AND BU.LEADERSHIP = CL.JOBLDR_NUM(+) AND CL.JOBLDR_FLAG(+) = 'L'
	    AND CR.COMPANYID = ? AND CR.RUN_NUM = ?
	    AND CR.USEFLAG = 'Y'
	]]><dynamic><![CDATA[ ${ DIVISION_STR } ]]></dynamic><![CDATA[
          ) A
WHERE 1=1
]]><dynamic><![CDATA[ ${ GRID_WHERE_CLAUSE } ]]></dynamic><![CDATA[
]]><dynamic><![CDATA[ ${ GRID_ORDERBY_CLAUSE } ]]></dynamic><![CDATA[
    ]]></sql-query>


</sqlset>